{
  "version": 3,
  "sources": ["browser-external:path", "../../property-graph/src/event-dispatcher.ts", "../../property-graph/src/graph-edge.ts", "../../property-graph/src/graph.ts", "../../property-graph/src/utils.ts", "../../property-graph/src/graph-node.ts", "../../gl-matrix/esm/common.js", "../../gl-matrix/esm/vec3.js", "../../gl-matrix/esm/mat4.js", "../../@gltf-transform/core/src/constants.ts", "../../@gltf-transform/core/src/utils/logger.ts", "../../@gltf-transform/core/src/utils/bounds.ts", "../../@gltf-transform/core/src/utils/buffer-utils.ts", "../../@gltf-transform/core/src/utils/color-utils.ts", "../../@gltf-transform/core/src/utils/image-utils.ts", "../../@gltf-transform/core/src/utils/file-utils.ts", "../../@gltf-transform/core/src/utils/is-plain-object.ts", "../../@gltf-transform/core/src/utils/math-utils.ts", "../../@gltf-transform/core/src/utils/property-utils.ts", "../../@gltf-transform/core/src/utils/uuid.ts", "../../@gltf-transform/core/src/utils/http-utils.ts", "../../@gltf-transform/core/src/properties/property.ts", "../../@gltf-transform/core/src/properties/extensible-property.ts", "../../@gltf-transform/core/src/properties/accessor.ts", "../../@gltf-transform/core/src/properties/animation.ts", "../../@gltf-transform/core/src/properties/animation-channel.ts", "../../@gltf-transform/core/src/properties/animation-sampler.ts", "../../@gltf-transform/core/src/properties/buffer.ts", "../../@gltf-transform/core/src/properties/camera.ts", "../../@gltf-transform/core/src/properties/extension-property.ts", "../../@gltf-transform/core/src/properties/texture-info.ts", "../../@gltf-transform/core/src/properties/material.ts", "../../@gltf-transform/core/src/properties/mesh.ts", "../../@gltf-transform/core/src/properties/node.ts", "../../@gltf-transform/core/src/properties/primitive.ts", "../../@gltf-transform/core/src/properties/primitive-target.ts", "../../@gltf-transform/core/src/properties/scene.ts", "../../@gltf-transform/core/src/properties/skin.ts", "../../@gltf-transform/core/src/properties/texture.ts", "../../@gltf-transform/core/src/properties/root.ts", "../../@gltf-transform/core/src/document.ts", "../../@gltf-transform/core/src/extension.ts", "../../@gltf-transform/core/src/io/reader-context.ts", "../../@gltf-transform/core/src/io/reader.ts", "../../@gltf-transform/core/src/io/writer-context.ts", "../../@gltf-transform/core/src/io/writer.ts", "../../@gltf-transform/core/src/io/platform-io.ts", "../../@gltf-transform/core/src/io/node-io.ts", "../../@gltf-transform/core/src/io/deno-io.ts", "../../@gltf-transform/core/src/io/web-io.ts"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import type { Graph } from './graph';\nimport type { GraphNode } from './graph-node';\nimport type { GraphEdge } from './graph-edge';\n\nexport interface BaseEvent {\n\ttype: string;\n\t[attachment: string]: unknown;\n}\n\nexport interface GraphEvent extends BaseEvent {\n\ttarget: Graph<GraphNode>;\n}\n\nexport interface GraphNodeEvent extends BaseEvent {\n\ttarget: GraphNode;\n}\n\nexport interface GraphEdgeEvent extends BaseEvent {\n\ttarget: GraphEdge<GraphNode, GraphNode>;\n}\n\nexport type EventListener<E> = (event: E) => void;\n\nexport class EventDispatcher<T extends BaseEvent> {\n\tprivate _listeners = {} as Record<string, EventListener<T>[]>;\n\n\taddEventListener(type: string, listener: EventListener<T>): this {\n\t\tconst listeners = this._listeners;\n\n\t\tif (listeners[type] === undefined) {\n\t\t\tlisteners[type] = [] as EventListener<T>[];\n\t\t}\n\n\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\tlisteners[type].push(listener);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tremoveEventListener(type: string, listener: EventListener<T>): this {\n\t\tif (this._listeners === undefined) return this;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdispatchEvent(event: T): this {\n\t\tif (this._listeners === undefined) return this;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[event.type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\tarray[i].call(this, event as T);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdispose(): void {\n\t\tfor (const key in this._listeners) {\n\t\t\tdelete this._listeners[key];\n\t\t}\n\t}\n}\n", "import { EventDispatcher, GraphEdgeEvent } from './event-dispatcher';\nimport { GraphNode } from './graph-node';\n\n/**\n * Represents a connection between two {@link GraphNode} resources in a {@link Graph}.\n *\n * The left node is considered the owner, and the right node the resource. The\n * owner is responsible for being able find and remove a reference to a resource, given\n * that link. The resource does not hold a reference to the link or to the owner,\n * although that reverse lookup can be done on the graph.\n *\n * @category Graph\n */\nexport class GraphEdge<Parent extends GraphNode, Child extends GraphNode> extends EventDispatcher<GraphEdgeEvent> {\n\tprivate _disposed = false;\n\n\tconstructor(\n\t\tprivate readonly _name: string,\n\t\tprivate readonly _parent: Parent,\n\t\tprivate _child: Child,\n\t\tprivate _attributes: Record<string, unknown> = {}\n\t) {\n\t\tsuper();\n\t\tif (!_parent.isOnGraph(_child)) {\n\t\t\tthrow new Error('Cannot connect disconnected graphs.');\n\t\t}\n\t}\n\n\t/** Name. */\n\tgetName(): string {\n\t\treturn this._name;\n\t}\n\n\t/** Owner node. */\n\tgetParent(): Parent {\n\t\treturn this._parent;\n\t}\n\n\t/** Resource node. */\n\tgetChild(): Child {\n\t\treturn this._child;\n\t}\n\n\t/**\n\t * Sets the child node.\n\t *\n\t * @internal Only {@link Graph} implementations may safely call this method directly. Use\n\t * \t{@link Property.swap} or {@link Graph.swapChild} instead.\n\t */\n\tsetChild(child: Child): this {\n\t\tthis._child = child;\n\t\treturn this;\n\t}\n\n\t/** Attributes of the graph node relationship. */\n\tgetAttributes(): Record<string, unknown> {\n\t\treturn this._attributes;\n\t}\n\n\t/** Destroys a (currently intact) edge, updating both the graph and the owner. */\n\tdispose(): void {\n\t\tif (this._disposed) return;\n\t\tthis._disposed = true;\n\t\tthis.dispatchEvent({ type: 'dispose', target: this });\n\t\tsuper.dispose();\n\t}\n\n\t/** Whether this link has been destroyed. */\n\tisDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n}\n", "import { GraphNodeEvent } from '.';\nimport { EventDispatcher, GraphEdgeEvent, GraphEvent } from './event-dispatcher';\nimport { GraphEdge } from './graph-edge';\nimport { GraphNode } from './graph-node';\n\n/**\n * A graph manages a network of {@link GraphNode} nodes, connected\n * by {@link @Link} edges.\n *\n * @category Graph\n */\nexport class Graph<T extends GraphNode> extends EventDispatcher<GraphEvent | GraphNodeEvent | GraphEdgeEvent> {\n\tprivate _emptySet: Set<GraphEdge<T, T>> = new Set();\n\n\tprivate _edges: Set<GraphEdge<T, T>> = new Set();\n\tprivate _parentEdges: Map<T, Set<GraphEdge<T, T>>> = new Map();\n\tprivate _childEdges: Map<T, Set<GraphEdge<T, T>>> = new Map();\n\n\t/** Returns a list of all parent->child edges on this graph. */\n\tpublic listEdges(): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._edges);\n\t}\n\n\t/** Returns a list of all edges on the graph having the given node as their child. */\n\tpublic listParentEdges(node: T): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._childEdges.get(node) || this._emptySet);\n\t}\n\n\t/** Returns a list of parent nodes for the given child node. */\n\tpublic listParents(node: T): T[] {\n\t\treturn this.listParentEdges(node).map((edge) => edge.getParent());\n\t}\n\n\t/** Returns a list of all edges on the graph having the given node as their parent. */\n\tpublic listChildEdges(node: T): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._parentEdges.get(node) || this._emptySet);\n\t}\n\n\t/** Returns a list of child nodes for the given parent node. */\n\tpublic listChildren(node: T): T[] {\n\t\treturn this.listChildEdges(node).map((edge) => edge.getChild());\n\t}\n\n\tpublic disconnectParents(node: T, filter?: (n: T) => boolean): this {\n\t\tlet edges = this.listParentEdges(node);\n\t\tif (filter) {\n\t\t\tedges = edges.filter((edge) => filter(edge.getParent()));\n\t\t}\n\t\tedges.forEach((edge) => edge.dispose());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates a {@link GraphEdge} connecting two {@link GraphNode} instances. Edge is returned\n\t * for the caller to store.\n\t * @param a Owner\n\t * @param b Resource\n\t */\n\tpublic createEdge<A extends T, B extends T>(\n\t\tname: string,\n\t\ta: A,\n\t\tb: B,\n\t\tattributes?: Record<string, unknown>\n\t): GraphEdge<A, B> {\n\t\treturn this._registerEdge(new GraphEdge(name, a, b, attributes)) as GraphEdge<A, B>;\n\t}\n\n\t/**********************************************************************************************\n\t * Internal.\n\t */\n\n\tprivate _registerEdge(edge: GraphEdge<T, T>): GraphEdge<T, T> {\n\t\tthis._edges.add(edge);\n\n\t\tconst parent = edge.getParent();\n\t\tif (!this._parentEdges.has(parent)) this._parentEdges.set(parent, new Set());\n\t\tthis._parentEdges.get(parent)!.add(edge);\n\n\t\tconst child = edge.getChild();\n\t\tif (!this._childEdges.has(child)) this._childEdges.set(child, new Set());\n\t\tthis._childEdges.get(child)!.add(edge);\n\n\t\tedge.addEventListener('dispose', () => this._removeEdge(edge));\n\t\treturn edge;\n\t}\n\n\t/**\n\t * Removes the {@link GraphEdge} from the {@link Graph}. This method should only\n\t * be invoked by the onDispose() listener created in {@link _registerEdge()}. The\n\t * public method of removing an edge is {@link GraphEdge.dispose}.\n\t */\n\tprivate _removeEdge(edge: GraphEdge<T, T>): this {\n\t\tthis._edges.delete(edge);\n\t\tthis._parentEdges.get(edge.getParent())!.delete(edge);\n\t\tthis._childEdges.get(edge.getChild())!.delete(edge);\n\t\treturn this;\n\t}\n}\n", "import type { Ref, RefMap } from './constants';\nimport { GraphEdge } from './graph-edge';\n\nexport function isRef(value: Ref | unknown): boolean {\n\treturn value instanceof GraphEdge;\n}\n\nexport function isRefList(value: Ref[] | unknown): boolean {\n\treturn Array.isArray(value) && value[0] instanceof GraphEdge;\n}\n\nexport function isRefMap(value: RefMap | unknown): boolean {\n\treturn !!(value && typeof value === 'object' && Object.values(value)[0] instanceof GraphEdge);\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { GraphNodeEvent } from '.';\nimport { LiteralKeys, Nullable, Ref, RefMap, RefKeys, RefListKeys, RefMapKeys } from './constants';\nimport { BaseEvent, EventDispatcher } from './event-dispatcher';\nimport { Graph } from './graph';\nimport { GraphEdge } from './graph-edge';\nimport { isRef, isRefList, isRefMap } from './utils';\n\n// References:\n// - https://stackoverflow.com/a/70163679/1314762\n// - https://stackoverflow.com/a/70201805/1314762\n\ntype GraphNodeAttributesInternal<Parent extends GraphNode, Attributes extends {}> = {\n\t[Key in keyof Attributes]: Attributes[Key] extends GraphNode\n\t\t? GraphEdge<Parent, Attributes[Key]>\n\t\t: Attributes[Key] extends GraphNode[]\n\t\t? GraphEdge<Parent, Attributes[Key][number]>[]\n\t\t: Attributes[Key] extends { [key: string]: GraphNode }\n\t\t? Record<string, GraphEdge<Parent, Attributes[Key][string]>>\n\t\t: Attributes[Key];\n};\n\nexport const $attributes = Symbol('attributes');\nexport const $immutableKeys = Symbol('immutableKeys');\n\n/**\n * Represents a node in a {@link Graph}.\n *\n * @category Graph\n */\nexport abstract class GraphNode<Attributes extends {} = {}> extends EventDispatcher<GraphNodeEvent> {\n\tprivate _disposed = false;\n\n\t/**\n\t * Internal graph used to search and maintain references.\n\t * @hidden\n\t */\n\tprotected readonly graph: Graph<GraphNode>;\n\n\t/**\n\t * Attributes (literal values and GraphNode references) associated with this instance. For each\n\t * GraphNode reference, the attributes stores a {@link GraphEdge}. List and Map references are\n\t * stored as arrays and dictionaries of edges.\n\t * @internal\n\t */\n\tprotected readonly [$attributes]: GraphNodeAttributesInternal<this, Attributes>;\n\n\t/**\n\t * Attributes included with `getDefaultAttributes` are considered immutable, and cannot be\n\t * modifed by `.setRef()`, `.copy()`, or other GraphNode methods. Both the edges and the\n\t * properties will be disposed with the parent GraphNode.\n\t *\n\t * Currently, only single-edge references (getRef/setRef) are supported as immutables.\n\t *\n\t * @internal\n\t */\n\tprotected readonly [$immutableKeys]: Set<string>;\n\n\tconstructor(graph: Graph<GraphNode>) {\n\t\tsuper();\n\t\tthis.graph = graph;\n\t\tthis[$immutableKeys] = new Set();\n\t\tthis[$attributes] = this._createAttributes();\n\t}\n\n\t/**\n\t * Returns default attributes for the graph node. Subclasses having any attributes (either\n\t * literal values or references to other graph nodes) must override this method. Literal\n\t * attributes should be given their default values, if any. References should generally be\n\t * initialized as empty (Ref → null, RefList → [], RefMap → {}) and then modified by setters.\n\t *\n\t * Any single-edge references (setRef) returned by this method will be considered immutable,\n\t * to be owned by and disposed with the parent node. Multi-edge references (addRef, removeRef,\n\t * setRefMap) cannot be returned as default attributes.\n\t */\n\tprotected getDefaults(): Nullable<Attributes> {\n\t\treturn {} as Nullable<Attributes>;\n\t}\n\n\t/**\n\t * Constructs and returns an object used to store a graph nodes attributes. Compared to the\n\t * default Attributes interface, this has two distinctions:\n\t *\n\t * 1. Slots for GraphNode<T> objects are replaced with slots for GraphEdge<this, GraphNode<T>>\n\t * 2. GraphNode<T> objects provided as defaults are considered immutable\n\t *\n\t * @internal\n\t */\n\tprivate _createAttributes(): GraphNodeAttributesInternal<this, Attributes> {\n\t\tconst defaultAttributes = this.getDefaults();\n\t\tconst attributes = {} as GraphNodeAttributesInternal<this, Attributes>;\n\t\tfor (const key in defaultAttributes) {\n\t\t\tconst value = defaultAttributes[key] as any;\n\t\t\tif (value instanceof GraphNode) {\n\t\t\t\tconst ref = this.graph.createEdge(key, this, value);\n\t\t\t\tref.addEventListener('dispose', () => value.dispose());\n\t\t\t\tthis[$immutableKeys].add(key);\n\t\t\t\tattributes[key] = ref as any;\n\t\t\t} else {\n\t\t\t\tattributes[key] = value as any;\n\t\t\t}\n\t\t}\n\t\treturn attributes;\n\t}\n\n\t/** @internal Returns true if two nodes are on the same {@link Graph}. */\n\tpublic isOnGraph(other: GraphNode): boolean {\n\t\treturn this.graph === other.graph;\n\t}\n\n\t/** Returns true if the node has been permanently removed from the graph. */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Removes both inbound references to and outbound references from this object. At the end\n\t * of the process the object holds no references, and nothing holds references to it. A\n\t * disposed object is not reusable.\n\t */\n\tpublic dispose(): void {\n\t\tif (this._disposed) return;\n\t\tthis.graph.listChildEdges(this).forEach((edge) => edge.dispose());\n\t\tthis.graph.disconnectParents(this);\n\t\tthis._disposed = true;\n\t\tthis.dispatchEvent({ type: 'dispose' });\n\t}\n\n\t/**\n\t * Removes all inbound references to this object. At the end of the process the object is\n\t * considered 'detached': it may hold references to child resources, but nothing holds\n\t * references to it. A detached object may be re-attached.\n\t */\n\tpublic detach(): this {\n\t\tthis.graph.disconnectParents(this);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transfers this object's references from the old node to the new one. The old node is fully\n\t * detached from this parent at the end of the process.\n\t *\n\t * @hidden This method works imperfectly with Root, Scene, and Node properties, which may\n\t * already hold equivalent references to the replacement object.\n\t */\n\tpublic swap(old: GraphNode, replacement: GraphNode): this {\n\t\tfor (const attribute in this[$attributes]) {\n\t\t\tconst value = this[$attributes][attribute] as Ref | Ref[] | RefMap;\n\t\t\tif (isRef(value)) {\n\t\t\t\tconst ref = value as Ref;\n\t\t\t\tif (ref.getChild() === old) {\n\t\t\t\t\tthis.setRef(attribute as any, replacement, ref.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (isRefList(value)) {\n\t\t\t\tconst refs = value as Ref[];\n\t\t\t\tconst ref = refs.find((ref) => ref.getChild() === old);\n\t\t\t\tif (ref) {\n\t\t\t\t\tconst refAttributes = ref.getAttributes();\n\t\t\t\t\tthis.removeRef(attribute as any, old).addRef(attribute as any, replacement, refAttributes);\n\t\t\t\t}\n\t\t\t} else if (isRefMap(value)) {\n\t\t\t\tconst refMap = value as RefMap;\n\t\t\t\tfor (const key in refMap) {\n\t\t\t\t\tconst ref = refMap[key];\n\t\t\t\t\tif (ref.getChild() === old) {\n\t\t\t\t\t\tthis.setRefMap(attribute as any, key, replacement, ref.getAttributes());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Literal attributes.\n\t */\n\n\t/** @hidden */\n\tprotected get<K extends LiteralKeys<Attributes>>(attribute: K): Attributes[K] {\n\t\treturn this[$attributes][attribute] as Attributes[K];\n\t}\n\n\t/** @hidden */\n\tprotected set<K extends LiteralKeys<Attributes>>(attribute: K, value: Attributes[K]): this {\n\t\t(this[$attributes][attribute] as Attributes[K]) = value;\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/**********************************************************************************************\n\t * Ref: 1:1 graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected getRef<K extends RefKeys<Attributes>>(attribute: K): (GraphNode & Attributes[K]) | null {\n\t\tconst ref = this[$attributes][attribute] as Ref;\n\t\treturn ref ? (ref.getChild() as GraphNode & Attributes[K]) : null;\n\t}\n\n\t/** @hidden */\n\tprotected setRef<K extends RefKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: (GraphNode & Attributes[K]) | null,\n\t\tattributes?: Record<string, unknown>\n\t): this {\n\t\tif (this[$immutableKeys].has(attribute as string)) {\n\t\t\tthrow new Error(`Cannot overwrite immutable attribute, \"${attribute}\".`);\n\t\t}\n\n\t\tconst prevRef = this[$attributes][attribute] as Ref;\n\t\tif (prevRef) prevRef.dispose(); // TODO(cleanup): Possible duplicate event.\n\n\t\tif (!value) return this;\n\n\t\tconst ref = this.graph.createEdge(attribute as string, this, value, attributes);\n\t\tref.addEventListener('dispose', () => {\n\t\t\tdelete this[$attributes][attribute];\n\t\t\tthis.dispatchEvent({ type: 'change', attribute });\n\t\t});\n\t\t(this[$attributes][attribute] as Ref) = ref;\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/**********************************************************************************************\n\t * RefList: 1:many graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected listRefs<K extends RefListKeys<Attributes>>(attribute: K): GraphNode[] & Attributes[K] {\n\t\tconst refs = this[$attributes][attribute] as Ref[];\n\t\treturn refs.map((ref) => ref.getChild()) as GraphNode[] & Attributes[K];\n\t}\n\n\t/** @hidden */\n\tprotected addRef<K extends RefListKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: GraphNode & Attributes[K][keyof Attributes[K]],\n\t\tattributes?: Record<string, unknown>\n\t): this {\n\t\tconst ref = this.graph.createEdge(attribute as string, this, value, attributes);\n\n\t\tconst refs = this[$attributes][attribute] as Ref[];\n\t\trefs.push(ref);\n\n\t\tref.addEventListener('dispose', () => {\n\t\t\tconst retained = refs.filter((l) => l !== ref);\n\t\t\trefs.length = 0;\n\t\t\tfor (const retainedRef of retained) refs.push(retainedRef);\n\t\t\tthis.dispatchEvent({ type: 'change', attribute });\n\t\t});\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/** @hidden */\n\tprotected removeRef<K extends RefListKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: GraphNode & Attributes[K][keyof Attributes[K]]\n\t): this {\n\t\tconst refs = this[$attributes][attribute] as Ref[];\n\t\tconst pruned = refs.filter((ref) => ref.getChild() === value);\n\t\tpruned.forEach((ref) => ref.dispose()); // TODO(cleanup): Possible duplicate event.\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * RefMap: Named 1:many (map) graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected listRefMapKeys<K extends RefMapKeys<Attributes>>(key: K): string[] {\n\t\treturn Object.keys(this[$attributes][key]);\n\t}\n\n\t/** @hidden */\n\tprotected listRefMapValues<K extends RefMapKeys<Attributes>>(\n\t\tkey: K\n\t): GraphNode[] & Attributes[K][keyof Attributes[K]][] {\n\t\treturn Object.values(this[$attributes][key]).map((ref: any) => ref.getChild());\n\t}\n\n\t/** @hidden */\n\tprotected getRefMap<K extends RefMapKeys<Attributes>, SK extends keyof Attributes[K]>(\n\t\tattribute: K,\n\t\tkey: SK\n\t): (GraphNode & Attributes[K][SK]) | null {\n\t\tconst refMap = this[$attributes][attribute] as any;\n\t\treturn refMap[key] ? refMap[key].getChild() : null;\n\t}\n\n\t/** @hidden */\n\tprotected setRefMap<K extends RefMapKeys<Attributes>, SK extends keyof Attributes[K]>(\n\t\tattribute: K,\n\t\tkey: SK,\n\t\tvalue: (GraphNode & Attributes[K][SK]) | null,\n\t\tmetadata?: Record<string, unknown>\n\t): this {\n\t\tconst refMap = this[$attributes][attribute] as any;\n\n\t\tconst prevRef = refMap[key];\n\t\tif (prevRef) prevRef.dispose(); // TODO(cleanup): Possible duplicate event.\n\n\t\tif (!value) return this;\n\n\t\tmetadata = Object.assign(metadata || {}, { key: key });\n\t\tconst ref = this.graph.createEdge(attribute as string, this, value, { ...metadata, key });\n\t\tref.addEventListener('dispose', () => {\n\t\t\tdelete refMap[key];\n\t\t\tthis.dispatchEvent({ type: 'change', attribute, key });\n\t\t});\n\t\trefMap[key] = ref;\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute, key });\n\t}\n\n\t/**********************************************************************************************\n\t * Events.\n\t */\n\n\tdispatchEvent(event: BaseEvent): this {\n\t\tsuper.dispatchEvent({ ...event, target: this });\n\t\tthis.graph.dispatchEvent({ ...event, target: this, type: `node:${event.type}` });\n\t\treturn this;\n\t}\n}\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\n/**\n * Current version of the package.\n * @hidden\n */\nexport const VERSION = `v${PACKAGE_VERSION}`;\n\n/** @internal */\nexport const NAME = '@gltf-transform/core';\n\n/**\n * Interface allowing Accessor setter/getter methods to be used interchangeably with gl-matrix\n * arrays or with three.js math objects' fromArray/toArray methods. For example, THREE.Vector2,\n * THREE.Vector3, THREE.Vector4, THREE.Quaternion, THREE.Matrix3, THREE.Matrix4, and THREE.Color.\n *\n * @internal\n */\nexport interface ArrayProxy {\n\t/** Sets the value of the object from an array of values. */\n\tfromArray(array: number[]): ArrayProxy;\n\t/** Writes the value of the object into the given array. */\n\ttoArray(array: number[]): number[];\n}\n\n/**\n * TypeScript utility for nullable types.\n * @hidden\n */\nexport type Nullable<T> = { [P in keyof T]: T[P] | null };\n\n/**\n * 2-dimensional vector.\n * @hidden\n */\nexport type vec2 = [number, number];\n\n/**\n * 3-dimensional vector.\n * @hidden\n */\nexport type vec3 = [number, number, number];\n\n/**\n * 4-dimensional vector, e.g. RGBA or a quaternion.\n * @hidden\n */\nexport type vec4 = [number, number, number, number];\n\n// prettier-ignore\n/**\n * 3x3 matrix, e.g. an affine transform of a 2D vector.\n * @hidden\n */\nexport type mat3 = [\n\tnumber, number, number,\n\tnumber, number, number,\n\tnumber, number, number,\n];\n\n// prettier-ignore\n/**\n * 4x4 matrix, e.g. an affine transform of a 3D vector.\n * @hidden\n */\nexport type mat4 = [\n\tnumber, number, number, number,\n\tnumber, number, number, number,\n\tnumber, number, number, number,\n\tnumber, number, number, number,\n];\n\n/** @hidden */\nexport type bbox = { min: vec3; max: vec3 };\n\n/** @hidden */\nexport const GLB_BUFFER = '@glb.bin';\n\n/**\n * Abstraction representing any one of the typed array classes supported by glTF and JavaScript.\n * @hidden\n */\nexport type TypedArray = Float32Array | Uint32Array | Uint16Array | Uint8Array | Int16Array | Int8Array;\n\n/**\n * Abstraction representing the typed array constructors supported by glTF and JavaScript.\n * @hidden\n */\nexport type TypedArrayConstructor =\n\t| Float32ArrayConstructor\n\t| Uint32ArrayConstructor\n\t| Uint16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Int8ArrayConstructor;\n\n/** String IDs for core {@link Property} types. */\nexport enum PropertyType {\n\tACCESSOR = 'Accessor',\n\tANIMATION = 'Animation',\n\tANIMATION_CHANNEL = 'AnimationChannel',\n\tANIMATION_SAMPLER = 'AnimationSampler',\n\tBUFFER = 'Buffer',\n\tCAMERA = 'Camera',\n\tMATERIAL = 'Material',\n\tMESH = 'Mesh',\n\tPRIMITIVE = 'Primitive',\n\tPRIMITIVE_TARGET = 'PrimitiveTarget',\n\tNODE = 'Node',\n\tROOT = 'Root',\n\tSCENE = 'Scene',\n\tSKIN = 'Skin',\n\tTEXTURE = 'Texture',\n\tTEXTURE_INFO = 'TextureInfo',\n}\n\n/** Vertex layout method. */\nexport enum VertexLayout {\n\t/**\n\t * Stores vertex attributes in a single buffer view per mesh primitive. Interleaving vertex\n\t * data may improve performance by reducing page-thrashing in GPU memory.\n\t */\n\tINTERLEAVED = 'interleaved',\n\n\t/**\n\t * Stores each vertex attribute in a separate buffer view. May decrease performance by causing\n\t * page-thrashing in GPU memory. Some 3D engines may prefer this layout, e.g. for simplicity.\n\t */\n\tSEPARATE = 'separate',\n}\n\n/** Accessor usage. */\nexport enum BufferViewUsage {\n\tARRAY_BUFFER = 'ARRAY_BUFFER',\n\tELEMENT_ARRAY_BUFFER = 'ELEMENT_ARRAY_BUFFER',\n\tINVERSE_BIND_MATRICES = 'INVERSE_BIND_MATRICES',\n\tOTHER = 'OTHER',\n}\n\n/** Texture channels. */\nexport enum TextureChannel {\n\tR = 0x1000,\n\tG = 0x0100,\n\tB = 0x0010,\n\tA = 0x0001,\n}\n\nexport enum Format {\n\tGLTF = 'GLTF',\n\tGLB = 'GLB',\n}\n", "/** Logger verbosity thresholds. */\nexport enum Verbosity {\n\t/** No events are logged. */\n\tSILENT = 4,\n\n\t/** Only error events are logged. */\n\tERROR = 3,\n\n\t/** Only error and warn events are logged. */\n\tWARN = 2,\n\n\t/** Only error, warn, and info events are logged. (DEFAULT) */\n\tINFO = 1,\n\n\t/** All events are logged. */\n\tDEBUG = 0,\n}\n\nexport interface ILogger {\n\tdebug(text: string): void;\n\tinfo(text: string): void;\n\twarn(text: string): void;\n\terror(text: string): void;\n}\n\n/**\n * # Logger\n *\n * *Logger utility class.*\n *\n * @category Utilities\n */\nexport class Logger implements ILogger {\n\t/** Logger verbosity thresholds. */\n\tstatic Verbosity = Verbosity;\n\n\t/** Default logger instance. */\n\tpublic static DEFAULT_INSTANCE = new Logger(Logger.Verbosity.INFO);\n\n\t/** Constructs a new Logger instance. */\n\tconstructor(private readonly verbosity: number) {}\n\n\t/** Logs an event at level {@link Logger.Verbosity.DEBUG}. */\n\tdebug(text: string): void {\n\t\tif (this.verbosity <= Logger.Verbosity.DEBUG) {\n\t\t\tconsole.debug(text);\n\t\t}\n\t}\n\n\t/** Logs an event at level {@link Logger.Verbosity.INFO}. */\n\tinfo(text: string): void {\n\t\tif (this.verbosity <= Logger.Verbosity.INFO) {\n\t\t\tconsole.info(text);\n\t\t}\n\t}\n\n\t/** Logs an event at level {@link Logger.Verbosity.WARN}. */\n\twarn(text: string): void {\n\t\tif (this.verbosity <= Logger.Verbosity.WARN) {\n\t\t\tconsole.warn(text);\n\t\t}\n\t}\n\n\t/** Logs an event at level {@link Logger.Verbosity.ERROR}. */\n\terror(text: string): void {\n\t\tif (this.verbosity <= Logger.Verbosity.ERROR) {\n\t\t\tconsole.error(text);\n\t\t}\n\t}\n}\n", "import { transformMat4 } from 'gl-matrix/vec3';\nimport { PropertyType, bbox, mat4, vec3 } from '../constants';\nimport type { Mesh, Node, Scene } from '../properties';\n\n/**\n * Computes bounding box (AABB) in world space for the given {@link Node} or {@link Scene}.\n *\n * Example:\n *\n * ```ts\n * const {min, max} = bounds(scene);\n * ```\n */\nexport function bounds(node: Node | Scene): bbox {\n\tconst resultBounds = createBounds();\n\tconst parents = node.propertyType === PropertyType.NODE ? [node] : node.listChildren();\n\n\tfor (const parent of parents) {\n\t\tparent.traverse((node) => {\n\t\t\tconst mesh = node.getMesh();\n\t\t\tif (!mesh) return;\n\n\t\t\t// Compute mesh bounds and update result.\n\t\t\tconst meshBounds = getMeshBounds(mesh, node.getWorldMatrix());\n\t\t\texpandBounds(meshBounds.min, resultBounds);\n\t\t\texpandBounds(meshBounds.max, resultBounds);\n\t\t});\n\t}\n\n\treturn resultBounds;\n}\n\n/** Computes mesh bounds in local space. */\nfunction getMeshBounds(mesh: Mesh, worldMatrix: mat4): bbox {\n\tconst meshBounds = createBounds();\n\n\t// We can't transform a local AABB into world space and still have a tight AABB in world space,\n\t// so we need to compute the world AABB vertex by vertex here.\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst position = prim.getAttribute('POSITION');\n\t\tif (!position) continue;\n\n\t\tlet localPos: vec3 = [0, 0, 0];\n\t\tlet worldPos: vec3 = [0, 0, 0];\n\t\tfor (let i = 0; i < position.getCount(); i++) {\n\t\t\tlocalPos = position.getElement(i, localPos) as vec3;\n\t\t\tworldPos = transformMat4(worldPos, localPos, worldMatrix) as vec3;\n\t\t\texpandBounds(worldPos, meshBounds);\n\t\t}\n\t}\n\n\treturn meshBounds;\n}\n\n/** Expands bounds of target by given source. */\nfunction expandBounds(point: vec3, target: bbox): void {\n\tfor (let i = 0; i < 3; i++) {\n\t\ttarget.min[i] = Math.min(point[i], target.min[i]);\n\t\ttarget.max[i] = Math.max(point[i], target.max[i]);\n\t}\n}\n\n/** Creates new bounds with min=Infinity, max=-Infinity. */\nfunction createBounds(): bbox {\n\treturn {\n\t\tmin: [Infinity, Infinity, Infinity] as vec3,\n\t\tmax: [-Infinity, -Infinity, -Infinity] as vec3,\n\t};\n}\n", "import type { TypedArray } from '../constants';\n\n/**\n * # BufferUtils\n *\n * *Common utilities for working with Uint8Array and Buffer objects.*\n *\n * @category Utilities\n */\nexport class BufferUtils {\n\t/** Creates a byte array from a Data URI. */\n\tstatic createBufferFromDataURI(dataURI: string): Uint8Array {\n\t\tif (typeof Buffer === 'undefined') {\n\t\t\t// Browser.\n\t\t\tconst byteString = atob(dataURI.split(',')[1]);\n\t\t\tconst ia = new Uint8Array(byteString.length);\n\t\t\tfor (let i = 0; i < byteString.length; i++) {\n\t\t\t\tia[i] = byteString.charCodeAt(i);\n\t\t\t}\n\t\t\treturn ia;\n\t\t} else {\n\t\t\t// Node.js.\n\t\t\tconst data = dataURI.split(',')[1];\n\t\t\tconst isBase64 = dataURI.indexOf('base64') >= 0;\n\t\t\treturn Buffer.from(data, isBase64 ? 'base64' : 'utf8');\n\t\t}\n\t}\n\n\t/** Encodes text to a byte array. */\n\tstatic encodeText(text: string): Uint8Array {\n\t\tif (typeof TextEncoder !== 'undefined') {\n\t\t\treturn new TextEncoder().encode(text);\n\t\t}\n\t\treturn Buffer.from(text);\n\t}\n\n\t/** Decodes a byte array to text. */\n\tstatic decodeText(array: Uint8Array): string {\n\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\treturn new TextDecoder().decode(array);\n\t\t}\n\t\treturn Buffer.from(array).toString('utf8');\n\t}\n\n\t/**\n\t * Concatenates N byte arrays.\n\t */\n\tstatic concat(arrays: Uint8Array[]): Uint8Array {\n\t\tlet totalByteLength = 0;\n\t\tfor (const array of arrays) {\n\t\t\ttotalByteLength += array.byteLength;\n\t\t}\n\n\t\tconst result = new Uint8Array(totalByteLength);\n\t\tlet byteOffset = 0;\n\n\t\tfor (const array of arrays) {\n\t\t\tresult.set(array, byteOffset);\n\t\t\tbyteOffset += array.byteLength;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Pads a Uint8Array to the next 4-byte boundary.\n\t *\n\t * Reference: [glTF → Data Alignment](https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment)\n\t */\n\tstatic pad(srcArray: Uint8Array, paddingByte = 0): Uint8Array {\n\t\tconst paddedLength = this.padNumber(srcArray.byteLength);\n\t\tif (paddedLength === srcArray.byteLength) return srcArray;\n\n\t\tconst dstArray = new Uint8Array(paddedLength);\n\t\tdstArray.set(srcArray);\n\n\t\tif (paddingByte !== 0) {\n\t\t\tfor (let i = srcArray.byteLength; i < paddedLength; i++) {\n\t\t\t\tdstArray[i] = paddingByte;\n\t\t\t}\n\t\t}\n\n\t\treturn dstArray;\n\t}\n\n\t/** Pads a number to 4-byte boundaries. */\n\tstatic padNumber(v: number): number {\n\t\treturn Math.ceil(v / 4) * 4;\n\t}\n\n\t/** Returns true if given byte array instances are equal. */\n\tstatic equals(a: Uint8Array, b: Uint8Array): boolean {\n\t\tif (a === b) return true;\n\n\t\tif (a.byteLength !== b.byteLength) return false;\n\n\t\tlet i = a.byteLength;\n\t\twhile (i--) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns a Uint8Array view of a typed array, with the same underlying ArrayBuffer.\n\t *\n\t * A shorthand for:\n\t *\n\t * ```js\n\t * const buffer = new Uint8Array(\n\t * \tarray.buffer,\n\t * \tarray.byteOffset + byteOffset,\n\t * \tMath.min(array.byteLength, byteLength)\n\t * );\n\t * ```\n\t *\n\t */\n\tstatic toView(a: TypedArray, byteOffset = 0, byteLength = Infinity): Uint8Array {\n\t\treturn new Uint8Array(a.buffer, a.byteOffset + byteOffset, Math.min(a.byteLength, byteLength));\n\t}\n\n\t/** @internal */\n\tstatic assertView(view: null): null;\n\tstatic assertView(view: Uint8Array): Uint8Array;\n\tstatic assertView(view: Uint8Array | null): Uint8Array | null;\n\tstatic assertView(view: Uint8Array | null): Uint8Array | null {\n\t\tif (view && !ArrayBuffer.isView(view)) {\n\t\t\tthrow new Error(`Method requires Uint8Array parameter; received \"${typeof view}\".`);\n\t\t}\n\t\treturn view as Uint8Array;\n\t}\n}\n", "import type { vec3, vec4 } from '../constants';\n\n/**\n * # ColorUtils\n *\n * *Common utilities for working with colors in vec3, vec4, or hexadecimal form.*\n *\n * Provides methods to convert linear components (vec3, vec4) to sRGB hex values. All colors in\n * the glTF specification, excluding color textures, are linear. Hexadecimal values, in sRGB\n * colorspace, are accessible through helper functions in the API as a convenience.\n *\n * ```typescript\n * // Hex (sRGB) to factor (linear).\n * const factor = ColorUtils.hexToFactor(0xFFCCCC, []);\n *\n * // Factor (linear) to hex (sRGB).\n * const hex = ColorUtils.factorToHex([1, .25, .25])\n * ```\n *\n * @category Utilities\n */\nexport class ColorUtils {\n\t/**\n\t * Converts sRGB hexadecimal to linear components.\n\t * @typeParam T vec3 or vec4 linear components.\n\t */\n\tstatic hexToFactor<T = vec3 | vec4>(hex: number, target: T): T {\n\t\thex = Math.floor(hex);\n\t\tconst _target = target as unknown as vec3;\n\t\t_target[0] = ((hex >> 16) & 255) / 255;\n\t\t_target[1] = ((hex >> 8) & 255) / 255;\n\t\t_target[2] = (hex & 255) / 255;\n\t\treturn this.convertSRGBToLinear<T>(target, target);\n\t}\n\n\t/**\n\t * Converts linear components to sRGB hexadecimal.\n\t * @typeParam T vec3 or vec4 linear components.\n\t */\n\tstatic factorToHex<T = vec3 | vec4>(factor: T): number {\n\t\tconst target = [...(factor as unknown as number[])] as unknown as T;\n\t\tconst [r, g, b] = this.convertLinearToSRGB(factor, target) as unknown as number[];\n\t\treturn ((r * 255) << 16) ^ ((g * 255) << 8) ^ ((b * 255) << 0);\n\t}\n\n\t/**\n\t * Converts sRGB components to linear components.\n\t * @typeParam T vec3 or vec4 linear components.\n\t */\n\tstatic convertSRGBToLinear<T = vec3 | vec4>(source: T, target: T): T {\n\t\tconst _source = source as unknown as vec3;\n\t\tconst _target = target as unknown as vec3;\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t_target[i] =\n\t\t\t\t_source[i] < 0.04045\n\t\t\t\t\t? _source[i] * 0.0773993808\n\t\t\t\t\t: Math.pow(_source[i] * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Converts linear components to sRGB components.\n\t * @typeParam T vec3 or vec4 linear components.\n\t */\n\tstatic convertLinearToSRGB<T = vec3 | vec4>(source: T, target: T): T {\n\t\tconst _source = source as unknown as vec3;\n\t\tconst _target = target as unknown as vec3;\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t_target[i] = _source[i] < 0.0031308 ? _source[i] * 12.92 : 1.055 * Math.pow(_source[i], 0.41666) - 0.055;\n\t\t}\n\t\treturn target;\n\t}\n}\n", "import type { vec2 } from '../constants';\nimport { BufferUtils } from './buffer-utils';\n\n/** Implements support for an image format in the {@link ImageUtils} class. */\nexport interface ImageUtilsFormat {\n\tmatch(buffer: Uint8Array): boolean;\n\tgetSize(buffer: Uint8Array): vec2 | null;\n\tgetChannels(buffer: Uint8Array): number | null;\n\tgetGPUByteLength?(buffer: Uint8Array): number | null;\n}\n\n/** JPEG image support. */\nclass JPEGImageUtils implements ImageUtilsFormat {\n\tmatch(array: Uint8Array): boolean {\n\t\treturn array.length >= 3 && array[0] === 255 && array[1] === 216 && array[2] === 255;\n\t}\n\tgetSize(array: Uint8Array): vec2 {\n\t\t// Skip 4 chars, they are for signature\n\t\tlet view = new DataView(array.buffer, array.byteOffset + 4);\n\n\t\tlet i: number, next: number;\n\t\twhile (view.byteLength) {\n\t\t\t// read length of the next block\n\t\t\ti = view.getUint16(0, false);\n\t\t\t// i = buffer.readUInt16BE(0);\n\n\t\t\t// ensure correct format\n\t\t\tvalidateJPEGBuffer(view, i);\n\n\t\t\t// 0xFFC0 is baseline standard(SOF)\n\t\t\t// 0xFFC1 is baseline optimized(SOF)\n\t\t\t// 0xFFC2 is progressive(SOF2)\n\t\t\tnext = view.getUint8(i + 1);\n\t\t\tif (next === 0xc0 || next === 0xc1 || next === 0xc2) {\n\t\t\t\treturn [view.getUint16(i + 7, false), view.getUint16(i + 5, false)];\n\t\t\t}\n\n\t\t\t// move to the next block\n\t\t\tview = new DataView(array.buffer, view.byteOffset + i + 2);\n\t\t}\n\n\t\tthrow new TypeError('Invalid JPG, no size found');\n\t}\n\n\tgetChannels(_buffer: Uint8Array): number {\n\t\treturn 3;\n\t}\n}\n\n/**\n * PNG image support.\n *\n * PNG signature: 'PNG\\r\\n\\x1a\\n'\n * PNG image header chunk name: 'IHDR'\n */\nclass PNGImageUtils implements ImageUtilsFormat {\n\t// Used to detect \"fried\" png's: http://www.jongware.com/pngdefry.html\n\tstatic PNG_FRIED_CHUNK_NAME = 'CgBI';\n\tmatch(array: Uint8Array): boolean {\n\t\treturn (\n\t\t\tarray.length >= 8 &&\n\t\t\tarray[0] === 0x89 &&\n\t\t\tarray[1] === 0x50 &&\n\t\t\tarray[2] === 0x4e &&\n\t\t\tarray[3] === 0x47 &&\n\t\t\tarray[4] === 0x0d &&\n\t\t\tarray[5] === 0x0a &&\n\t\t\tarray[6] === 0x1a &&\n\t\t\tarray[7] === 0x0a\n\t\t);\n\t}\n\tgetSize(array: Uint8Array): vec2 {\n\t\tconst view = new DataView(array.buffer, array.byteOffset);\n\t\tconst magic = BufferUtils.decodeText(array.slice(12, 16));\n\t\tif (magic === PNGImageUtils.PNG_FRIED_CHUNK_NAME) {\n\t\t\treturn [view.getUint32(32, false), view.getUint32(36, false)];\n\t\t}\n\t\treturn [view.getUint32(16, false), view.getUint32(20, false)];\n\t}\n\tgetChannels(_buffer: Uint8Array): number {\n\t\treturn 4;\n\t}\n}\n\n/**\n * # ImageUtils\n *\n * *Common utilities for working with image data.*\n *\n * @category Utilities\n */\nexport class ImageUtils {\n\tstatic impls: Record<string, ImageUtilsFormat> = {\n\t\t'image/jpeg': new JPEGImageUtils(),\n\t\t'image/png': new PNGImageUtils(),\n\t};\n\n\t/** Registers support for a new image format; useful for certain extensions. */\n\tpublic static registerFormat(mimeType: string, impl: ImageUtilsFormat): void {\n\t\tthis.impls[mimeType] = impl;\n\t}\n\n\t/**\n\t * Returns detected MIME type of the given image buffer. Note that for image\n\t * formats with support provided by extensions, the extension must be\n\t * registered with an I/O class before it can be detected by ImageUtils.\n\t */\n\tpublic static getMimeType(buffer: Uint8Array): string | null {\n\t\tfor (const mimeType in this.impls) {\n\t\t\tif (this.impls[mimeType].match(buffer)) {\n\t\t\t\treturn mimeType;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Returns the dimensions of the image. */\n\tpublic static getSize(buffer: Uint8Array, mimeType: string): vec2 | null {\n\t\tif (!this.impls[mimeType]) return null;\n\t\treturn this.impls[mimeType].getSize(buffer);\n\t}\n\n\t/**\n\t * Returns a conservative estimate of the number of channels in the image. For some image\n\t * formats, the method may return 4 indicating the possibility of an alpha channel, without\n\t * the ability to guarantee that an alpha channel is present.\n\t */\n\tpublic static getChannels(buffer: Uint8Array, mimeType: string): number | null {\n\t\tif (!this.impls[mimeType]) return null;\n\t\treturn this.impls[mimeType].getChannels(buffer);\n\t}\n\n\t/** Returns a conservative estimate of the GPU memory required by this image. */\n\tpublic static getMemSize(buffer: Uint8Array, mimeType: string): number | null {\n\t\tif (!this.impls[mimeType]) return null;\n\n\t\tif (this.impls[mimeType].getGPUByteLength) {\n\t\t\treturn this.impls[mimeType].getGPUByteLength!(buffer);\n\t\t}\n\n\t\tlet uncompressedBytes = 0;\n\t\tconst channels = 4; // See https://github.com/donmccurdy/glTF-Transform/issues/151.\n\t\tconst resolution = this.getSize(buffer, mimeType);\n\t\tif (!resolution) return null;\n\n\t\twhile (resolution[0] > 1 || resolution[1] > 1) {\n\t\t\tuncompressedBytes += resolution[0] * resolution[1] * channels;\n\t\t\tresolution[0] = Math.max(Math.floor(resolution[0] / 2), 1);\n\t\t\tresolution[1] = Math.max(Math.floor(resolution[1] / 2), 1);\n\t\t}\n\t\tuncompressedBytes += 1 * 1 * channels;\n\t\treturn uncompressedBytes;\n\t}\n\n\t/** Returns the preferred file extension for the given MIME type. */\n\tpublic static mimeTypeToExtension(mimeType: string): string {\n\t\tif (mimeType === 'image/jpeg') return 'jpg';\n\t\treturn mimeType.split('/').pop()!;\n\t}\n\n\t/** Returns the MIME type for the given file extension. */\n\tpublic static extensionToMimeType(extension: string): string {\n\t\tif (extension === 'jpg') return 'image/jpeg';\n\t\treturn `image/${extension}`;\n\t}\n}\n\nfunction validateJPEGBuffer(view: DataView, i: number): DataView {\n\t// index should be within buffer limits\n\tif (i > view.byteLength) {\n\t\tthrow new TypeError('Corrupt JPG, exceeded buffer limits');\n\t}\n\t// Every JPEG block must begin with a 0xFF\n\tif (view.getUint8(i) !== 0xff) {\n\t\tthrow new TypeError('Invalid JPG, marker table corrupted');\n\t}\n\n\treturn view;\n}\n", "import { ImageUtils } from './image-utils';\n\n/**\n * # FileUtils\n *\n * *Utility class for working with file systems and URI paths.*\n *\n * @category Utilities\n */\nexport class FileUtils {\n\t/**\n\t * Extracts the basename from a file path, e.g. \"folder/model.glb\" -> \"model\".\n\t * See: {@link HTTPUtils.basename}\n\t */\n\tstatic basename(uri: string): string {\n\t\tconst fileName = uri.split(/[\\\\/]/).pop()!;\n\t\treturn fileName.substring(0, fileName.lastIndexOf('.'));\n\t}\n\n\t/**\n\t * Extracts the extension from a file path, e.g. \"folder/model.glb\" -> \"glb\".\n\t * See: {@link HTTPUtils.extension}\n\t */\n\tstatic extension(uri: string): string {\n\t\tif (uri.startsWith('data:image/')) {\n\t\t\tconst mimeType = uri.match(/data:(image\\/\\w+)/)![1];\n\t\t\treturn ImageUtils.mimeTypeToExtension(mimeType);\n\t\t} else if (uri.startsWith('data:model/gltf+json')) {\n\t\t\treturn 'gltf';\n\t\t} else if (uri.startsWith('data:model/gltf-binary')) {\n\t\t\treturn 'glb';\n\t\t} else if (uri.startsWith('data:application/')) {\n\t\t\treturn 'bin';\n\t\t}\n\t\treturn uri.split(/[\\\\/]/).pop()!.split(/[.]/).pop()!;\n\t}\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n// Reference: https://github.com/jonschlinkert/is-plain-object\n\nfunction isObject(o: any) {\n\treturn Object.prototype.toString.call(o) === '[object Object]';\n}\n\nexport function isPlainObject(o: any) {\n\tif (isObject(o) === false) return false;\n\n\t// If has modified constructor\n\tconst ctor = o.constructor;\n\tif (ctor === undefined) return true;\n\n\t// If has modified prototype\n\tconst prot = ctor.prototype;\n\tif (isObject(prot) === false) return false;\n\n\t// If constructor does not have an Object-specific method\n\tif (Object.prototype.hasOwnProperty.call(prot, 'isPrototypeOf') === false) {\n\t\treturn false;\n\t}\n\n\t// Most likely a plain Object\n\treturn true;\n}\n", "import { determinant, getRotation } from 'gl-matrix/mat4';\nimport { length } from 'gl-matrix/vec3';\nimport type { mat4, vec3, vec4 } from '../constants';\nimport type { GLTF } from '../types/gltf';\n\n/** @hidden */\nexport class MathUtils {\n\tpublic static identity(v: number): number {\n\t\treturn v;\n\t}\n\n\tpublic static eq(a: number[], b: number[], tolerance = 10e-6): boolean {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tif (Math.abs(a[i] - b[i]) > tolerance) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic static denormalize(c: number, componentType: GLTF.AccessorComponentType): number {\n\t\t// Hardcode enums from accessor.ts to avoid a circular dependency.\n\t\tswitch (componentType) {\n\t\t\tcase 5126:\n\t\t\t\treturn c;\n\t\t\tcase 5123:\n\t\t\t\treturn c / 65535.0;\n\t\t\tcase 5121:\n\t\t\t\treturn c / 255.0;\n\t\t\tcase 5122:\n\t\t\t\treturn Math.max(c / 32767.0, -1.0);\n\t\t\tcase 5120:\n\t\t\t\treturn Math.max(c / 127.0, -1.0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid component type.');\n\t\t}\n\t}\n\n\tpublic static normalize(f: number, componentType: GLTF.AccessorComponentType): number {\n\t\t// Hardcode enums from accessor.ts to avoid a circular dependency.\n\t\tswitch (componentType) {\n\t\t\tcase 5126:\n\t\t\t\treturn f;\n\t\t\tcase 5123:\n\t\t\t\treturn Math.round(f * 65535.0);\n\t\t\tcase 5121:\n\t\t\t\treturn Math.round(f * 255.0);\n\t\t\tcase 5122:\n\t\t\t\treturn Math.round(f * 32767.0);\n\t\t\tcase 5120:\n\t\t\t\treturn Math.round(f * 127.0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid component type.');\n\t\t}\n\t}\n\n\t/**\n\t * Decompose a mat4 to TRS properties.\n\t *\n\t * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n\t * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n\t *\n\t * @param srcMat Matrix element, to be decomposed to TRS properties.\n\t * @param dstTranslation Translation element, to be overwritten.\n\t * @param dstRotation Rotation element, to be overwritten.\n\t * @param dstScale Scale element, to be overwritten.\n\t */\n\tpublic static decompose(srcMat: mat4, dstTranslation: vec3, dstRotation: vec4, dstScale: vec3): void {\n\t\tlet sx = length([srcMat[0], srcMat[1], srcMat[2]]);\n\t\tconst sy = length([srcMat[4], srcMat[5], srcMat[6]]);\n\t\tconst sz = length([srcMat[8], srcMat[9], srcMat[10]]);\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = determinant(srcMat);\n\t\tif (det < 0) sx = -sx;\n\n\t\tdstTranslation[0] = srcMat[12];\n\t\tdstTranslation[1] = srcMat[13];\n\t\tdstTranslation[2] = srcMat[14];\n\n\t\t// scale the rotation part\n\t\tconst _m1 = srcMat.slice();\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1[0] *= invSX;\n\t\t_m1[1] *= invSX;\n\t\t_m1[2] *= invSX;\n\n\t\t_m1[4] *= invSY;\n\t\t_m1[5] *= invSY;\n\t\t_m1[6] *= invSY;\n\n\t\t_m1[8] *= invSZ;\n\t\t_m1[9] *= invSZ;\n\t\t_m1[10] *= invSZ;\n\n\t\tgetRotation(dstRotation, _m1 as mat4);\n\n\t\tdstScale[0] = sx;\n\t\tdstScale[1] = sy;\n\t\tdstScale[2] = sz;\n\t}\n\n\t/**\n\t * Compose TRS properties to a mat4.\n\t *\n\t * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n\t * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n\t *\n\t * @param srcTranslation Translation element of matrix.\n\t * @param srcRotation Rotation element of matrix.\n\t * @param srcScale Scale element of matrix.\n\t * @param dstMat Matrix element, to be modified and returned.\n\t * @returns dstMat, overwritten to mat4 equivalent of given TRS properties.\n\t */\n\tpublic static compose(srcTranslation: vec3, srcRotation: vec4, srcScale: vec3, dstMat: mat4): mat4 {\n\t\tconst te = dstMat;\n\n\t\tconst x = srcRotation[0],\n\t\t\ty = srcRotation[1],\n\t\t\tz = srcRotation[2],\n\t\t\tw = srcRotation[3];\n\t\tconst x2 = x + x,\n\t\t\ty2 = y + y,\n\t\t\tz2 = z + z;\n\t\tconst xx = x * x2,\n\t\t\txy = x * y2,\n\t\t\txz = x * z2;\n\t\tconst yy = y * y2,\n\t\t\tyz = y * z2,\n\t\t\tzz = z * z2;\n\t\tconst wx = w * x2,\n\t\t\twy = w * y2,\n\t\t\twz = w * z2;\n\n\t\tconst sx = srcScale[0],\n\t\t\tsy = srcScale[1],\n\t\t\tsz = srcScale[2];\n\n\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\tte[1] = (xy + wz) * sx;\n\t\tte[2] = (xz - wy) * sx;\n\t\tte[3] = 0;\n\n\t\tte[4] = (xy - wz) * sy;\n\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\tte[6] = (yz + wx) * sy;\n\t\tte[7] = 0;\n\n\t\tte[8] = (xz + wy) * sz;\n\t\tte[9] = (yz - wx) * sz;\n\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\tte[11] = 0;\n\n\t\tte[12] = srcTranslation[0];\n\t\tte[13] = srcTranslation[1];\n\t\tte[14] = srcTranslation[2];\n\t\tte[15] = 1;\n\n\t\treturn te;\n\t}\n}\n", "import type { GraphEdge } from 'property-graph';\nimport { isPlainObject } from './is-plain-object';\nimport type { BufferViewUsage } from '../constants';\nimport type { Property } from '../properties';\n\nexport type Ref = GraphEdge<Property, Property>;\nexport type RefMap = { [key: string]: Ref };\nexport type UnknownRef = Ref | Ref[] | RefMap | unknown;\n\nexport function equalsRef(refA: Ref, refB: Ref): boolean {\n\tif (!!refA !== !!refB) return false;\n\n\tconst a = refA.getChild();\n\tconst b = refB.getChild();\n\n\treturn a === b || a.equals(b);\n}\n\nexport function equalsRefList(refListA: Ref[], refListB: Ref[]): boolean {\n\tif (!!refListA !== !!refListB) return false;\n\tif (refListA.length !== refListB.length) return false;\n\n\tfor (let i = 0; i < refListA.length; i++) {\n\t\tconst a = refListA[i];\n\t\tconst b = refListB[i];\n\n\t\tif (a.getChild() === b.getChild()) continue;\n\n\t\tif (!a.getChild().equals(b.getChild())) return false;\n\t}\n\n\treturn true;\n}\n\nexport function equalsRefMap(refMapA: RefMap, refMapB: RefMap): boolean {\n\tif (!!refMapA !== !!refMapB) return false;\n\n\tconst keysA = Object.keys(refMapA);\n\tconst keysB = Object.keys(refMapB);\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (const key in refMapA) {\n\t\tconst refA = refMapA[key];\n\t\tconst refB = refMapB[key];\n\t\tif (!!refA !== !!refB) return false;\n\n\t\tconst a = refA.getChild();\n\t\tconst b = refB.getChild();\n\t\tif (a === b) continue;\n\n\t\tif (!a.equals(b)) return false;\n\t}\n\n\treturn true;\n}\n\nexport function equalsArray(a: ArrayLike<unknown> | null, b: ArrayLike<unknown> | null): boolean {\n\tif (a === b) return true;\n\n\tif (!!a !== !!b || !a || !b) return false;\n\n\tif (a.length !== b.length) return false;\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) return false;\n\t}\n\n\treturn true;\n}\n\nexport function equalsObject(_a: unknown, _b: unknown): boolean {\n\tif (_a === _b) return true;\n\tif (!!_a !== !!_b) return false;\n\tif (!isPlainObject(_a) || !isPlainObject(_b)) {\n\t\treturn _a === _b;\n\t}\n\n\tconst a = _a as Record<string, unknown>;\n\tconst b = _b as Record<string, unknown>;\n\n\tlet numKeysA = 0;\n\tlet numKeysB = 0;\n\n\tlet key: string;\n\n\tfor (key in a) numKeysA++;\n\tfor (key in b) numKeysB++;\n\tif (numKeysA !== numKeysB) return false;\n\n\tfor (key in a) {\n\t\tconst valueA = a[key];\n\t\tconst valueB = b[key];\n\t\tif (isArray(valueA) && isArray(valueB)) {\n\t\t\tif (!equalsArray(valueA as [], valueB as [])) return false;\n\t\t} else if (isPlainObject(valueA) && isPlainObject(valueB)) {\n\t\t\tif (!equalsObject(valueA, valueB)) return false;\n\t\t} else {\n\t\t\tif (valueA !== valueB) return false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport type RefAttributes = Record<string, unknown>;\n\nexport interface AccessorRefAttributes extends RefAttributes {\n\t/** Usage role of an accessor reference. */\n\tusage: BufferViewUsage | string;\n}\n\nexport interface TextureRefAttributes extends RefAttributes {\n\t/** Bitmask for {@link TextureChannel TextureChannels} used by a texture reference. */\n\tchannels: number;\n}\n\nexport function isArray(value: unknown): boolean {\n\treturn Array.isArray(value) || ArrayBuffer.isView(value);\n}\n", "const ALPHABET = '23456789abdegjkmnpqrvwxyzABDEGJKMNPQRVWXYZ';\nconst UNIQUE_RETRIES = 999;\nconst ID_LENGTH = 6;\n\nconst previousIDs = new Set();\n\nconst generateOne = function (): string {\n\tlet rtn = '';\n\tfor (let i = 0; i < ID_LENGTH; i++) {\n\t\trtn += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));\n\t}\n\treturn rtn;\n};\n\n/**\n * Short ID generator.\n *\n * Generated IDs are short, easy to type, and unique for the duration of the program's execution.\n * Uniqueness across multiple program executions, or on other devices, is not guaranteed. Based on\n * [Short ID Generation in JavaScript](https://tomspencer.dev/blog/2014/11/16/short-id-generation-in-javascript/),\n * with alterations.\n *\n * @category Utilities\n * @hidden\n */\nexport const uuid = function (): string {\n\tfor (let retries = 0; retries < UNIQUE_RETRIES; retries++) {\n\t\tconst id = generateOne();\n\t\tif (!previousIDs.has(id)) {\n\t\t\tpreviousIDs.add(id);\n\t\t\treturn id;\n\t\t}\n\t}\n\treturn '';\n};\n", "import { FileUtils } from './file-utils';\n\n// Need a placeholder domain to construct a URL from a relative path. We only\n// access `url.pathname`, so the domain doesn't matter.\nconst NULL_DOMAIN = 'https://null.example';\n\n/**\n * # HTTPUtils\n *\n * *Utility class for working with URLs.*\n *\n * @category Utilities\n */\nexport class HTTPUtils {\n\tstatic readonly DEFAULT_INIT: RequestInit = {};\n\tstatic readonly PROTOCOL_REGEXP = /^[a-zA-Z]+:\\/\\//;\n\n\tstatic dirname(path: string): string {\n\t\tconst index = path.lastIndexOf('/');\n\t\tif (index === -1) return './';\n\t\treturn path.substring(0, index + 1);\n\t}\n\n\t/**\n\t * Extracts the basename from a URL, e.g. \"folder/model.glb\" -> \"model\".\n\t * See: {@link FileUtils.basename}\n\t */\n\tstatic basename(uri: string): string {\n\t\treturn FileUtils.basename(new URL(uri, NULL_DOMAIN).pathname);\n\t}\n\n\t/**\n\t * Extracts the extension from a URL, e.g. \"folder/model.glb\" -> \"glb\".\n\t * See: {@link FileUtils.extension}\n\t */\n\tstatic extension(uri: string): string {\n\t\treturn FileUtils.extension(new URL(uri, NULL_DOMAIN).pathname);\n\t}\n\n\tstatic resolve(base: string, path: string) {\n\t\tif (!this.isRelativePath(path)) return path;\n\n\t\tconst stack = base.split('/');\n\t\tconst parts = path.split('/');\n\t\tstack.pop();\n\t\tfor (let i = 0; i < parts.length; i++) {\n\t\t\tif (parts[i] === '.') continue;\n\t\t\tif (parts[i] === '..') {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\tstack.push(parts[i]);\n\t\t\t}\n\t\t}\n\t\treturn stack.join('/');\n\t}\n\n\t/**\n\t * Returns true for URLs containing a protocol, and false for both\n\t * absolute and relative paths.\n\t */\n\tstatic isAbsoluteURL(path: string) {\n\t\treturn this.PROTOCOL_REGEXP.test(path);\n\t}\n\n\t/**\n\t * Returns true for paths that are declared relative to some unknown base\n\t * path. For example, \"foo/bar/\" is relative both \"/foo/bar/\" is not.\n\t */\n\tstatic isRelativePath(path: string): boolean {\n\t\treturn !/^(?:[a-zA-Z]+:)?\\//.test(path);\n\t}\n}\n", "import type { Nullable } from '../constants';\nimport { $attributes, $immutableKeys, Graph, GraphNode, GraphEdge, isRef, isRefList, isRefMap } from 'property-graph';\nimport { equalsArray, equalsObject, equalsRef, equalsRefList, equalsRefMap, isArray, isPlainObject } from '../utils';\nimport type { Ref, RefMap, UnknownRef } from '../utils';\n\nexport type PropertyResolver<T extends Property> = (p: T) => T;\nexport const COPY_IDENTITY = <T extends Property>(t: T): T => t;\n\nexport interface IProperty {\n\tname: string;\n\textras: Record<string, unknown>;\n}\n\nconst EMPTY_SET = new Set<string>();\n\n/**\n * # Property\n *\n * *Properties represent distinct resources in a glTF asset, referenced by other properties.*\n *\n * For example, each material and texture is a property, with material properties holding\n * references to the textures. All properties are created with factory methods on the\n * {@link Document} in which they should be constructed. Properties are destroyed by calling\n * {@link dispose}().\n *\n * Usage:\n *\n * ```ts\n * const texture = doc.createTexture('myTexture');\n * doc.listTextures(); // → [texture x 1]\n *\n * // Attach a texture to a material.\n * material.setBaseColorTexture(texture);\n * material.getBaseColortexture(); // → texture\n *\n * // Detaching a texture removes any references to it, except from the doc.\n * texture.detach();\n * material.getBaseColorTexture(); // → null\n * doc.listTextures(); // → [texture x 1]\n *\n * // Disposing a texture removes all references to it, and its own references.\n * texture.dispose();\n * doc.listTextures(); // → []\n * ```\n *\n * Reference:\n * - [glTF → Concepts](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#concepts)\n *\n * @category Properties\n */\nexport abstract class Property<T extends IProperty = IProperty> extends GraphNode<T> {\n\t/** Property type. */\n\tpublic abstract readonly propertyType: string;\n\n\t/**\n\t * Internal graph used to search and maintain references.\n\t * @override\n\t * @hidden\n\t */\n\tprotected declare readonly graph: Graph<Property>;\n\n\t/** @hidden */\n\tconstructor(graph: Graph<Property>, name = '') {\n\t\tsuper(graph);\n\t\t(this as Property)[$attributes]['name'] = name;\n\t\tthis.init();\n\t\tthis.dispatchEvent({ type: 'create' });\n\t}\n\n\t/**\n\t * Initializes instance data for a subclass. Because subclass constructors run after the\n\t * constructor of the parent class, and 'create' events dispatched by the parent class\n\t * assume the instance is fully initialized, it's best to do any initialization here.\n\t * @hidden\n\t */\n\tprotected abstract init(): void;\n\n\t/**\n\t * Returns default attributes for the property. Empty lists and maps should be initialized\n\t * to empty arrays and objects. Always invoke `super.getDefaults()` and extend the result.\n\t */\n\tprotected getDefaults(): Nullable<T> {\n\t\treturn Object.assign(super.getDefaults(), { name: '', extras: {} });\n\t}\n\n\t/**********************************************************************************************\n\t * Name.\n\t */\n\n\t/**\n\t * Returns the name of this property. While names are not required to be unique, this is\n\t * encouraged, and non-unique names will be overwritten in some tools. For custom data about\n\t * a property, prefer to use Extras.\n\t */\n\tpublic getName(): string {\n\t\treturn (this as Property).get('name');\n\t}\n\n\t/**\n\t * Sets the name of this property. While names are not required to be unique, this is\n\t * encouraged, and non-unique names will be overwritten in some tools. For custom data about\n\t * a property, prefer to use Extras.\n\t */\n\tpublic setName(name: string): this {\n\t\treturn (this as Property).set('name', name) as this;\n\t}\n\n\t/**********************************************************************************************\n\t * Extras.\n\t */\n\n\t/**\n\t * Returns a reference to the Extras object, containing application-specific data for this\n\t * Property. Extras should be an Object, not a primitive value, for best portability.\n\t */\n\tpublic getExtras(): Record<string, unknown> {\n\t\treturn (this as Property).get('extras');\n\t}\n\n\t/**\n\t * Updates the Extras object, containing application-specific data for this Property. Extras\n\t * should be an Object, not a primitive value, for best portability.\n\t */\n\tpublic setExtras(extras: Record<string, unknown>): this {\n\t\treturn (this as Property).set('extras', extras) as this;\n\t}\n\n\t/**********************************************************************************************\n\t * Graph state.\n\t */\n\n\t/**\n\t * Makes a copy of this property, with the same resources (by reference) as the original.\n\t */\n\tpublic clone(): this {\n\t\tconst PropertyClass = this.constructor as new (g: Graph<Property>) => this;\n\t\treturn new PropertyClass(this.graph).copy(this, COPY_IDENTITY);\n\t}\n\n\t/**\n\t * Copies all data from another property to this one. Child properties are copied by reference,\n\t * unless a 'resolve' function is given to override that.\n\t * @param other Property to copy references from.\n\t * @param resolve Function to resolve each Property being transferred. Default is identity.\n\t */\n\tpublic copy(other: this, resolve: PropertyResolver<Property> = COPY_IDENTITY): this {\n\t\t// Remove previous references.\n\t\tfor (const key in this[$attributes]) {\n\t\t\tconst value = this[$attributes][key];\n\t\t\tif (value instanceof GraphEdge) {\n\t\t\t\tif (!this[$immutableKeys].has(key)) {\n\t\t\t\t\tvalue.dispose();\n\t\t\t\t}\n\t\t\t} else if (isRefList(value)) {\n\t\t\t\tfor (const ref of value as unknown as Ref[]) {\n\t\t\t\t\tref.dispose();\n\t\t\t\t}\n\t\t\t} else if (isRefMap(value)) {\n\t\t\t\tfor (const subkey in value) {\n\t\t\t\t\tconst ref = value[subkey] as Ref;\n\t\t\t\t\tref.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add new references.\n\t\tfor (const key in other[$attributes]) {\n\t\t\tconst thisValue = this[$attributes][key];\n\t\t\tconst otherValue = other[$attributes][key];\n\t\t\tif (otherValue instanceof GraphEdge) {\n\t\t\t\tif (this[$immutableKeys].has(key)) {\n\t\t\t\t\tconst ref = thisValue as unknown as Ref;\n\t\t\t\t\tref.getChild().copy(resolve(otherValue.getChild()), resolve);\n\t\t\t\t} else {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tthis.setRef(key as any, resolve(otherValue.getChild()), otherValue.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (isRefList(otherValue)) {\n\t\t\t\tfor (const ref of otherValue as unknown as Ref[]) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tthis.addRef(key as any, resolve(ref.getChild()), ref.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (isRefMap(otherValue)) {\n\t\t\t\tfor (const subkey in otherValue) {\n\t\t\t\t\tconst ref = otherValue[subkey] as Ref;\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tthis.setRefMap(key as any, subkey, resolve(ref.getChild()), ref.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (isPlainObject(otherValue)) {\n\t\t\t\tthis[$attributes][key] = JSON.parse(JSON.stringify(otherValue));\n\t\t\t} else if (\n\t\t\t\tArray.isArray(otherValue) ||\n\t\t\t\totherValue instanceof ArrayBuffer ||\n\t\t\t\tArrayBuffer.isView(otherValue)\n\t\t\t) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\tthis[$attributes][key] = (otherValue as unknown as Uint8Array).slice() as any;\n\t\t\t} else {\n\t\t\t\tthis[$attributes][key] = otherValue;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true if two properties are deeply equivalent, recursively comparing the attributes\n\t * of the properties. Optionally, a 'skip' set may be included, specifying attributes whose\n\t * values should not be considered in the comparison.\n\t *\n\t * Example: Two {@link Primitive Primitives} are equivalent if they have accessors and\n\t * materials with equivalent content — but not necessarily the same specific accessors\n\t * and materials.\n\t */\n\tpublic equals(other: this, skip = EMPTY_SET): boolean {\n\t\tif (this === other) return true;\n\t\tif (this.propertyType !== other.propertyType) return false;\n\n\t\tfor (const key in this[$attributes]) {\n\t\t\tif (skip.has(key)) continue;\n\n\t\t\tconst a = this[$attributes][key] as UnknownRef;\n\t\t\tconst b = other[$attributes][key] as UnknownRef;\n\n\t\t\tif (isRef(a) || isRef(b)) {\n\t\t\t\tif (!equalsRef(a as Ref, b as Ref)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (isRefList(a) || isRefList(b)) {\n\t\t\t\tif (!equalsRefList(a as Ref[], b as Ref[])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (isRefMap(a) || isRefMap(b)) {\n\t\t\t\tif (!equalsRefMap(a as RefMap, b as RefMap)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (isPlainObject(a) || isPlainObject(b)) {\n\t\t\t\tif (!equalsObject(a, b)) return false;\n\t\t\t} else if (isArray(a) || isArray(b)) {\n\t\t\t\tif (!equalsArray(a as [], b as [])) return false;\n\t\t\t} else {\n\t\t\t\t// Literal.\n\t\t\t\tif (a !== b) return false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic detach(): this {\n\t\t// Detaching should keep properties in the same Document, and attached to its root.\n\t\tthis.graph.disconnectParents(this, (n: Property) => n.propertyType !== 'Root');\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a list of all properties that hold a reference to this property. For example, a\n\t * material may hold references to various textures, but a texture does not hold references\n\t * to the materials that use it.\n\t *\n\t * It is often necessary to filter the results for a particular type: some resources, like\n\t * {@link Accessor}s, may be referenced by different types of properties. Most properties\n\t * include the {@link Root} as a parent, which is usually not of interest.\n\t *\n\t * Usage:\n\t *\n\t * ```ts\n\t * const materials = texture\n\t * \t.listParents()\n\t * \t.filter((p) => p instanceof Material)\n\t * ```\n\t */\n\tpublic listParents(): Property[] {\n\t\treturn this.graph.listParents(this);\n\t}\n}\n", "import type { Nullable } from '../constants';\nimport type { ExtensionProperty } from './extension-property';\nimport { Property, IProperty } from './property';\n\nexport interface IExtensibleProperty extends IProperty {\n\textensions: { [key: string]: ExtensionProperty };\n}\n\n/**\n * # ExtensibleProperty\n *\n * *A {@link Property} that can have {@link ExtensionProperty} instances attached.*\n *\n * Most properties are extensible. See the {@link Extension} documentation for information about\n * how to use extensions.\n *\n * @category Properties\n */\nexport abstract class ExtensibleProperty<T extends IExtensibleProperty = IExtensibleProperty> extends Property<T> {\n\tprotected getDefaults(): Nullable<T> {\n\t\treturn Object.assign(super.getDefaults(), { extensions: {} });\n\t}\n\n\t/** Returns an {@link ExtensionProperty} attached to this Property, if any. */\n\tpublic getExtension<Prop extends ExtensionProperty>(name: string): Prop | null {\n\t\treturn (this as ExtensibleProperty).getRefMap('extensions', name) as Prop;\n\t}\n\n\t/**\n\t * Attaches the given {@link ExtensionProperty} to this Property. For a given extension, only\n\t * one ExtensionProperty may be attached to any one Property at a time.\n\t */\n\tpublic setExtension<Prop extends ExtensionProperty>(name: string, extensionProperty: Prop | null): this {\n\t\tif (extensionProperty) extensionProperty._validateParent(this as ExtensibleProperty);\n\t\treturn (this as ExtensibleProperty).setRefMap('extensions', name, extensionProperty) as this;\n\t}\n\n\t/** Lists all {@link ExtensionProperty} instances attached to this Property. */\n\tpublic listExtensions(): ExtensionProperty[] {\n\t\treturn (this as ExtensibleProperty).listRefMapValues('extensions');\n\t}\n}\n", "import { Nullable, PropertyType, TypedArray } from '../constants';\nimport type { GLTF } from '../types/gltf';\nimport { MathUtils } from '../utils';\nimport type { Buffer } from './buffer';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\nimport { COPY_IDENTITY } from './property';\n\ninterface IAccessor extends IExtensibleProperty {\n\tarray: TypedArray | null;\n\ttype: GLTF.AccessorType;\n\tcomponentType: GLTF.AccessorComponentType;\n\tnormalized: boolean;\n\tbuffer: Buffer;\n}\n\n/**\n * # Accessor\n *\n * *Accessors store lists of numeric, vector, or matrix elements in a typed array.*\n *\n * All large data for {@link Mesh}, {@link Skin}, and {@link Animation} properties is stored in\n * {@link Accessor}s, organized into one or more {@link Buffer}s. Each accessor provides data in\n * typed arrays, with two abstractions:\n *\n * *Elements* are the logical divisions of the data into useful types: `\"SCALAR\"`, `\"VEC2\"`,\n * `\"VEC3\"`, `\"VEC4\"`, `\"MAT3\"`, or `\"MAT4\"`. The element type can be determined with the\n * {@link getType}() method, and the number of elements in the accessor determine its\n * {@link getCount}(). The number of components in an element — e.g. 9 for `\"MAT3\"` — are its\n * {@link getElementSize}(). See {@link Accessor.Type}.\n *\n * *Components* are the numeric values within an element — e.g. `.x` and `.y` for `\"VEC2\"`. Various\n * component types are available: `BYTE`, `UNSIGNED_BYTE`, `SHORT`, `UNSIGNED_SHORT`,\n * `UNSIGNED_INT`, and `FLOAT`. The component type can be determined with the\n * {@link getComponentType} method, and the number of bytes in each component determine its\n * {@link getComponentSize}. See {@link Accessor.ComponentType}.\n *\n * Usage:\n *\n * ```typescript\n * const accessor = doc.createAccessor('myData')\n * \t.setArray(new Float32Array([1,2,3,4,5,6,7,8,9,10,11,12]))\n * \t.setType(Accessor.Type.VEC3)\n * \t.setBuffer(doc.listBuffers()[0]);\n *\n * accessor.getCount();        // → 4\n * accessor.getElementSize();  // → 3\n * accessor.getByteLength();   // → 48\n * accessor.getElement(1, []); // → [4, 5, 6]\n *\n * accessor.setElement(0, [10, 20, 30]);\n * ```\n *\n * Data access through the {@link getElement} and {@link setElement} methods reads or overwrites\n * the content of the underlying typed array. These methods use element arrays intended to be\n * compatible with the [gl-matrix](https://github.com/toji/gl-matrix) library, or with the\n * `toArray`/`fromArray` methods of libraries like three.js and babylon.js.\n *\n * Each Accessor must be assigned to a {@link Buffer}, which determines where the accessor's data\n * is stored in the final file. Assigning Accessors to different Buffers allows the data to be\n * written to different `.bin` files.\n *\n * glTF-Transform does not expose many details of sparse, normalized, or interleaved accessors\n * through its API. It reads files using those techniques, presents a simplified view of the data\n * for editing, and attempts to write data back out with optimizations. For example, vertex\n * attributes will typically be interleaved by default, regardless of the input file.\n *\n * References:\n * - [glTF → Accessors](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#accessors)\n *\n * @category Properties\n */\nexport class Accessor extends ExtensibleProperty<IAccessor> {\n\tpublic declare propertyType: PropertyType.ACCESSOR;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** Element type contained by the accessor (SCALAR, VEC2, ...). */\n\tpublic static Type: Record<string, GLTF.AccessorType> = {\n\t\t/** Scalar, having 1 value per element. */\n\t\tSCALAR: 'SCALAR',\n\t\t/** 2-component vector, having 2 components per element. */\n\t\tVEC2: 'VEC2',\n\t\t/** 3-component vector, having 3 components per element. */\n\t\tVEC3: 'VEC3',\n\t\t/** 4-component vector, having 4 components per element. */\n\t\tVEC4: 'VEC4',\n\t\t/** 2x2 matrix, having 4 components per element. */\n\t\tMAT2: 'MAT2',\n\t\t/** 3x3 matrix, having 9 components per element. */\n\t\tMAT3: 'MAT3',\n\t\t/** 4x3 matrix, having 16 components per element. */\n\t\tMAT4: 'MAT4',\n\t};\n\n\t/** Data type of the values composing each element in the accessor. */\n\tpublic static ComponentType: Record<string, GLTF.AccessorComponentType> = {\n\t\t/**\n\t\t * 1-byte signed integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array Int8Array}.\n\t\t */\n\t\tBYTE: 5120,\n\t\t/**\n\t\t * 1-byte unsigned integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array Uint8Array}.\n\t\t */\n\t\tUNSIGNED_BYTE: 5121,\n\t\t/**\n\t\t * 2-byte signed integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array Uint16Array}.\n\t\t */\n\t\tSHORT: 5122,\n\t\t/**\n\t\t * 2-byte unsigned integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array Uint16Array}.\n\t\t */\n\t\tUNSIGNED_SHORT: 5123,\n\t\t/**\n\t\t * 4-byte unsigned integer, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array Uint32Array}.\n\t\t */\n\t\tUNSIGNED_INT: 5125,\n\t\t/**\n\t\t * 4-byte floating point number, stored as\n\t\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array Float32Array}.\n\t\t */\n\t\tFLOAT: 5126,\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ACCESSOR;\n\t}\n\n\tprotected getDefaults(): Nullable<IAccessor> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tarray: null,\n\t\t\ttype: Accessor.Type.SCALAR,\n\t\t\tcomponentType: Accessor.ComponentType.FLOAT,\n\t\t\tnormalized: false,\n\t\t\tbuffer: null,\n\t\t});\n\t}\n\n\t/** @internal Inbound transform to normalized representation, if applicable. */\n\tprivate _in = MathUtils.identity;\n\n\t/** @internal Outbound transform from normalized representation, if applicable. */\n\tprivate _out = MathUtils.identity;\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\tsuper.copy(other, resolve);\n\t\tthis._in = other._in;\n\t\tthis._out = other._out;\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Static.\n\t */\n\n\t/** Returns size of a given element type, in components. */\n\tpublic static getElementSize(type: GLTF.AccessorType): number {\n\t\tswitch (type) {\n\t\t\tcase Accessor.Type.SCALAR:\n\t\t\t\treturn 1;\n\t\t\tcase Accessor.Type.VEC2:\n\t\t\t\treturn 2;\n\t\t\tcase Accessor.Type.VEC3:\n\t\t\t\treturn 3;\n\t\t\tcase Accessor.Type.VEC4:\n\t\t\t\treturn 4;\n\t\t\tcase Accessor.Type.MAT2:\n\t\t\t\treturn 4;\n\t\t\tcase Accessor.Type.MAT3:\n\t\t\t\treturn 9;\n\t\t\tcase Accessor.Type.MAT4:\n\t\t\t\treturn 16;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unexpected type: ' + type);\n\t\t}\n\t}\n\n\t/** Returns size of a given component type, in bytes. */\n\tpublic static getComponentSize(componentType: GLTF.AccessorComponentType): number {\n\t\tswitch (componentType) {\n\t\t\tcase Accessor.ComponentType.BYTE:\n\t\t\t\treturn 1;\n\t\t\tcase Accessor.ComponentType.UNSIGNED_BYTE:\n\t\t\t\treturn 1;\n\t\t\tcase Accessor.ComponentType.SHORT:\n\t\t\t\treturn 2;\n\t\t\tcase Accessor.ComponentType.UNSIGNED_SHORT:\n\t\t\t\treturn 2;\n\t\t\tcase Accessor.ComponentType.UNSIGNED_INT:\n\t\t\t\treturn 4;\n\t\t\tcase Accessor.ComponentType.FLOAT:\n\t\t\t\treturn 4;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unexpected component type: ' + componentType);\n\t\t}\n\t}\n\n\t/**********************************************************************************************\n\t * Min/max bounds.\n\t */\n\n\t/**\n\t * Minimum value of each component in this attribute. Unlike in a final glTF file, values\n\t * returned by this method will reflect the minimum accounting for {@link .normalized}\n\t * state.\n\t */\n\tpublic getMinNormalized(target: number[]): number[] {\n\t\tconst elementSize = this.getElementSize();\n\n\t\tthis.getMin(target);\n\n\t\tfor (let j = 0; j < elementSize; j++) target[j] = this._out(target[j]);\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Minimum value of each component in this attribute. Values returned by this method do not\n\t * reflect normalization: use {@link .getMinNormalized} in that case.\n\t */\n\tpublic getMin(target: number[]): number[] {\n\t\tconst array = this.get('array');\n\t\tconst count = this.getCount();\n\t\tconst elementSize = this.getElementSize();\n\n\t\tfor (let j = 0; j < elementSize; j++) target[j] = Infinity;\n\n\t\tfor (let i = 0; i < count * elementSize; i += elementSize) {\n\t\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\t\tconst value = array![i + j];\n\t\t\t\tif (Number.isFinite(value)) {\n\t\t\t\t\ttarget[j] = Math.min(target[j], value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Maximum value of each component in this attribute. Unlike in a final glTF file, values\n\t * returned by this method will reflect the minimum accounting for {@link .normalized}\n\t * state.\n\t */\n\tpublic getMaxNormalized(target: number[]): number[] {\n\t\tconst elementSize = this.getElementSize();\n\n\t\tthis.getMax(target);\n\n\t\tfor (let j = 0; j < elementSize; j++) target[j] = this._out(target[j]);\n\n\t\treturn target;\n\t}\n\n\t/**\n\t * Maximum value of each component in this attribute. Values returned by this method do not\n\t * reflect normalization: use {@link .getMinNormalized} in that case.\n\t */\n\tpublic getMax(target: number[]): number[] {\n\t\tconst array = this.get('array');\n\t\tconst count = this.getCount();\n\t\tconst elementSize = this.getElementSize();\n\n\t\tfor (let j = 0; j < elementSize; j++) target[j] = -Infinity;\n\n\t\tfor (let i = 0; i < count * elementSize; i += elementSize) {\n\t\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\t\tconst value = array![i + j];\n\t\t\t\tif (Number.isFinite(value)) {\n\t\t\t\t\ttarget[j] = Math.max(target[j], value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/**********************************************************************************************\n\t * Layout.\n\t */\n\n\t/**\n\t * Number of elements in the accessor. An array of length 30, containing 10 `VEC3` elements,\n\t * will have a count of 10.\n\t */\n\tpublic getCount(): number {\n\t\tconst array = this.get('array');\n\t\treturn array ? array.length / this.getElementSize() : 0;\n\t}\n\n\t/** Type of element stored in the accessor. `VEC2`, `VEC3`, etc. */\n\tpublic getType(): GLTF.AccessorType {\n\t\treturn this.get('type');\n\t}\n\n\t/**\n\t * Sets type of element stored in the accessor. `VEC2`, `VEC3`, etc. Array length must be a\n\t * multiple of the component size (`VEC2` = 2, `VEC3` = 3, ...) for the selected type.\n\t */\n\tpublic setType(type: GLTF.AccessorType): Accessor {\n\t\treturn this.set('type', type);\n\t}\n\n\t/**\n\t * Number of components in each element of the accessor. For example, the element size of a\n\t * `VEC2` accessor is 2. This value is determined automatically based on array length and\n\t * accessor type, specified with {@link setType}().\n\t */\n\tpublic getElementSize(): number {\n\t\treturn Accessor.getElementSize(this.get('type'));\n\t}\n\n\t/**\n\t * Size of each component (a value in the raw array), in bytes. For example, the\n\t * `componentSize` of data backed by a `float32` array is 4 bytes.\n\t */\n\tpublic getComponentSize(): number {\n\t\treturn this.get('array')!.BYTES_PER_ELEMENT;\n\t}\n\n\t/**\n\t * Component type (float32, uint16, etc.). This value is determined automatically, and can only\n\t * be modified by replacing the underlying array.\n\t */\n\tpublic getComponentType(): GLTF.AccessorComponentType {\n\t\treturn this.get('componentType');\n\t}\n\n\t/**********************************************************************************************\n\t * Normalization.\n\t */\n\n\t/**\n\t * Specifies whether integer data values should be normalized (true) to [0, 1] (for unsigned\n\t * types) or [-1, 1] (for signed types), or converted directly (false) when they are accessed.\n\t * This property is defined only for accessors that contain vertex attributes or animation\n\t * output data.\n\t */\n\tpublic getNormalized(): boolean {\n\t\treturn this.get('normalized');\n\t}\n\n\t/**\n\t * Specifies whether integer data values should be normalized (true) to [0, 1] (for unsigned\n\t * types) or [-1, 1] (for signed types), or converted directly (false) when they are accessed.\n\t * This property is defined only for accessors that contain vertex attributes or animation\n\t * output data.\n\t */\n\tpublic setNormalized(normalized: boolean): this {\n\t\tthis.set('normalized', normalized);\n\n\t\tif (normalized) {\n\t\t\tthis._out = (c: number): number => MathUtils.denormalize(c, this.get('componentType'));\n\t\t\tthis._in = (f: number): number => MathUtils.normalize(f, this.get('componentType'));\n\t\t} else {\n\t\t\tthis._out = MathUtils.identity;\n\t\t\tthis._in = MathUtils.identity;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Data access.\n\t */\n\n\t/**\n\t * Returns the scalar element value at the given index, accounting for normalization if\n\t * applicable.\n\t */\n\tpublic getScalar(index: number): number {\n\t\tconst elementSize = this.getElementSize();\n\t\treturn this._out(this.get('array')![index * elementSize]);\n\t}\n\n\t/**\n\t * Assigns the scalar element value at the given index, accounting for normalization if\n\t * applicable.\n\t */\n\tpublic setScalar(index: number, x: number): this {\n\t\tthis.get('array')![index * this.getElementSize()] = this._in(x);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the vector or matrix element value at the given index, accounting for normalization\n\t * if applicable.\n\t */\n\tpublic getElement(index: number, target: number[]): number[] {\n\t\tconst elementSize = this.getElementSize();\n\t\tconst array = this.get('array')!;\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\ttarget[i] = this._out(array[index * elementSize + i]);\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Assigns the vector or matrix element value at the given index, accounting for normalization\n\t * if applicable.\n\t */\n\tpublic setElement(index: number, value: number[]): this {\n\t\tconst elementSize = this.getElementSize();\n\t\tconst array = this.get('array')!;\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tarray![index * elementSize + i] = this._in(value[i]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Raw data storage.\n\t */\n\n\t/** Returns the {@link Buffer} into which this accessor will be organized. */\n\tpublic getBuffer(): Buffer | null {\n\t\treturn this.getRef('buffer');\n\t}\n\n\t/** Assigns the {@link Buffer} into which this accessor will be organized. */\n\tpublic setBuffer(buffer: Buffer | null): this {\n\t\treturn this.setRef('buffer', buffer);\n\t}\n\n\t/** Returns the raw typed array underlying this accessor. */\n\tpublic getArray(): TypedArray | null {\n\t\treturn this.get('array');\n\t}\n\n\t/** Assigns the raw typed array underlying this accessor. */\n\tpublic setArray(array: TypedArray): this {\n\t\tthis.set('componentType', array ? arrayToComponentType(array) : Accessor.ComponentType.FLOAT);\n\t\tthis.set('array', array);\n\t\treturn this;\n\t}\n\n\t/** Returns the total bytelength of this accessor, exclusive of padding. */\n\tpublic getByteLength(): number {\n\t\tconst array = this.get('array');\n\t\treturn array ? array.byteLength : 0;\n\t}\n}\n\n/**************************************************************************************************\n * Accessor utilities.\n */\n\n/** @internal */\nfunction arrayToComponentType(array: TypedArray): GLTF.AccessorComponentType {\n\tswitch (array.constructor) {\n\t\tcase Float32Array:\n\t\t\treturn Accessor.ComponentType.FLOAT;\n\t\tcase Uint32Array:\n\t\t\treturn Accessor.ComponentType.UNSIGNED_INT;\n\t\tcase Uint16Array:\n\t\t\treturn Accessor.ComponentType.UNSIGNED_SHORT;\n\t\tcase Uint8Array:\n\t\t\treturn Accessor.ComponentType.UNSIGNED_BYTE;\n\t\tcase Int16Array:\n\t\t\treturn Accessor.ComponentType.SHORT;\n\t\tcase Int8Array:\n\t\t\treturn Accessor.ComponentType.BYTE;\n\t\tdefault:\n\t\t\tthrow new Error('Unknown accessor componentType.');\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants';\nimport type { AnimationChannel } from './animation-channel';\nimport type { AnimationSampler } from './animation-sampler';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\n\ninterface IAnimation extends IExtensibleProperty {\n\tchannels: AnimationChannel[];\n\tsamplers: AnimationSampler[];\n}\n\n/**\n * # Animation\n *\n * *Reusable collections of {@link AnimationChannel}s, together representing a discrete animation\n * clip.*\n *\n * One Animation represents one playable unit in an animation system. Each may contain channels\n * affecting multiple paths (`translation`, `rotation`, `scale`, or `weights`) on multiple\n * {@link Node}s. An Animation's channels must be played together, and do not have any meaning in\n * isolation.\n *\n * Multiple Animations _may_ be played together: for example, one character's _Walk_ animation\n * might play while another character's _Run_ animation plays. Or a single character might have\n * both an _Idle_ and a _Talk_ animation playing at the same time. However, glTF does not define\n * any particular relationship between top-level Animations, or any particular playback behavior\n * like looping or sequences of Animations. General-purpose viewers typically autoplay the first\n * animation and provide UI controls for choosing another. Game engines may have significantly\n * more advanced methods of playing and blending animations.\n *\n * For example, a very simple skinned {@link Mesh} might have two Animations, _Idle_ and _Walk_.\n * Each of those Animations might affect the rotations of two bones, _LegL_ and _LegR_, where the\n * keyframes for each target-path pair are stored in {@link AnimationChannel} instances. In  total,\n * this model would contain two Animations and Four {@link AnimationChannel}s.\n *\n * Usage:\n *\n * ```ts\n * const animation = doc.createAnimation('machineRun')\n * \t.addChannel(rotateCog1)\n * \t.addChannel(rotateCog2)\n * \t.addChannel(rotateCog3);\n * ```\n *\n * Reference\n * - [glTF → Animations](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#animations)\n */\nexport class Animation extends ExtensibleProperty<IAnimation> {\n\tpublic declare propertyType: PropertyType.ANIMATION;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ANIMATION;\n\t}\n\n\tprotected getDefaults(): Nullable<IAnimation> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { channels: [], samplers: [] });\n\t}\n\n\t/** Adds an {@link AnimationChannel} to this Animation. */\n\tpublic addChannel(channel: AnimationChannel): this {\n\t\treturn this.addRef('channels', channel);\n\t}\n\n\t/** Removes an {@link AnimationChannel} from this Animation. */\n\tpublic removeChannel(channel: AnimationChannel): this {\n\t\treturn this.removeRef('channels', channel);\n\t}\n\n\t/** Lists {@link AnimationChannel}s in this Animation. */\n\tpublic listChannels(): AnimationChannel[] {\n\t\treturn this.listRefs('channels');\n\t}\n\n\t/** Adds an {@link AnimationSampler} to this Animation. */\n\tpublic addSampler(sampler: AnimationSampler): this {\n\t\treturn this.addRef('samplers', sampler);\n\t}\n\n\t/** Removes an {@link AnimationSampler} from this Animation. */\n\tpublic removeSampler(sampler: AnimationSampler): this {\n\t\treturn this.removeRef('samplers', sampler);\n\t}\n\n\t/** Lists {@link AnimationSampler}s in this Animation. */\n\tpublic listSamplers(): AnimationSampler[] {\n\t\treturn this.listRefs('samplers');\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants';\nimport type { GLTF } from '../types/gltf';\nimport type { AnimationSampler } from './animation-sampler';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\nimport type { Node } from './node';\n\ninterface IAnimationChannel extends IExtensibleProperty {\n\ttargetPath: GLTF.AnimationChannelTargetPath | null;\n\ttargetNode: Node;\n\tsampler: AnimationSampler;\n}\n\n/**\n * # AnimationChannel\n *\n * *A target-path pair within a larger {@link Animation}, which refers to an\n * {@link AnimationSampler} storing the keyframe data for that pair.*\n *\n * A _target_ is always a {@link Node}, in the core glTF spec. A _path_ is any property of that\n * Node that can be affected by animation: `translation`, `rotation`, `scale`, or `weights`. An\n * {@link Animation} affecting the positions and rotations of several {@link Node}s would contain\n * one channel for each Node-position or Node-rotation pair. The keyframe data for an\n * AnimationChannel is stored in an {@link AnimationSampler}, which must be attached to the same\n * {@link Animation}.\n *\n * Usage:\n *\n * ```ts\n * const node = doc.getRoot()\n * \t.listNodes()\n * \t.find((node) => node.getName() === 'Cog');\n *\n * const channel = doc.createAnimationChannel('cogRotation')\n * \t.setTargetPath('rotation')\n * \t.setTargetNode(node)\n * \t.setSampler(rotateSampler);\n * ```\n *\n * Reference\n * - [glTF → Animations](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#animations)\n */\nexport class AnimationChannel extends ExtensibleProperty<IAnimationChannel> {\n\tpublic declare propertyType: PropertyType.ANIMATION_CHANNEL;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** Name of the property to be modified by an animation channel. */\n\tpublic static TargetPath: Record<string, GLTF.AnimationChannelTargetPath> = {\n\t\t/** Channel targets {@link Node.setTranslation}. */\n\t\tTRANSLATION: 'translation',\n\t\t/** Channel targets {@link Node.setRotation}. */\n\t\tROTATION: 'rotation',\n\t\t/** Channel targets {@link Node.setScale}. */\n\t\tSCALE: 'scale',\n\t\t/** Channel targets {@link Node.setWeights}, affecting {@link PrimitiveTarget} weights. */\n\t\tWEIGHTS: 'weights',\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ANIMATION_CHANNEL;\n\t}\n\n\tprotected getDefaults(): Nullable<IAnimationChannel> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\ttargetPath: null,\n\t\t\ttargetNode: null,\n\t\t\tsampler: null,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Properties.\n\t */\n\n\t/**\n\t * Path (property) animated on the target {@link Node}. Supported values include:\n\t * `translation`, `rotation`, `scale`, or `weights`.\n\t */\n\tpublic getTargetPath(): GLTF.AnimationChannelTargetPath | null {\n\t\treturn this.get('targetPath');\n\t}\n\n\t/**\n\t * Path (property) animated on the target {@link Node}. Supported values include:\n\t * `translation`, `rotation`, `scale`, or `weights`.\n\t */\n\tpublic setTargetPath(targetPath: GLTF.AnimationChannelTargetPath): this {\n\t\treturn this.set('targetPath', targetPath);\n\t}\n\n\t/** Target {@link Node} animated by the channel. */\n\tpublic getTargetNode(): Node | null {\n\t\treturn this.getRef('targetNode');\n\t}\n\n\t/** Target {@link Node} animated by the channel. */\n\tpublic setTargetNode(targetNode: Node | null): this {\n\t\treturn this.setRef('targetNode', targetNode);\n\t}\n\n\t/**\n\t * Keyframe data input/output values for the channel. Must be attached to the same\n\t * {@link Animation}.\n\t */\n\tpublic getSampler(): AnimationSampler | null {\n\t\treturn this.getRef('sampler');\n\t}\n\n\t/**\n\t * Keyframe data input/output values for the channel. Must be attached to the same\n\t * {@link Animation}.\n\t */\n\tpublic setSampler(sampler: AnimationSampler | null): this {\n\t\treturn this.setRef('sampler', sampler);\n\t}\n}\n", "import { BufferViewUsage, Nullable, PropertyType } from '../constants';\nimport type { GLTF } from '../types/gltf';\nimport type { Accessor } from './accessor';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\n\ninterface IAnimationSampler extends IExtensibleProperty {\n\tinterpolation: GLTF.AnimationSamplerInterpolation;\n\tinput: Accessor;\n\toutput: Accessor;\n}\n\n/**\n * # AnimationSampler\n *\n * *Reusable collection of keyframes affecting particular property of an object.*\n *\n * Each AnimationSampler refers to an input and an output {@link Accessor}. Input contains times\n * (in seconds) for each keyframe. Output contains values (of any {@link Accessor.Type}) for the\n * animated property at each keyframe. Samplers using `CUBICSPLINE` interpolation will also contain\n * in/out tangents in the output, with the layout:\n *\n * in<sub>1</sub>, value<sub>1</sub>, out<sub>1</sub>,\n * in<sub>2</sub>, value<sub>2</sub>, out<sub>2</sub>,\n * in<sub>3</sub>, value<sub>3</sub>, out<sub>3</sub>, ...\n *\n * Usage:\n *\n * ```ts\n * // Create accessor containing input times, in seconds.\n * const input = doc.createAccessor('bounceTimes')\n * \t.setArray(new Float32Array([0, 1, 2]))\n * \t.setType(Accessor.Type.SCALAR);\n *\n * // Create accessor containing output values, in local units.\n * const output = doc.createAccessor('bounceValues')\n * \t.setArray(new Float32Array([\n * \t\t0, 0, 0, // y = 0\n * \t\t0, 1, 0, // y = 1\n * \t\t0, 0, 0, // y = 0\n * \t]))\n * \t.setType(Accessor.Type.VEC3);\n *\n * // Create sampler.\n * const sampler = doc.createAnimationSampler('bounce')\n * \t.setInput(input)\n * \t.setOutput(output)\n * \t.setInterpolation('LINEAR');\n * ```\n *\n * Reference\n * - [glTF → Animations](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#animations)\n */\nexport class AnimationSampler extends ExtensibleProperty<IAnimationSampler> {\n\tpublic declare propertyType: PropertyType.ANIMATION_SAMPLER;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** Interpolation method. */\n\tpublic static Interpolation: Record<string, GLTF.AnimationSamplerInterpolation> = {\n\t\t/** Animated values are linearly interpolated between keyframes. */\n\t\tLINEAR: 'LINEAR',\n\t\t/** Animated values remain constant from one keyframe until the next keyframe. */\n\t\tSTEP: 'STEP',\n\t\t/** Animated values are interpolated according to given cubic spline tangents. */\n\t\tCUBICSPLINE: 'CUBICSPLINE',\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ANIMATION_SAMPLER;\n\t}\n\n\tprotected getDefaultAttributes(): Nullable<IAnimationSampler> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tinterpolation: AnimationSampler.Interpolation.LINEAR,\n\t\t\tinput: null,\n\t\t\toutput: null,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Static.\n\t */\n\n\t/** Interpolation mode: `STEP`, `LINEAR`, or `CUBICSPLINE`. */\n\tpublic getInterpolation(): GLTF.AnimationSamplerInterpolation {\n\t\treturn this.get('interpolation');\n\t}\n\n\t/** Interpolation mode: `STEP`, `LINEAR`, or `CUBICSPLINE`. */\n\tpublic setInterpolation(interpolation: GLTF.AnimationSamplerInterpolation): this {\n\t\treturn this.set('interpolation', interpolation);\n\t}\n\n\t/** Times for each keyframe, in seconds. */\n\tpublic getInput(): Accessor | null {\n\t\treturn this.getRef('input');\n\t}\n\n\t/** Times for each keyframe, in seconds. */\n\tpublic setInput(input: Accessor | null): this {\n\t\treturn this.setRef('input', input, { usage: BufferViewUsage.OTHER });\n\t}\n\n\t/**\n\t * Values for each keyframe. For `CUBICSPLINE` interpolation, output also contains in/out\n\t * tangents.\n\t */\n\tpublic getOutput(): Accessor | null {\n\t\treturn this.getRef('output');\n\t}\n\n\t/**\n\t * Values for each keyframe. For `CUBICSPLINE` interpolation, output also contains in/out\n\t * tangents.\n\t */\n\tpublic setOutput(output: Accessor | null): this {\n\t\treturn this.setRef('output', output, { usage: BufferViewUsage.OTHER });\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\n\ninterface IBuffer extends IExtensibleProperty {\n\turi: string;\n}\n\n/**\n * # Buffer\n *\n * *Buffers are low-level storage units for binary data.*\n *\n * glTF 2.0 has three concepts relevant to binary storage: accessors, buffer views, and buffers.\n * In glTF-Transform, an {@link Accessor} is referenced by any property that requires numeric typed\n * array data. Meshes, Primitives, and Animations all reference Accessors. Buffers define how that\n * data is organized into transmitted file(s). A `.glb` file has only a single Buffer, and when\n * exporting to `.glb` your resources should be grouped accordingly. A `.gltf` file may reference\n * one or more `.bin` files — each `.bin` is a Buffer — and grouping Accessors under different\n * Buffers allow you to specify that structure.\n *\n * For engines that can dynamically load portions of a glTF file, splitting data into separate\n * buffers can allow you to avoid loading data until it is needed. For example, you might put\n * binary data for specific meshes into a different `.bin` buffer, or put each animation's binary\n * payload into its own `.bin`.\n *\n * Buffer Views define how Accessors are organized within a given Buffer. glTF-Transform creates an\n * efficient Buffer View layout automatically at export: there is no Buffer View property exposed\n * by the glTF-Transform API, simplifying data management.\n *\n * Usage:\n *\n * ```ts\n * // Create two buffers with custom filenames.\n * const buffer1 = doc.createBuffer('buffer1')\n * \t.setURI('part1.bin');\n * const buffer2 = doc.createBuffer('buffer2')\n * \t.setURI('part2.bin');\n *\n * // Assign the attributes of two meshes to different buffers. If the meshes\n * // had indices or morph target attributes, you would also want to relocate\n * // those accessors.\n * mesh1\n * \t.listPrimitives()\n * \t.forEach((primitive) => primitive.listAttributes()\n * \t\t.forEach((attribute) => attribute.setBuffer(buffer1)));\n * mesh2\n * \t.listPrimitives()\n * \t.forEach((primitive) => primitive.listAttributes()\n * \t\t.forEach((attribute) => attribute.setBuffer(buffer2)));\n *\n * // Write to disk. Each mesh's binary data will be in a separate binary file;\n * // any remaining accessors will be in a third (default) buffer.\n * await new NodeIO().write('scene.gltf', doc);\n * // → scene.gltf, part1.bin, part2.bin\n * ```\n *\n * References:\n * - [glTF → Buffers and Buffer Views](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#buffers-and-buffer-views)\n * - [glTF → Accessors](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#accessors)\n *\n * @category Properties\n */\nexport class Buffer extends ExtensibleProperty<IBuffer> {\n\tpublic declare propertyType: PropertyType.BUFFER;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.BUFFER;\n\t}\n\n\tprotected getDefaults(): Nullable<IBuffer> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { uri: '' });\n\t}\n\n\t/**\n\t * Returns the URI (or filename) of this buffer (e.g. 'myBuffer.bin'). URIs are strongly\n\t * encouraged to be relative paths, rather than absolute. Use of a protocol (like `file://`)\n\t * is possible for custom applications, but will limit the compatibility of the asset with most\n\t * tools.\n\t *\n\t * Buffers commonly use the extension `.bin`, though this is not required.\n\t */\n\tpublic getURI(): string {\n\t\treturn this.get('uri');\n\t}\n\n\t/**\n\t * Sets the URI (or filename) of this buffer (e.g. 'myBuffer.bin'). URIs are strongly\n\t * encouraged to be relative paths, rather than absolute. Use of a protocol (like `file://`)\n\t * is possible for custom applications, but will limit the compatibility of the asset with most\n\t * tools.\n\t *\n\t * Buffers commonly use the extension `.bin`, though this is not required.\n\t */\n\tpublic setURI(uri: string): this {\n\t\treturn this.set('uri', uri);\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants';\nimport type { GLTF } from '../types/gltf';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\n\ninterface ICamera extends IExtensibleProperty {\n\ttype: GLTF.CameraType;\n\tznear: number;\n\tzfar: number;\n\taspectRatio: number | null;\n\tyfov: number;\n\txmag: number;\n\tymag: number;\n}\n\n/**\n * # Camera\n *\n * *Cameras are perspectives through which the {@link Scene} may be viewed.*\n *\n * Projection can be perspective or orthographic. Cameras are contained in nodes and thus can be\n * transformed. The camera is defined such that the local +X axis is to the right, the lens looks\n * towards the local -Z axis, and the top of the camera is aligned with the local +Y axis. If no\n * transformation is specified, the location of the camera is at the origin.\n *\n * Usage:\n *\n * ```typescript\n * const camera = doc.createCamera('myCamera')\n * \t.setType(GLTF.CameraType.PERSPECTIVE)\n * \t.setZNear(0.1)\n * \t.setZFar(100)\n * \t.setYFov(Math.PI / 4)\n * \t.setAspectRatio(1.5);\n *\n * node.setCamera(camera);\n * ```\n *\n * References:\n * - [glTF → Cameras](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#cameras)\n *\n * @category Properties\n */\nexport class Camera extends ExtensibleProperty<ICamera> {\n\tpublic declare propertyType: PropertyType.CAMERA;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\tpublic static Type: Record<string, GLTF.CameraType> = {\n\t\t/** A perspective camera representing a perspective projection matrix. */\n\t\tPERSPECTIVE: 'perspective',\n\t\t/** An orthographic camera representing an orthographic projection matrix. */\n\t\tORTHOGRAPHIC: 'orthographic',\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.CAMERA;\n\t}\n\n\tprotected getDefaults(): Nullable<ICamera> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\t// Common.\n\t\t\ttype: Camera.Type.PERSPECTIVE,\n\t\t\tznear: 0.1,\n\t\t\tzfar: 100,\n\t\t\t// Perspective.\n\t\t\taspectRatio: null,\n\t\t\tyfov: (Math.PI * 2 * 50) / 360, // 50º\n\t\t\t// Orthographic.\n\t\t\txmag: 1,\n\t\t\tymag: 1,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Common.\n\t */\n\n\t/** Specifies if the camera uses a perspective or orthographic projection. */\n\tpublic getType(): GLTF.CameraType {\n\t\treturn this.get('type');\n\t}\n\n\t/** Specifies if the camera uses a perspective or orthographic projection. */\n\tpublic setType(type: GLTF.CameraType): this {\n\t\treturn this.set('type', type);\n\t}\n\n\t/** Floating-point distance to the near clipping plane. */\n\tpublic getZNear(): number {\n\t\treturn this.get('znear');\n\t}\n\n\t/** Floating-point distance to the near clipping plane. */\n\tpublic setZNear(znear: number): this {\n\t\treturn this.set('znear', znear);\n\t}\n\n\t/**\n\t * Floating-point distance to the far clipping plane. When defined, zfar must be greater than\n\t * znear. If zfar is undefined, runtime must use infinite projection matrix.\n\t */\n\tpublic getZFar(): number {\n\t\treturn this.get('zfar');\n\t}\n\n\t/**\n\t * Floating-point distance to the far clipping plane. When defined, zfar must be greater than\n\t * znear. If zfar is undefined, runtime must use infinite projection matrix.\n\t */\n\tpublic setZFar(zfar: number): this {\n\t\treturn this.set('zfar', zfar);\n\t}\n\n\t/**********************************************************************************************\n\t * Perspective.\n\t */\n\n\t/**\n\t * Floating-point aspect ratio of the field of view. When undefined, the aspect ratio of the\n\t * canvas is used.\n\t */\n\tpublic getAspectRatio(): number | null {\n\t\treturn this.get('aspectRatio');\n\t}\n\n\t/**\n\t * Floating-point aspect ratio of the field of view. When undefined, the aspect ratio of the\n\t * canvas is used.\n\t */\n\tpublic setAspectRatio(aspectRatio: number | null): this {\n\t\treturn this.set('aspectRatio', aspectRatio);\n\t}\n\n\t/** Floating-point vertical field of view in radians. */\n\tpublic getYFov(): number {\n\t\treturn this.get('yfov');\n\t}\n\n\t/** Floating-point vertical field of view in radians. */\n\tpublic setYFov(yfov: number): this {\n\t\treturn this.set('yfov', yfov);\n\t}\n\n\t/**********************************************************************************************\n\t * Orthographic.\n\t */\n\n\t/**\n\t * Floating-point horizontal magnification of the view, and half the view's width\n\t * in world units.\n\t */\n\tpublic getXMag(): number {\n\t\treturn this.get('xmag');\n\t}\n\n\t/**\n\t * Floating-point horizontal magnification of the view, and half the view's width\n\t * in world units.\n\t */\n\tpublic setXMag(xmag: number): this {\n\t\treturn this.set('xmag', xmag);\n\t}\n\n\t/**\n\t * Floating-point vertical magnification of the view, and half the view's height\n\t * in world units.\n\t */\n\tpublic getYMag(): number {\n\t\treturn this.get('ymag');\n\t}\n\n\t/**\n\t * Floating-point vertical magnification of the view, and half the view's height\n\t * in world units.\n\t */\n\tpublic setYMag(ymag: number): this {\n\t\treturn this.set('ymag', ymag);\n\t}\n}\n", "import type { ExtensibleProperty } from './extensible-property';\nimport { Property, IProperty } from './property';\n\n/**\n * # ExtensionProperty\n *\n * *Base class for all {@link Property} types that can be attached by an {@link Extension}.*\n *\n * After an {@link Extension} is attached to a glTF {@link Document}, the Extension may be used to\n * construct ExtensionProperty instances, to be referenced throughout the document as prescribed by\n * the Extension. For example, the `KHR_materials_clearcoat` Extension defines a `Clearcoat`\n * ExtensionProperty, which is referenced by {@link Material} Properties in the Document, and may\n * contain references to {@link Texture} properties of its own.\n *\n * For more information on available extensions and their usage, see [Extensions](/extensions).\n *\n * Reference:\n * - [glTF → Extensions](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#specifying-extensions)\n */\nexport abstract class ExtensionProperty<T extends IProperty = IProperty> extends Property<T> {\n\tpublic static EXTENSION_NAME: string;\n\tpublic abstract readonly extensionName: string;\n\n\t/** List of supported {@link Property} types. */\n\tpublic abstract readonly parentTypes: string[];\n\n\t/** @hidden */\n\tpublic _validateParent(parent: ExtensibleProperty): void {\n\t\tif (!this.parentTypes.includes(parent.propertyType)) {\n\t\t\tthrow new Error(`Parent \"${parent.propertyType}\" invalid for child \"${this.propertyType}\".`);\n\t\t}\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants';\nimport type { GLTF } from '../types/gltf';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\n\ninterface ITextureInfo extends IExtensibleProperty {\n\ttexCoord: number;\n\n\t// Sampler properties are also attached to TextureInfo, for simplicity.\n\tmagFilter: GLTF.TextureMagFilter | null;\n\tminFilter: GLTF.TextureMinFilter | null;\n\twrapS: GLTF.TextureWrapMode;\n\twrapT: GLTF.TextureWrapMode;\n}\n\n/**\n * # TextureInfo\n *\n * *Settings associated with a particular use of a {@link Texture}.*\n *\n * Different materials may reuse the same texture but with different texture coordinates,\n * minFilter/magFilter, or wrapS/wrapT settings. The TextureInfo class contains settings\n * derived from both the \"TextureInfo\" and \"Sampler\" properties in the glTF specification,\n * consolidated here for simplicity.\n *\n * TextureInfo properties cannot be directly created. For any material texture slot, such as\n * baseColorTexture, there will be a corresponding method to obtain the TextureInfo for that slot.\n * For example, see {@link Material.getBaseColorTextureInfo}.\n *\n * References:\n * - [glTF → Texture Info](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#reference-textureinfo)\n *\n * @category Properties\n */\nexport class TextureInfo extends ExtensibleProperty<ITextureInfo> {\n\tpublic declare propertyType: PropertyType.TEXTURE_INFO;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** UV wrapping mode. Values correspond to WebGL enums. */\n\tpublic static WrapMode: Record<string, GLTF.TextureWrapMode> = {\n\t\t/** */\n\t\tCLAMP_TO_EDGE: 33071,\n\t\t/** */\n\t\tMIRRORED_REPEAT: 33648,\n\t\t/** */\n\t\tREPEAT: 10497,\n\t};\n\n\t/** Magnification filter. Values correspond to WebGL enums. */\n\tpublic static MagFilter: Record<string, GLTF.TextureMagFilter> = {\n\t\t/** */\n\t\tNEAREST: 9728,\n\t\t/** */\n\t\tLINEAR: 9729,\n\t};\n\n\t/** Minification filter. Values correspond to WebGL enums. */\n\tpublic static MinFilter: Record<string, GLTF.TextureMinFilter> = {\n\t\t/** */\n\t\tNEAREST: 9728,\n\t\t/** */\n\t\tLINEAR: 9729,\n\t\t/** */\n\t\tNEAREST_MIPMAP_NEAREST: 9984,\n\t\t/** */\n\t\tLINEAR_MIPMAP_NEAREST: 9985,\n\t\t/** */\n\t\tNEAREST_MIPMAP_LINEAR: 9986,\n\t\t/** */\n\t\tLINEAR_MIPMAP_LINEAR: 9987,\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.TEXTURE_INFO;\n\t}\n\n\tprotected getDefaults(): Nullable<ITextureInfo> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\ttexCoord: 0,\n\t\t\tmagFilter: null,\n\t\t\tminFilter: null,\n\t\t\twrapS: TextureInfo.WrapMode.REPEAT,\n\t\t\twrapT: TextureInfo.WrapMode.REPEAT,\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Texture coordinates.\n\t */\n\n\t/** Returns the texture coordinate (UV set) index for the texture. */\n\tpublic getTexCoord(): number {\n\t\treturn this.get('texCoord');\n\t}\n\n\t/** Sets the texture coordinate (UV set) index for the texture. */\n\tpublic setTexCoord(texCoord: number): this {\n\t\treturn this.set('texCoord', texCoord);\n\t}\n\n\t/**********************************************************************************************\n\t * Min/mag filter.\n\t */\n\n\t/** Returns the magnification filter applied to the texture. */\n\tpublic getMagFilter(): GLTF.TextureMagFilter | null {\n\t\treturn this.get('magFilter');\n\t}\n\n\t/** Sets the magnification filter applied to the texture. */\n\tpublic setMagFilter(magFilter: GLTF.TextureMagFilter | null): this {\n\t\treturn this.set('magFilter', magFilter);\n\t}\n\n\t/** Sets the minification filter applied to the texture. */\n\tpublic getMinFilter(): GLTF.TextureMinFilter | null {\n\t\treturn this.get('minFilter');\n\t}\n\n\t/** Returns the minification filter applied to the texture. */\n\tpublic setMinFilter(minFilter: GLTF.TextureMinFilter | null): this {\n\t\treturn this.set('minFilter', minFilter);\n\t}\n\n\t/**********************************************************************************************\n\t * UV wrapping.\n\t */\n\n\t/** Returns the S (U) wrapping mode for UVs used by the texture. */\n\tpublic getWrapS(): GLTF.TextureWrapMode {\n\t\treturn this.get('wrapS');\n\t}\n\n\t/** Sets the S (U) wrapping mode for UVs used by the texture. */\n\tpublic setWrapS(wrapS: GLTF.TextureWrapMode): this {\n\t\treturn this.set('wrapS', wrapS);\n\t}\n\n\t/** Returns the T (V) wrapping mode for UVs used by the texture. */\n\tpublic getWrapT(): GLTF.TextureWrapMode {\n\t\treturn this.get('wrapT');\n\t}\n\n\t/** Sets the T (V) wrapping mode for UVs used by the texture. */\n\tpublic setWrapT(wrapT: GLTF.TextureWrapMode): this {\n\t\treturn this.set('wrapT', wrapT);\n\t}\n}\n", "import { Nullable, PropertyType, TextureChannel, vec3, vec4 } from '../constants';\nimport type { GLTF } from '../types/gltf';\nimport { ColorUtils } from '../utils';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\nimport type { Texture } from './texture';\nimport { TextureInfo } from './texture-info';\n\nconst { R, G, B, A } = TextureChannel;\n\ninterface IMaterial extends IExtensibleProperty {\n\talphaMode: GLTF.MaterialAlphaMode;\n\talphaCutoff: number;\n\tdoubleSided: boolean;\n\tbaseColorFactor: vec4;\n\tbaseColorTexture: Texture;\n\tbaseColorTextureInfo: TextureInfo;\n\temissiveFactor: vec3;\n\temissiveTexture: Texture;\n\temissiveTextureInfo: TextureInfo;\n\tnormalScale: number;\n\tnormalTexture: Texture;\n\tnormalTextureInfo: TextureInfo;\n\tocclusionStrength: number;\n\tocclusionTexture: Texture;\n\tocclusionTextureInfo: TextureInfo;\n\troughnessFactor: number;\n\tmetallicFactor: number;\n\tmetallicRoughnessTexture: Texture;\n\tmetallicRoughnessTextureInfo: TextureInfo;\n}\n\n/**\n * # Material\n *\n * *Materials describe a surface's appearance and response to light.*\n *\n * Each {@link Primitive} within a {@link Mesh} may be assigned a single Material. The number of\n * GPU draw calls typically increases with both the numbers of Primitives and of Materials in an\n * asset; Materials should be reused wherever possible. Techniques like texture atlasing and vertex\n * colors allow objects to have varied appearances while technically sharing a single Material.\n *\n * Material properties are modified by both scalars (like `baseColorFactor`) and textures (like\n * `baseColorTexture`). When both are available, factors are considered linear multipliers against\n * textures of the same name. In the case of base color, vertex colors (`COLOR_0` attributes) are\n * also multiplied.\n *\n * Textures containing color data (`baseColorTexture`, `emissiveTexture`) are sRGB. All other\n * textures are linear. Like other resources, textures should be reused when possible.\n *\n * Usage:\n *\n * ```typescript\n * const material = doc.createMaterial('myMaterial')\n * \t.setBaseColorFactor([1, 0.5, 0.5, 1]) // RGBA\n * \t.setOcclusionTexture(aoTexture)\n * \t.setOcclusionStrength(0.5);\n *\n * mesh.listPrimitives()\n * \t.forEach((prim) => prim.setMaterial(material));\n * ```\n *\n * @category Properties\n */\nexport class Material extends ExtensibleProperty<IMaterial> {\n\tpublic declare propertyType: PropertyType.MATERIAL;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\tpublic static AlphaMode: Record<string, GLTF.MaterialAlphaMode> = {\n\t\t/**\n\t\t * The alpha value is ignored and the rendered output is fully opaque\n\t\t */\n\t\tOPAQUE: 'OPAQUE',\n\t\t/**\n\t\t * The rendered output is either fully opaque or fully transparent depending on the alpha\n\t\t * value and the specified alpha cutoff value\n\t\t */\n\t\tMASK: 'MASK',\n\t\t/**\n\t\t * The alpha value is used to composite the source and destination areas. The rendered\n\t\t * output is combined with the background using the normal painting operation (i.e. the\n\t\t * Porter and Duff over operator)\n\t\t */\n\t\tBLEND: 'BLEND',\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.MATERIAL;\n\t}\n\n\tprotected getDefaults(): Nullable<IMaterial> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\talphaMode: Material.AlphaMode.OPAQUE,\n\t\t\talphaCutoff: 0.5,\n\t\t\tdoubleSided: false,\n\t\t\tbaseColorFactor: [1, 1, 1, 1] as vec4,\n\t\t\tbaseColorTexture: null,\n\t\t\tbaseColorTextureInfo: new TextureInfo(this.graph, 'baseColorTextureInfo'),\n\t\t\temissiveFactor: [0, 0, 0] as vec3,\n\t\t\temissiveTexture: null,\n\t\t\temissiveTextureInfo: new TextureInfo(this.graph, 'emissiveTextureInfo'),\n\t\t\tnormalScale: 1,\n\t\t\tnormalTexture: null,\n\t\t\tnormalTextureInfo: new TextureInfo(this.graph, 'normalTextureInfo'),\n\t\t\tocclusionStrength: 1,\n\t\t\tocclusionTexture: null,\n\t\t\tocclusionTextureInfo: new TextureInfo(this.graph, 'occlusionTextureInfo'),\n\t\t\troughnessFactor: 1,\n\t\t\tmetallicFactor: 1,\n\t\t\tmetallicRoughnessTexture: null,\n\t\t\tmetallicRoughnessTextureInfo: new TextureInfo(this.graph, 'metallicRoughnessTextureInfo'),\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Double-sided / culling.\n\t */\n\n\t/** Returns true when both sides of triangles should be rendered. May impact performance. */\n\tpublic getDoubleSided(): boolean {\n\t\treturn this.get('doubleSided');\n\t}\n\n\t/** Sets whether to render both sides of triangles. May impact performance. */\n\tpublic setDoubleSided(doubleSided: boolean): this {\n\t\treturn this.set('doubleSided', doubleSided);\n\t}\n\n\t/**********************************************************************************************\n\t * Alpha.\n\t */\n\n\t/** Returns material alpha, equivalent to baseColorFactor[3]. */\n\tpublic getAlpha(): number {\n\t\treturn this.get('baseColorFactor')[3];\n\t}\n\n\t/** Sets material alpha, equivalent to baseColorFactor[3]. */\n\tpublic setAlpha(alpha: number): this {\n\t\tconst baseColorFactor = this.get('baseColorFactor').slice() as vec4;\n\t\tbaseColorFactor[3] = alpha;\n\t\treturn this.set('baseColorFactor', baseColorFactor);\n\t}\n\n\t/**\n\t * Returns the mode of the material's alpha channels, which are provided by `baseColorFactor`\n\t * and `baseColorTexture`.\n\t *\n\t * - `OPAQUE`: Alpha value is ignored and the rendered output is fully opaque.\n\t * - `BLEND`: Alpha value is used to determine the transparency each pixel on a surface, and\n\t * \tthe fraction of surface vs. background color in the final result. Alpha blending creates\n\t *\tsignificant edge cases in realtime renderers, and some care when structuring the model is\n\t * \tnecessary for good results. In particular, transparent geometry should be kept in separate\n\t * \tmeshes or primitives from opaque geometry. The `depthWrite` or `zWrite` settings in engines\n\t * \tshould usually be disabled on transparent materials.\n\t * - `MASK`: Alpha value is compared against `alphaCutoff` threshold for each pixel on a\n\t * \tsurface, and the pixel is either fully visible or fully discarded based on that cutoff.\n\t * \tThis technique is useful for things like leafs/foliage, grass, fabric meshes, and other\n\t * \tsurfaces where no semitransparency is needed. With a good choice of `alphaCutoff`, surfaces\n\t * \tthat don't require semitransparency can avoid the performance penalties and visual issues\n\t * \tinvolved with `BLEND` transparency.\n\t *\n\t * Reference:\n\t * - [glTF → material.alphaMode](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialalphamode)\n\t */\n\tpublic getAlphaMode(): GLTF.MaterialAlphaMode {\n\t\treturn this.get('alphaMode');\n\t}\n\n\t/** Sets the mode of the material's alpha channels. See {@link getAlphaMode} for details. */\n\tpublic setAlphaMode(alphaMode: GLTF.MaterialAlphaMode): this {\n\t\treturn this.set('alphaMode', alphaMode);\n\t}\n\n\t/** Returns the visibility threshold; applied only when `.alphaMode='MASK'`. */\n\tpublic getAlphaCutoff(): number {\n\t\treturn this.get('alphaCutoff');\n\t}\n\n\t/** Sets the visibility threshold; applied only when `.alphaMode='MASK'`. */\n\tpublic setAlphaCutoff(alphaCutoff: number): this {\n\t\treturn this.set('alphaCutoff', alphaCutoff);\n\t}\n\n\t/**********************************************************************************************\n\t * Base color.\n\t */\n\n\t/** Base color / albedo factor; Linear-sRGB components. See {@link getBaseColorTexture}. */\n\tpublic getBaseColorFactor(): vec4 {\n\t\treturn this.get('baseColorFactor');\n\t}\n\n\t/** Base color / albedo factor; Linear-sRGB components. See {@link getBaseColorTexture}. */\n\tpublic setBaseColorFactor(baseColorFactor: vec4): this {\n\t\treturn this.set('baseColorFactor', baseColorFactor);\n\t}\n\n\t/**\n\t * Base color / albedo; sRGB hexadecimal color. See {@link getBaseColorTexture}.\n\t */\n\tpublic getBaseColorHex(): number {\n\t\treturn ColorUtils.factorToHex(this.get('baseColorFactor'));\n\t}\n\n\t/**\n\t * Base color / albedo; sRGB hexadecimal color. See {@link getBaseColorTexture}.\n\t */\n\tpublic setBaseColorHex(hex: number): this {\n\t\tconst factor = this.get('baseColorFactor').slice() as vec4;\n\t\treturn this.set('baseColorFactor', ColorUtils.hexToFactor(hex, factor));\n\t}\n\n\t/**\n\t * Base color / albedo. The visible color of a non-metallic surface under constant ambient\n\t * light would be a linear combination (multiplication) of its vertex colors, base color\n\t * factor, and base color texture. Lighting, and reflections in metallic or smooth surfaces,\n\t * also effect the final color. The alpha (`.a`) channel of base color factors and textures\n\t * will have varying effects, based on the setting of {@link getAlphaMode}.\n\t *\n\t * Reference:\n\t * - [glTF → material.pbrMetallicRoughness.baseColorFactor](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#pbrmetallicroughnessbasecolorfactor)\n\t */\n\tpublic getBaseColorTexture(): Texture | null {\n\t\treturn this.getRef('baseColorTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its base color texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getBaseColorTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('baseColorTexture') ? this.getRef('baseColorTextureInfo') : null;\n\t}\n\n\t/** Sets base color / albedo texture. See {@link getBaseColorTexture}. */\n\tpublic setBaseColorTexture(texture: Texture | null): this {\n\t\treturn this.setRef('baseColorTexture', texture, { channels: R | G | B | A });\n\t}\n\n\t/**********************************************************************************************\n\t * Emissive.\n\t */\n\n\t/** Emissive color; Linear-sRGB components. See {@link getEmissiveTexture}. */\n\tpublic getEmissiveFactor(): vec3 {\n\t\treturn this.get('emissiveFactor');\n\t}\n\n\t/** Emissive color; Linear-sRGB components. See {@link getEmissiveTexture}. */\n\tpublic setEmissiveFactor(emissiveFactor: vec3): this {\n\t\treturn this.set('emissiveFactor', emissiveFactor);\n\t}\n\n\t/** Emissive; sRGB hexadecimal color. See {@link getBaseColorTexture}. */\n\tpublic getEmissiveHex(): number {\n\t\treturn ColorUtils.factorToHex(this.get('emissiveFactor'));\n\t}\n\n\t/** Emissive; sRGB hexadecimal color. See {@link getEmissiveTexture}. */\n\tpublic setEmissiveHex(hex: number): this {\n\t\tconst factor = this.get('emissiveFactor').slice() as vec3;\n\t\treturn this.set('emissiveFactor', ColorUtils.hexToFactor(hex, factor));\n\t}\n\n\t/**\n\t * Emissive texture. Emissive color is added to any base color of the material, after any\n\t * lighting/shadowing are applied. An emissive color does not inherently \"glow\", or affect\n\t * objects around it at all. To create that effect, most viewers must also enable a\n\t * post-processing effect called \"bloom\".\n\t *\n\t * Reference:\n\t * - [glTF → material.emissiveTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialemissivetexture)\n\t */\n\tpublic getEmissiveTexture(): Texture | null {\n\t\treturn this.getRef('emissiveTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its emissive texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getEmissiveTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('emissiveTexture') ? this.getRef('emissiveTextureInfo') : null;\n\t}\n\n\t/** Sets emissive texture. See {@link getEmissiveTexture}. */\n\tpublic setEmissiveTexture(texture: Texture | null): this {\n\t\treturn this.setRef('emissiveTexture', texture, { channels: R | G | B });\n\t}\n\n\t/**********************************************************************************************\n\t * Normal.\n\t */\n\n\t/** Normal (surface detail) factor; linear multiplier. Affects `.normalTexture`. */\n\tpublic getNormalScale(): number {\n\t\treturn this.get('normalScale');\n\t}\n\n\t/** Normal (surface detail) factor; linear multiplier. Affects `.normalTexture`. */\n\tpublic setNormalScale(scale: number): this {\n\t\treturn this.set('normalScale', scale);\n\t}\n\n\t/**\n\t * Normal (surface detail) texture.\n\t *\n\t * A tangent space normal map. The texture contains RGB components. Each texel represents the\n\t * XYZ components of a normal vector in tangent space. Red [0 to 255] maps to X [-1 to 1].\n\t * Green [0 to 255] maps to Y [-1 to 1]. Blue [128 to 255] maps to Z [1/255 to 1]. The normal\n\t * vectors use OpenGL conventions where +X is right and +Y is up. +Z points toward the viewer.\n\t *\n\t * Reference:\n\t * - [glTF → material.normalTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialnormaltexture)\n\t */\n\tpublic getNormalTexture(): Texture | null {\n\t\treturn this.getRef('normalTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its normal texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getNormalTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('normalTexture') ? this.getRef('normalTextureInfo') : null;\n\t}\n\n\t/** Sets normal (surface detail) texture. See {@link getNormalTexture}. */\n\tpublic setNormalTexture(texture: Texture | null): this {\n\t\treturn this.setRef('normalTexture', texture, { channels: R | G | B });\n\t}\n\n\t/**********************************************************************************************\n\t * Occlusion.\n\t */\n\n\t/** (Ambient) Occlusion factor; linear multiplier. Affects `.occlusionTexture`. */\n\tpublic getOcclusionStrength(): number {\n\t\treturn this.get('occlusionStrength');\n\t}\n\n\t/** Sets (ambient) occlusion factor; linear multiplier. Affects `.occlusionTexture`. */\n\tpublic setOcclusionStrength(strength: number): this {\n\t\treturn this.set('occlusionStrength', strength);\n\t}\n\n\t/**\n\t * (Ambient) Occlusion texture, generally used for subtle 'baked' shadowing effects that are\n\t * independent of an object's position, such as shading in inset areas and corners. Direct\n\t * lighting is not affected by occlusion, so at least one indirect light source must be present\n\t * in the scene for occlusion effects to be visible.\n\t *\n\t * The occlusion values are sampled from the R channel. Higher values indicate areas that\n\t * should receive full indirect lighting and lower values indicate no indirect lighting.\n\t *\n\t * Reference:\n\t * - [glTF → material.occlusionTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#materialocclusiontexture)\n\t */\n\tpublic getOcclusionTexture(): Texture | null {\n\t\treturn this.getRef('occlusionTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its occlusion texture. If no texture is attached,\n\t * {@link TextureInfo} is `null`.\n\t */\n\tpublic getOcclusionTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('occlusionTexture') ? this.getRef('occlusionTextureInfo') : null;\n\t}\n\n\t/** Sets (ambient) occlusion texture. See {@link getOcclusionTexture}. */\n\tpublic setOcclusionTexture(texture: Texture | null): this {\n\t\treturn this.setRef('occlusionTexture', texture, { channels: R });\n\t}\n\n\t/**********************************************************************************************\n\t * Metallic / roughness.\n\t */\n\n\t/**\n\t * Roughness factor; linear multiplier. Affects roughness channel of\n\t * `metallicRoughnessTexture`. See {@link getMetallicRoughnessTexture}.\n\t */\n\tpublic getRoughnessFactor(): number {\n\t\treturn this.get('roughnessFactor');\n\t}\n\n\t/**\n\t * Sets roughness factor; linear multiplier. Affects roughness channel of\n\t * `metallicRoughnessTexture`. See {@link getMetallicRoughnessTexture}.\n\t */\n\tpublic setRoughnessFactor(factor: number): this {\n\t\treturn this.set('roughnessFactor', factor);\n\t}\n\n\t/**\n\t * Metallic factor; linear multiplier. Affects roughness channel of\n\t * `metallicRoughnessTexture`. See {@link getMetallicRoughnessTexture}.\n\t */\n\tpublic getMetallicFactor(): number {\n\t\treturn this.get('metallicFactor');\n\t}\n\n\t/**\n\t * Sets metallic factor; linear multiplier. Affects roughness channel of\n\t * `metallicRoughnessTexture`. See {@link getMetallicRoughnessTexture}.\n\t */\n\tpublic setMetallicFactor(factor: number): this {\n\t\treturn this.set('metallicFactor', factor);\n\t}\n\n\t/**\n\t * Metallic roughness texture. The metalness values are sampled from the B channel. The\n\t * roughness values are sampled from the G channel. When a material is fully metallic,\n\t * or nearly so, it may require image-based lighting (i.e. an environment map) or global\n\t * illumination to appear well-lit.\n\t *\n\t * Reference:\n\t * - [glTF → material.pbrMetallicRoughness.metallicRoughnessTexture](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#pbrmetallicroughnessmetallicroughnesstexture)\n\t */\n\tpublic getMetallicRoughnessTexture(): Texture | null {\n\t\treturn this.getRef('metallicRoughnessTexture');\n\t}\n\n\t/**\n\t * Settings affecting the material's use of its metallic/roughness texture. If no texture is\n\t * attached, {@link TextureInfo} is `null`.\n\t */\n\tpublic getMetallicRoughnessTextureInfo(): TextureInfo | null {\n\t\treturn this.getRef('metallicRoughnessTexture') ? this.getRef('metallicRoughnessTextureInfo') : null;\n\t}\n\n\t/** Sets metallic/roughness texture. See {@link getMetallicRoughnessTexture}. */\n\tpublic setMetallicRoughnessTexture(texture: Texture | null): this {\n\t\treturn this.setRef('metallicRoughnessTexture', texture, { channels: G | B });\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\nimport type { Primitive } from './primitive';\n\ninterface IMesh extends IExtensibleProperty {\n\tweights: number[];\n\tprimitives: Primitive[];\n}\n\n/**\n * # Mesh\n *\n * *Meshes define reusable geometry (triangles, lines, or points) and are instantiated by\n * {@link Node}s.*\n *\n * Each draw call required to render a mesh is represented as a {@link Primitive}. Meshes typically\n * have only a single {@link Primitive}, but may have more for various reasons. A mesh manages only\n * a list of primitives — materials, morph targets, and other properties are managed on a per-\n * primitive basis.\n *\n * When the same geometry and material should be rendered at multiple places in the scene, reuse\n * the same Mesh instance and attach it to multiple nodes for better efficiency. Where the geometry\n * is shared but the material is not, reusing {@link Accessor}s under different meshes and\n * primitives can similarly improve transmission efficiency, although some rendering efficiency is\n * lost as the number of materials in a scene increases.\n *\n * Usage:\n *\n * ```ts\n * const primitive = doc.createPrimitive()\n * \t.setAttribute('POSITION', positionAccessor)\n * \t.setAttribute('TEXCOORD_0', uvAccessor);\n * const mesh = doc.createMesh('myMesh')\n * \t.addPrimitive(primitive);\n * node.setMesh(mesh);\n * ```\n *\n * References:\n * - [glTF → Geometry](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#geometry)\n *\n * @category Properties\n */\nexport class Mesh extends ExtensibleProperty<IMesh> {\n\tpublic declare propertyType: PropertyType.MESH;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.MESH;\n\t}\n\n\tprotected getDefaults(): Nullable<IMesh> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { weights: [], primitives: [] });\n\t}\n\n\t/** Adds a {@link Primitive} to the mesh's draw call list. */\n\tpublic addPrimitive(primitive: Primitive): this {\n\t\treturn this.addRef('primitives', primitive);\n\t}\n\n\t/** Removes a {@link Primitive} from the mesh's draw call list. */\n\tpublic removePrimitive(primitive: Primitive): this {\n\t\treturn this.removeRef('primitives', primitive);\n\t}\n\n\t/** Lists {@link Primitive} draw calls of the mesh. */\n\tpublic listPrimitives(): Primitive[] {\n\t\treturn this.listRefs('primitives');\n\t}\n\n\t/**\n\t * Initial weights of each {@link PrimitiveTarget} on this mesh. Each {@link Primitive} must\n\t * have the same number of targets. Most engines only support 4-8 active morph targets at a\n\t * time.\n\t */\n\tpublic getWeights(): number[] {\n\t\treturn this.get('weights');\n\t}\n\n\t/**\n\t * Initial weights of each {@link PrimitiveTarget} on this mesh. Each {@link Primitive} must\n\t * have the same number of targets. Most engines only support 4-8 active morph targets at a\n\t * time.\n\t */\n\tpublic setWeights(weights: number[]): this {\n\t\treturn this.set('weights', weights);\n\t}\n}\n", "import { multiply } from 'gl-matrix/mat4';\nimport { PropertyType, mat4, vec3, vec4, Nullable } from '../constants';\nimport { $attributes } from 'property-graph';\nimport { MathUtils } from '../utils';\nimport type { Camera } from './camera';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\nimport type { Mesh } from './mesh';\nimport { COPY_IDENTITY } from './property';\nimport type { Skin } from './skin';\n\ninterface INode extends IExtensibleProperty {\n\ttranslation: vec3;\n\trotation: vec4;\n\tscale: vec3;\n\tweights: number[];\n\tcamera: Camera;\n\tmesh: Mesh;\n\tskin: Skin;\n\tchildren: Node[];\n}\n\n/**\n * # Node\n *\n * *Nodes are the objects that comprise a {@link Scene}.*\n *\n * Each node may have one or more children, and a transform (position, rotation, and scale) that\n * applies to all of its descendants. A node may also reference (or \"instantiate\") other resources\n * at its location, including {@link Mesh}, Camera, Light, and Skin properties. A node cannot be\n * part of more than one {@link Scene}.\n *\n * A node's local transform is represented with array-like objects, intended to be compatible with\n * [gl-matrix](https://github.com/toji/gl-matrix), or with the `toArray`/`fromArray` methods of\n * libraries like three.js and babylon.js.\n *\n * Usage:\n *\n * ```ts\n * const node = doc.createNode('myNode')\n * \t.setMesh(mesh)\n * \t.setTranslation([0, 0, 0])\n * \t.addChild(otherNode);\n * ```\n *\n * References:\n * - [glTF → Nodes and Hierarchy](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#nodes-and-hierarchy)\n *\n * @category Properties\n */\nexport class Node extends ExtensibleProperty<INode> {\n\tpublic declare propertyType: PropertyType.NODE;\n\n\t/** @internal Internal reference to node's parent, omitted from {@link Graph}. */\n\tpublic _parent: SceneNode | null = null;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.NODE;\n\t}\n\n\tprotected getDefaults(): Nullable<INode> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\ttranslation: [0, 0, 0] as vec3,\n\t\t\trotation: [0, 0, 0, 1] as vec4,\n\t\t\tscale: [1, 1, 1] as vec3,\n\t\t\tweights: [],\n\t\t\tcamera: null,\n\t\t\tmesh: null,\n\t\t\tskin: null,\n\t\t\tchildren: [],\n\t\t});\n\t}\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\t// Node cannot be copied, only cloned. Copying is shallow, but nodes cannot have more than\n\t\t// one parent. Rather than leaving one of the two nodes without children, throw an error here.\n\t\tif (resolve === COPY_IDENTITY) throw new Error('Node cannot be copied.');\n\t\treturn super.copy(other, resolve);\n\t}\n\n\t/**********************************************************************************************\n\t * Local transform.\n\t */\n\n\t/** Returns the translation (position) of this node in local space. */\n\tpublic getTranslation(): vec3 {\n\t\treturn this.get('translation');\n\t}\n\n\t/** Returns the rotation (quaternion) of this node in local space. */\n\tpublic getRotation(): vec4 {\n\t\treturn this.get('rotation');\n\t}\n\n\t/** Returns the scale of this node in local space. */\n\tpublic getScale(): vec3 {\n\t\treturn this.get('scale');\n\t}\n\n\t/** Sets the translation (position) of this node in local space. */\n\tpublic setTranslation(translation: vec3): this {\n\t\treturn this.set('translation', translation);\n\t}\n\n\t/** Sets the rotation (quaternion) of this node in local space. */\n\tpublic setRotation(rotation: vec4): this {\n\t\treturn this.set('rotation', rotation);\n\t}\n\n\t/** Sets the scale of this node in local space. */\n\tpublic setScale(scale: vec3): this {\n\t\treturn this.set('scale', scale);\n\t}\n\n\t/** Returns the local matrix of this node. */\n\tpublic getMatrix(): mat4 {\n\t\treturn MathUtils.compose(\n\t\t\tthis.get('translation'),\n\t\t\tthis.get('rotation'),\n\t\t\tthis.get('scale'),\n\t\t\t[] as unknown as mat4\n\t\t);\n\t}\n\n\t/** Sets the local matrix of this node. Matrix will be decomposed to TRS properties. */\n\tpublic setMatrix(matrix: mat4): this {\n\t\tconst translation = this.get('translation').slice() as vec3;\n\t\tconst rotation = this.get('rotation').slice() as vec4;\n\t\tconst scale = this.get('scale').slice() as vec3;\n\t\tMathUtils.decompose(matrix, translation, rotation, scale);\n\t\treturn this.set('translation', translation).set('rotation', rotation).set('scale', scale);\n\t}\n\n\t/**********************************************************************************************\n\t * World transform.\n\t */\n\n\t/** Returns the translation (position) of this node in world space. */\n\tpublic getWorldTranslation(): vec3 {\n\t\tconst t = [0, 0, 0] as vec3;\n\t\tMathUtils.decompose(this.getWorldMatrix(), t, [0, 0, 0, 1], [1, 1, 1]);\n\t\treturn t;\n\t}\n\n\t/** Returns the rotation (quaternion) of this node in world space. */\n\tpublic getWorldRotation(): vec4 {\n\t\tconst r = [0, 0, 0, 1] as vec4;\n\t\tMathUtils.decompose(this.getWorldMatrix(), [0, 0, 0], r, [1, 1, 1]);\n\t\treturn r;\n\t}\n\n\t/** Returns the scale of this node in world space. */\n\tpublic getWorldScale(): vec3 {\n\t\tconst s = [1, 1, 1] as vec3;\n\t\tMathUtils.decompose(this.getWorldMatrix(), [0, 0, 0], [0, 0, 0, 1], s);\n\t\treturn s;\n\t}\n\n\t/** Returns the world matrix of this node. */\n\tpublic getWorldMatrix(): mat4 {\n\t\t// Build ancestor chain.\n\t\tconst ancestors: Node[] = [];\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tfor (let node: SceneNode | null = this; node instanceof Node; node = node._parent) {\n\t\t\tancestors.push(node);\n\t\t}\n\n\t\t// Compute world matrix.\n\t\tlet ancestor: Node | undefined;\n\t\tconst worldMatrix = ancestors.pop()!.getMatrix();\n\t\twhile ((ancestor = ancestors.pop())) {\n\t\t\tmultiply(worldMatrix, worldMatrix, ancestor.getMatrix());\n\t\t}\n\n\t\treturn worldMatrix;\n\t}\n\n\t/**********************************************************************************************\n\t * Scene hierarchy.\n\t */\n\n\t/** Adds another node as a child of this one. Nodes cannot have multiple parents. */\n\tpublic addChild(child: Node): this {\n\t\t// Remove existing parent.\n\t\tif (child._parent) child._parent.removeChild(child);\n\n\t\t// Edge in graph.\n\t\tthis.addRef('children', child);\n\n\t\t// Set new parent.\n\t\t// TODO(cleanup): Avoid using $attributes here?\n\t\tchild._parent = this;\n\t\tconst childrenRefs = this[$attributes]['children'];\n\t\tconst ref = childrenRefs[childrenRefs.length - 1];\n\t\tref.addEventListener('dispose', () => (child._parent = null));\n\t\treturn this;\n\t}\n\n\t/** Removes a node from this node's child node list. */\n\tpublic removeChild(child: Node): this {\n\t\treturn this.removeRef('children', child);\n\t}\n\n\t/** Lists all child nodes of this node. */\n\tpublic listChildren(): Node[] {\n\t\treturn this.listRefs('children');\n\t}\n\n\t/**\n\t * Returns the unique parent ({@link Scene}, {@link Node}, or null) of this node in the scene\n\t * hierarchy. Unrelated to {@link Property.listParents}, which lists all resource references.\n\t */\n\tpublic getParent(): SceneNode | null {\n\t\treturn this._parent;\n\t}\n\n\t/**********************************************************************************************\n\t * Attachments.\n\t */\n\n\t/** Returns the {@link Mesh}, if any, instantiated at this node. */\n\tpublic getMesh(): Mesh | null {\n\t\treturn this.getRef('mesh');\n\t}\n\n\t/**\n\t * Sets a {@link Mesh} to be instantiated at this node. A single mesh may be instatiated by\n\t * multiple nodes; reuse of this sort is strongly encouraged.\n\t */\n\tpublic setMesh(mesh: Mesh | null): this {\n\t\treturn this.setRef('mesh', mesh);\n\t}\n\n\t/** Returns the {@link Camera}, if any, instantiated at this node. */\n\tpublic getCamera(): Camera | null {\n\t\treturn this.getRef('camera');\n\t}\n\n\t/** Sets a {@link Camera} to be instantiated at this node. */\n\tpublic setCamera(camera: Camera | null): this {\n\t\treturn this.setRef('camera', camera);\n\t}\n\n\t/** Returns the {@link Skin}, if any, instantiated at this node. */\n\tpublic getSkin(): Skin | null {\n\t\treturn this.getRef('skin');\n\t}\n\n\t/** Sets a {@link Skin} to be instantiated at this node. */\n\tpublic setSkin(skin: Skin | null): this {\n\t\treturn this.setRef('skin', skin);\n\t}\n\n\t/**\n\t * Initial weights of each {@link PrimitiveTarget} for the mesh instance at this node.\n\t * Most engines only support 4-8 active morph targets at a time.\n\t */\n\tpublic getWeights(): number[] {\n\t\treturn this.get('weights');\n\t}\n\n\t/**\n\t * Initial weights of each {@link PrimitiveTarget} for the mesh instance at this node.\n\t * Most engines only support 4-8 active morph targets at a time.\n\t */\n\tpublic setWeights(weights: number[]): this {\n\t\treturn this.set('weights', weights);\n\t}\n\n\t/**********************************************************************************************\n\t * Helpers.\n\t */\n\n\t/** Visits this {@link Node} and its descendants, top-down. */\n\tpublic traverse(fn: (node: Node) => void): this {\n\t\tfn(this);\n\t\tfor (const child of this.listChildren()) child.traverse(fn);\n\t\treturn this;\n\t}\n}\n\ninterface SceneNode {\n\tpropertyType: PropertyType;\n\t_parent?: SceneNode | null;\n\taddChild(node: Node): this;\n\tremoveChild(node: Node): this;\n}\n", "import { BufferViewUsage, Nullable, PropertyType } from '../constants';\nimport type { GLTF } from '../types/gltf';\nimport type { Accessor } from './accessor';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\nimport type { Material } from './material';\nimport type { PrimitiveTarget } from './primitive-target';\n\ninterface IPrimitive extends IExtensibleProperty {\n\tmode: GLTF.MeshPrimitiveMode;\n\tmaterial: Material;\n\tindices: Accessor;\n\tattributes: { [key: string]: Accessor };\n\ttargets: PrimitiveTarget[];\n}\n\n/**\n * # Primitive\n *\n * *Primitives are individual GPU draw calls comprising a {@link Mesh}.*\n *\n * Meshes typically have only a single Primitive, although various cases may require more. Each\n * primitive may be assigned vertex attributes, morph target attributes, and a material. Any of\n * these properties should be reused among multiple primitives where feasible.\n *\n * Primitives cannot be moved independently of other primitives within the same mesh, except\n * through the use of morph targets and skinning. If independent movement or other runtime\n * behavior is necessary (like raycasting or collisions) prefer to assign each primitive to a\n * different mesh. The number of GPU draw calls is typically not affected by grouping or\n * ungrouping primitives to a mesh.\n *\n * Each primitive may optionally be deformed by one or more morph targets, stored in a\n * {@link PrimitiveTarget}.\n *\n * Usage:\n *\n * ```ts\n * const primitive = doc.createPrimitive()\n * \t.setAttribute('POSITION', positionAccessor)\n * \t.setAttribute('TEXCOORD_0', uvAccessor)\n * \t.setMaterial(material);\n * mesh.addPrimitive(primitive);\n * node.setMesh(mesh);\n * ```\n *\n * References:\n * - [glTF → Geometry](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#geometry)\n *\n * @category Properties\n */\nexport class Primitive extends ExtensibleProperty<IPrimitive> {\n\tpublic declare propertyType: PropertyType.PRIMITIVE;\n\n\t/**********************************************************************************************\n\t * Constants.\n\t */\n\n\t/** Type of primitives to render. All valid values correspond to WebGL enums. */\n\tpublic static Mode: Record<string, GLTF.MeshPrimitiveMode> = {\n\t\t/** Draw single points. */\n\t\tPOINTS: 0,\n\t\t/** Draw lines. Each vertex connects to the one after it. */\n\t\tLINES: 1,\n\t\t/**\n\t\t * Draw lines. Each set of two vertices is treated as a separate line segment.\n\t\t * @deprecated See {@link https://github.com/KhronosGroup/glTF/issues/1883 KhronosGroup/glTF#1883}.\n\t\t */\n\t\tLINE_LOOP: 2,\n\t\t/** Draw a connected group of line segments from the first vertex to the last,  */\n\t\tLINE_STRIP: 3,\n\t\t/** Draw triangles. Each set of three vertices creates a separate triangle. */\n\t\tTRIANGLES: 4,\n\t\t/** Draw a connected strip of triangles. */\n\t\tTRIANGLE_STRIP: 5,\n\t\t/**\n\t\t * Draw a connected group of triangles. Each vertex connects to the previous and the first\n\t\t * vertex in the fan.\n\t\t * @deprecated See {@link https://github.com/KhronosGroup/glTF/issues/1883 KhronosGroup/glTF#1883}.\n\t\t */\n\t\tTRIANGLE_FAN: 6,\n\t};\n\n\t/**********************************************************************************************\n\t * Instance.\n\t */\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.PRIMITIVE;\n\t}\n\n\tprotected getDefaults(): Nullable<IPrimitive> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tmode: Primitive.Mode.TRIANGLES,\n\t\t\tmaterial: null,\n\t\t\tindices: null,\n\t\t\tattributes: {},\n\t\t\ttargets: [],\n\t\t});\n\t}\n\n\t/**********************************************************************************************\n\t * Primitive data.\n\t */\n\n\t/** Returns an {@link Accessor} with indices of vertices to be drawn. */\n\tpublic getIndices(): Accessor | null {\n\t\treturn this.getRef('indices');\n\t}\n\n\t/**\n\t * Sets an {@link Accessor} with indices of vertices to be drawn. In `TRIANGLES` draw mode,\n\t * each set of three indices define a triangle. The front face has a counter-clockwise (CCW)\n\t * winding order.\n\t */\n\tpublic setIndices(indices: Accessor | null): this {\n\t\treturn this.setRef('indices', indices, { usage: BufferViewUsage.ELEMENT_ARRAY_BUFFER });\n\t}\n\n\t/** Returns a vertex attribute as an {@link Accessor}. */\n\tpublic getAttribute(semantic: string): Accessor | null {\n\t\treturn this.getRefMap('attributes', semantic);\n\t}\n\n\t/**\n\t * Sets a vertex attribute to an {@link Accessor}. All attributes must have the same vertex\n\t * count.\n\t */\n\tpublic setAttribute(semantic: string, accessor: Accessor | null): this {\n\t\treturn this.setRefMap('attributes', semantic, accessor, { usage: BufferViewUsage.ARRAY_BUFFER });\n\t}\n\n\t/**\n\t * Lists all vertex attribute {@link Accessor}s associated with the primitive, excluding any\n\t * attributes used for morph targets. For example, `[positionAccessor, normalAccessor,\n\t * uvAccessor]`. Order will be consistent with the order returned by {@link .listSemantics}().\n\t */\n\tpublic listAttributes(): Accessor[] {\n\t\treturn this.listRefMapValues('attributes');\n\t}\n\n\t/**\n\t * Lists all vertex attribute semantics associated with the primitive, excluding any semantics\n\t * used for morph targets. For example, `['POSITION', 'NORMAL', 'TEXCOORD_0']`. Order will be\n\t * consistent with the order returned by {@link .listAttributes}().\n\t */\n\tpublic listSemantics(): string[] {\n\t\treturn this.listRefMapKeys('attributes');\n\t}\n\n\t/** Returns the material used to render the primitive. */\n\tpublic getMaterial(): Material | null {\n\t\treturn this.getRef('material');\n\t}\n\n\t/** Sets the material used to render the primitive. */\n\tpublic setMaterial(material: Material | null): this {\n\t\treturn this.setRef('material', material);\n\t}\n\n\t/**********************************************************************************************\n\t * Mode.\n\t */\n\n\t/**\n\t * Returns the GPU draw mode (`TRIANGLES`, `LINES`, `POINTS`...) as a WebGL enum value.\n\t *\n\t * Reference:\n\t * - [glTF → `primitive.mode`](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#primitivemode)\n\t */\n\tpublic getMode(): GLTF.MeshPrimitiveMode {\n\t\treturn this.get('mode');\n\t}\n\n\t/**\n\t * Sets the GPU draw mode (`TRIANGLES`, `LINES`, `POINTS`...) as a WebGL enum value.\n\t *\n\t * Reference:\n\t * - [glTF → `primitive.mode`](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#primitivemode)\n\t */\n\tpublic setMode(mode: GLTF.MeshPrimitiveMode): this {\n\t\treturn this.set('mode', mode);\n\t}\n\n\t/**********************************************************************************************\n\t * Morph targets.\n\t */\n\n\t/** Lists all morph targets associated with the primitive. */\n\tpublic listTargets(): PrimitiveTarget[] {\n\t\treturn this.listRefs('targets');\n\t}\n\n\t/**\n\t * Adds a morph target to the primitive. All primitives in the same mesh must have the same\n\t * number of targets.\n\t */\n\tpublic addTarget(target: PrimitiveTarget): this {\n\t\treturn this.addRef('targets', target);\n\t}\n\n\t/**\n\t * Removes a morph target from the primitive. All primitives in the same mesh must have the same\n\t * number of targets.\n\t */\n\tpublic removeTarget(target: PrimitiveTarget): this {\n\t\treturn this.removeRef('targets', target);\n\t}\n}\n", "import { BufferViewUsage, Nullable, PropertyType } from '../constants';\nimport type { Accessor } from './accessor';\nimport type { IExtensibleProperty } from './extensible-property';\nimport { Property } from './property';\n\ninterface IPrimitiveTarget extends IExtensibleProperty {\n\tattributes: { [key: string]: Accessor };\n}\n\n/**\n * # PrimitiveTarget\n *\n * *Morph target or shape key used to deform one {@link Primitive} in a {@link Mesh}.*\n *\n * A PrimitiveTarget contains a `POSITION` attribute (and optionally `NORMAL` and `TANGENT`) that\n * can additively deform the base attributes on a {@link Mesh} {@link Primitive}. Vertex values\n * of `0, 0, 0` in the target will have no effect, whereas a value of `0, 1, 0` would offset that\n * vertex in the base geometry by y+=1. Morph targets can be fully or partially applied: their\n * default state is controlled by {@link Mesh.getWeights}, which can also be overridden for a\n * particular instantiation of a {@link Mesh}, using {@link Node.getWeights}.\n *\n * Reference:\n * - [glTF → Morph Targets](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#morph-targets)\n */\nexport class PrimitiveTarget extends Property<IPrimitiveTarget> {\n\tpublic declare propertyType: PropertyType.PRIMITIVE_TARGET;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.PRIMITIVE_TARGET;\n\t}\n\n\tprotected getDefaults(): Nullable<IPrimitiveTarget> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { attributes: {} });\n\t}\n\n\t/** Returns a morph target vertex attribute as an {@link Accessor}. */\n\tpublic getAttribute(semantic: string): Accessor | null {\n\t\treturn this.getRefMap('attributes', semantic);\n\t}\n\n\t/**\n\t * Sets a morph target vertex attribute to an {@link Accessor}.\n\t */\n\tpublic setAttribute(semantic: string, accessor: Accessor | null): this {\n\t\treturn this.setRefMap('attributes', semantic, accessor, { usage: BufferViewUsage.ARRAY_BUFFER });\n\t}\n\n\t/**\n\t * Lists all morph target vertex attribute {@link Accessor}s associated. Order will be\n\t * consistent with the order returned by {@link .listSemantics}().\n\t */\n\tpublic listAttributes(): Accessor[] {\n\t\treturn this.listRefMapValues('attributes');\n\t}\n\n\t/**\n\t * Lists all morph target vertex attribute semantics associated. Order will be\n\t * consistent with the order returned by {@link .listAttributes}().\n\t */\n\tpublic listSemantics(): string[] {\n\t\treturn this.listRefMapKeys('attributes');\n\t}\n}\n", "import { Nullable, PropertyType } from '../constants';\nimport { $attributes } from 'property-graph';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\nimport type { Node } from './node';\nimport { COPY_IDENTITY } from './property';\n\ninterface IScene extends IExtensibleProperty {\n\tchildren: Node[];\n}\n\n/**\n * # Scene\n *\n * *Scenes represent a set of visual objects to render.*\n *\n * Typically a glTF file contains only a single scene, although more are allowed and useful in some\n * cases. No particular meaning is associated with additional scenes, except as defined by the\n * application. Scenes reference {@link Node}s, and a single node cannot be a member of more than\n * one scene.\n *\n * References:\n * - [glTF → Scenes](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#scenes)\n * - [glTF → Coordinate System and Units](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#coordinate-system-and-units)\n *\n * @category Properties\n */\nexport class Scene extends ExtensibleProperty<IScene> {\n\tpublic declare propertyType: PropertyType.SCENE;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.SCENE;\n\t}\n\n\tprotected getDefaults(): Nullable<IScene> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { children: [] });\n\t}\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\t// Scene cannot be copied, only cloned. Copying is shallow, but nodes cannot have more than\n\t\t// one parent. Rather than leaving one of the two scenes without children, throw an error here.\n\t\tif (resolve === COPY_IDENTITY) throw new Error('Scene cannot be copied.');\n\t\treturn super.copy(other, resolve);\n\t}\n\n\t/** Adds a {@link Node} to the scene. */\n\tpublic addChild(node: Node): this {\n\t\t// Remove existing parent.\n\t\tif (node._parent) node._parent.removeChild(node);\n\n\t\t// Edge in graph.\n\t\tthis.addRef('children', node);\n\n\t\t// Set new parent.\n\t\t// TODO(cleanup): Avoid using $attributes here?\n\t\tnode._parent = this;\n\t\tconst childrenRefs = this[$attributes]['children'];\n\t\tconst ref = childrenRefs[childrenRefs.length - 1];\n\t\tref.addEventListener('dispose', () => (node._parent = null));\n\t\treturn this;\n\t}\n\n\t/** Removes a {@link Node} from the scene. */\n\tpublic removeChild(node: Node): this {\n\t\treturn this.removeRef('children', node);\n\t}\n\n\t/** Lists all root {@link Node}s in the scene. */\n\tpublic listChildren(): Node[] {\n\t\treturn this.listRefs('children');\n\t}\n\n\t/** Visits each {@link Node} in the scene, including descendants, top-down. */\n\tpublic traverse(fn: (node: Node) => void): this {\n\t\tfor (const node of this.listChildren()) node.traverse(fn);\n\t\treturn this;\n\t}\n}\n", "import { BufferViewUsage, Nullable, PropertyType } from '../constants';\nimport type { Accessor } from './accessor';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\nimport type { Node } from './node';\n\ninterface ISkin extends IExtensibleProperty {\n\tskeleton: Node;\n\tinverseBindMatrices: Accessor;\n\tjoints: Node[];\n}\n\n/**\n * # Skin\n *\n * *Collection of {@link Node} joints and inverse bind matrices used with skinned {@link Mesh}\n * instances.*\n *\n * Reference\n * - [glTF → Skins](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#skins)\n *\n * @category Properties\n */\nexport class Skin extends ExtensibleProperty<ISkin> {\n\tpublic declare propertyType: PropertyType.SKIN;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.SKIN;\n\t}\n\n\tprotected getDefaults(): Nullable<ISkin> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tskeleton: null,\n\t\t\tinverseBindMatrices: null,\n\t\t\tjoints: [],\n\t\t});\n\t}\n\n\t/**\n\t * {@link Node} used as a skeleton root. The node must be the closest common root of the joints\n\t * hierarchy or a direct or indirect parent node of the closest common root.\n\t */\n\tpublic getSkeleton(): Node | null {\n\t\treturn this.getRef('skeleton');\n\t}\n\n\t/**\n\t * {@link Node} used as a skeleton root. The node must be the closest common root of the joints\n\t * hierarchy or a direct or indirect parent node of the closest common root.\n\t */\n\tpublic setSkeleton(skeleton: Node | null): this {\n\t\treturn this.setRef('skeleton', skeleton);\n\t}\n\n\t/**\n\t * {@link Accessor} containing the floating-point 4x4 inverse-bind matrices. The default is\n\t * that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were\n\t * pre-applied.\n\t */\n\tpublic getInverseBindMatrices(): Accessor | null {\n\t\treturn this.getRef('inverseBindMatrices');\n\t}\n\n\t/**\n\t * {@link Accessor} containing the floating-point 4x4 inverse-bind matrices. The default is\n\t * that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were\n\t * pre-applied.\n\t */\n\tpublic setInverseBindMatrices(inverseBindMatrices: Accessor | null): this {\n\t\treturn this.setRef('inverseBindMatrices', inverseBindMatrices, {\n\t\t\tusage: BufferViewUsage.INVERSE_BIND_MATRICES,\n\t\t});\n\t}\n\n\t/** Adds a joint {@link Node} to this {@link Skin}. */\n\tpublic addJoint(joint: Node): this {\n\t\treturn this.addRef('joints', joint);\n\t}\n\n\t/** Removes a joint {@link Node} from this {@link Skin}. */\n\tpublic removeJoint(joint: Node): this {\n\t\treturn this.removeRef('joints', joint);\n\t}\n\n\t/** Lists joints ({@link Node}s used as joints or bones) in this {@link Skin}. */\n\tpublic listJoints(): Node[] {\n\t\treturn this.listRefs('joints');\n\t}\n}\n", "import { Nullable, PropertyType, vec2 } from '../constants';\nimport { BufferUtils, FileUtils, ImageUtils } from '../utils';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\n\ninterface ITexture extends IExtensibleProperty {\n\timage: Uint8Array | null;\n\tmimeType: string;\n\turi: string;\n}\n\n/**\n * # Texture\n *\n * *Texture, or images, referenced by {@link Material} properties.*\n *\n * Textures in glTF-Transform are a combination of glTF's `texture` and `image` properties, and\n * should be unique within a document, such that no other texture contains the same\n * {@link getImage}() data. Where duplicates may already exist, the `dedup({textures: true})`\n * transform can remove them. A {@link Document} with N texture properties will be exported to a\n * glTF file with N `image` properties, and the minimum number of `texture` properties necessary\n * for the materials that use it.\n *\n * For properties associated with a particular _use_ of a texture, see {@link TextureInfo}.\n *\n * Reference:\n * - [glTF → Textures](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#textures)\n * - [glTF → Images](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#images)\n *\n * @category Properties\n */\nexport class Texture extends ExtensibleProperty<ITexture> {\n\tpublic declare propertyType: PropertyType.TEXTURE;\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.TEXTURE;\n\t}\n\n\tprotected getDefaults(): Nullable<ITexture> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, { image: null, mimeType: '', uri: '' });\n\t}\n\n\t/**********************************************************************************************\n\t * MIME type / format.\n\t */\n\n\t/** Returns the MIME type for this texture ('image/jpeg' or 'image/png'). */\n\tpublic getMimeType(): string {\n\t\treturn this.get('mimeType') || ImageUtils.extensionToMimeType(FileUtils.extension(this.get('uri')));\n\t}\n\n\t/**\n\t * Sets the MIME type for this texture ('image/jpeg' or 'image/png'). If the texture does not\n\t * have a URI, a MIME type is required for correct export.\n\t */\n\tpublic setMimeType(mimeType: string): this {\n\t\treturn this.set('mimeType', mimeType);\n\t}\n\n\t/**********************************************************************************************\n\t * URI / filename.\n\t */\n\n\t/** Returns the URI (e.g. 'path/to/file.png') for this texture. */\n\tpublic getURI(): string {\n\t\treturn this.get('uri');\n\t}\n\n\t/**\n\t * Sets the URI (e.g. 'path/to/file.png') for this texture. If the texture does not have a MIME\n\t * type, a URI is required for correct export.\n\t */\n\tpublic setURI(uri: string): this {\n\t\tthis.set('uri', uri);\n\t\tthis.set('mimeType', ImageUtils.extensionToMimeType(FileUtils.extension(uri)));\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Image data.\n\t */\n\n\t/** Returns the raw image data for this texture. */\n\tpublic getImage(): Uint8Array | null {\n\t\treturn this.get('image');\n\t}\n\n\t/** Sets the raw image data for this texture. */\n\tpublic setImage(image: Uint8Array): this {\n\t\treturn this.set('image', BufferUtils.assertView(image));\n\t}\n\n\t/** Returns the size, in pixels, of this texture. */\n\tpublic getSize(): vec2 | null {\n\t\tconst image = this.get('image');\n\t\tif (!image) return null;\n\t\treturn ImageUtils.getSize(image, this.getMimeType());\n\t}\n}\n", "import { Nullable, PropertyType, VERSION } from '../constants';\nimport type { Extension } from '../extension';\nimport type { Graph } from 'property-graph';\nimport { Accessor } from './accessor';\nimport { Animation } from './animation';\nimport { Buffer } from './buffer';\nimport { Camera } from './camera';\nimport { Material } from './material';\nimport { Mesh } from './mesh';\nimport { Node } from './node';\nimport { COPY_IDENTITY, Property } from './property';\nimport { Scene } from './scene';\nimport { Skin } from './skin';\nimport { Texture } from './texture';\nimport { ExtensibleProperty, IExtensibleProperty } from './extensible-property';\nimport type { ExtensionProperty } from './extension-property';\n\ninterface IAsset {\n\tversion: string;\n\tminVersion?: string;\n\tgenerator?: string;\n\tcopyright?: string;\n\t[key: string]: unknown;\n}\n\ninterface IRoot extends IExtensibleProperty {\n\tasset: IAsset;\n\tdefaultScene: Scene;\n\n\taccessors: Accessor[];\n\tanimations: Animation[];\n\tbuffers: Buffer[];\n\tcameras: Camera[];\n\tmaterials: Material[];\n\tmeshes: Mesh[];\n\tnodes: Node[];\n\tscenes: Scene[];\n\tskins: Skin[];\n\ttextures: Texture[];\n}\n\n/**\n * # Root\n *\n * *Root property of a glTF asset.*\n *\n * Any properties to be exported with a particular asset must be referenced (directly or\n * indirectly) by the root. Metadata about the asset's license, generator, and glTF specification\n * version are stored in the asset, accessible with {@link .getAsset}().\n *\n * Properties are added to the root with factory methods on its {@link Document}, and removed by\n * calling {@link Property.dispose}() on the resource. Any properties that have been created but\n * not disposed will be included when calling the various `root.list*()` methods.\n *\n * A document's root cannot be removed, and no other root may be created. Unlike other\n * {@link Property} types, the `.dispose()`, `.detach()` methods have no useful function on a\n * Root property.\n *\n * Usage:\n *\n * ```ts\n * const root = document.getRoot();\n * const scene = document.createScene('myScene');\n * const node = document.createNode('myNode');\n * scene.addChild(node);\n *\n * console.log(root.listScenes()); // → [scene x 1]\n * ```\n *\n * Reference: [glTF → Concepts](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#concepts)\n *\n * @category Properties\n */\nexport class Root extends ExtensibleProperty<IRoot> {\n\tpublic declare propertyType: PropertyType.ROOT;\n\n\tprivate readonly _extensions: Set<Extension> = new Set();\n\n\tprotected init(): void {\n\t\tthis.propertyType = PropertyType.ROOT;\n\t}\n\n\tprotected getDefaults(): Nullable<IRoot> {\n\t\treturn Object.assign(super.getDefaults() as IExtensibleProperty, {\n\t\t\tasset: {\n\t\t\t\tgenerator: `glTF-Transform ${VERSION}`,\n\t\t\t\tversion: '2.0',\n\t\t\t},\n\t\t\tdefaultScene: null,\n\t\t\taccessors: [],\n\t\t\tanimations: [],\n\t\t\tbuffers: [],\n\t\t\tcameras: [],\n\t\t\tmaterials: [],\n\t\t\tmeshes: [],\n\t\t\tnodes: [],\n\t\t\tscenes: [],\n\t\t\tskins: [],\n\t\t\ttextures: [],\n\t\t});\n\t}\n\n\t/** @internal */\n\tconstructor(graph: Graph<Property>) {\n\t\tsuper(graph);\n\t\tgraph.addEventListener('node:create', (event) => {\n\t\t\tthis._addChildOfRoot(event.target as Property);\n\t\t});\n\t}\n\n\tpublic clone(): this {\n\t\tthrow new Error('Root cannot be cloned.');\n\t}\n\n\tpublic copy(other: this, resolve = COPY_IDENTITY): this {\n\t\t// Root cannot be cloned in isolation: only with its Document. Extensions are managed by\n\t\t// the Document during cloning. The Root, and only the Root, should keep existing\n\t\t// references while copying to avoid overwriting during a merge.\n\t\tif (resolve === COPY_IDENTITY) throw new Error('Root cannot be copied.');\n\n\t\t// IMPORTANT: Root cannot call super.copy(), which removes existing references.\n\n\t\tthis.set('asset', { ...other.get('asset') });\n\t\tthis.setName(other.getName());\n\t\tthis.setExtras({ ...other.getExtras() });\n\t\tthis.setDefaultScene(other.getDefaultScene() ? resolve(other.getDefaultScene()!) : null);\n\n\t\tfor (const extensionName of other.listRefMapKeys('extensions')) {\n\t\t\tconst otherExtension = other.getExtension(extensionName) as ExtensionProperty;\n\t\t\tthis.setExtension(extensionName, resolve(otherExtension));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprivate _addChildOfRoot(child: Property): this {\n\t\tif (child instanceof Scene) {\n\t\t\tthis.addRef('scenes', child);\n\t\t} else if (child instanceof Node) {\n\t\t\tthis.addRef('nodes', child);\n\t\t} else if (child instanceof Camera) {\n\t\t\tthis.addRef('cameras', child);\n\t\t} else if (child instanceof Skin) {\n\t\t\tthis.addRef('skins', child);\n\t\t} else if (child instanceof Mesh) {\n\t\t\tthis.addRef('meshes', child);\n\t\t} else if (child instanceof Material) {\n\t\t\tthis.addRef('materials', child);\n\t\t} else if (child instanceof Texture) {\n\t\t\tthis.addRef('textures', child);\n\t\t} else if (child instanceof Animation) {\n\t\t\tthis.addRef('animations', child);\n\t\t} else if (child instanceof Accessor) {\n\t\t\tthis.addRef('accessors', child);\n\t\t} else if (child instanceof Buffer) {\n\t\t\tthis.addRef('buffers', child);\n\t\t}\n\t\t// No error for untracked property types.\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the `asset` object, which specifies the target glTF version of the asset. Additional\n\t * metadata can be stored in optional properties such as `generator` or `copyright`.\n\t *\n\t * Reference: [glTF → Asset](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#asset)\n\t */\n\tpublic getAsset(): IAsset {\n\t\treturn this.get('asset');\n\t}\n\n\t/**********************************************************************************************\n\t * Extensions.\n\t */\n\n\t/** Lists all {@link Extension} properties enabled for this root. */\n\tpublic listExtensionsUsed(): Extension[] {\n\t\treturn Array.from(this._extensions);\n\t}\n\n\t/** Lists all {@link Extension} properties enabled and required for this root. */\n\tpublic listExtensionsRequired(): Extension[] {\n\t\treturn this.listExtensionsUsed().filter((extension) => extension.isRequired());\n\t}\n\n\t/** @internal */\n\tpublic _enableExtension(extension: Extension): this {\n\t\tthis._extensions.add(extension);\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tpublic _disableExtension(extension: Extension): this {\n\t\tthis._extensions.delete(extension);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Properties.\n\t */\n\n\t/** Lists all {@link Scene} properties associated with this root. */\n\tpublic listScenes(): Scene[] {\n\t\treturn this.listRefs('scenes');\n\t}\n\n\t/** Default {@link Scene} associated with this root. */\n\tpublic setDefaultScene(defaultScene: Scene | null): this {\n\t\treturn this.setRef('defaultScene', defaultScene);\n\t}\n\n\t/** Default {@link Scene} associated with this root. */\n\tpublic getDefaultScene(): Scene | null {\n\t\treturn this.getRef('defaultScene');\n\t}\n\n\t/** Lists all {@link Node} properties associated with this root. */\n\tpublic listNodes(): Node[] {\n\t\treturn this.listRefs('nodes');\n\t}\n\n\t/** Lists all {@link Camera} properties associated with this root. */\n\tpublic listCameras(): Camera[] {\n\t\treturn this.listRefs('cameras');\n\t}\n\n\t/** Lists all {@link Skin} properties associated with this root. */\n\tpublic listSkins(): Skin[] {\n\t\treturn this.listRefs('skins');\n\t}\n\n\t/** Lists all {@link Mesh} properties associated with this root. */\n\tpublic listMeshes(): Mesh[] {\n\t\treturn this.listRefs('meshes');\n\t}\n\n\t/** Lists all {@link Material} properties associated with this root. */\n\tpublic listMaterials(): Material[] {\n\t\treturn this.listRefs('materials');\n\t}\n\n\t/** Lists all {@link Texture} properties associated with this root. */\n\tpublic listTextures(): Texture[] {\n\t\treturn this.listRefs('textures');\n\t}\n\n\t/** Lists all {@link Animation} properties associated with this root. */\n\tpublic listAnimations(): Animation[] {\n\t\treturn this.listRefs('animations');\n\t}\n\n\t/** Lists all {@link Accessor} properties associated with this root. */\n\tpublic listAccessors(): Accessor[] {\n\t\treturn this.listRefs('accessors');\n\t}\n\n\t/** Lists all {@link Buffer} properties associated with this root. */\n\tpublic listBuffers(): Buffer[] {\n\t\treturn this.listRefs('buffers');\n\t}\n}\n", "import { PropertyType } from './constants';\nimport type { Extension } from './extension';\nimport { Graph } from 'property-graph';\nimport {\n\tAccessor,\n\tAnimation,\n\tAnimationChannel,\n\tAnimationSampler,\n\tBuffer,\n\tCamera,\n\tMaterial,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tProperty,\n\tRoot,\n\tScene,\n\tSkin,\n\tTexture,\n} from './properties';\nimport { ILogger, Logger } from './utils';\n\nexport interface TransformContext {\n\tstack: string[];\n}\n\nexport type Transform = (doc: Document, context?: TransformContext) => void;\n\n/**\n * # Document\n *\n * *Wraps a glTF asset and its resources for easier modification.*\n *\n * Documents manage glTF assets and the relationships among dependencies. The document wrapper\n * allow tools to read and write changes without dealing with array indices or byte offsets, which\n * would otherwise require careful management over the course of a file modification. An internal\n * graph structure allows any property in the glTF file to maintain references to its dependencies,\n * and makes it easy to determine where a particular property dependency is being used. For\n * example, finding a list of materials that use a particular texture is as simple as calling\n * {@link Texture.listParents}().\n *\n * A new resource {@link Property} (e.g. a {@link Mesh} or {@link Material}) is created by calling\n * 'create' methods on the document. Resources are destroyed by calling {@link Property.dispose}().\n *\n * ```ts\n * import fs from 'fs/promises';\n * import { Document } from '@gltf-transform/core';\n * import { dedup } from '@gltf-transform/functions';\n *\n * const doc = new Document();\n *\n * const texture1 = doc.createTexture('myTexture')\n * \t.setImage(await fs.readFile('path/to/image.png'))\n * \t.setMimeType('image/png');\n * const texture2 = doc.createTexture('myTexture2')\n * \t.setImage(await fs.readFile('path/to/image2.png'))\n * \t.setMimeType('image/png');\n *\n * // Document containing duplicate copies of the same texture.\n * doc.getRoot().listTextures(); // → [texture x 2]\n *\n * await doc.transform(\n * \tdedup({textures: true}),\n * \t// ...\n * );\n *\n * // Document with duplicate textures removed.\n * doc.getRoot().listTextures(); // → [texture x 1]\n * ```\n *\n * Reference:\n * - [glTF → Basics](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#gltf-basics)\n * - [glTF → Concepts](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#concepts)\n *\n * @category Documents\n */\nexport class Document {\n\tprivate _graph: Graph<Property> = new Graph<Property>();\n\tprivate _root: Root = new Root(this._graph);\n\tprivate _logger: ILogger = Logger.DEFAULT_INSTANCE;\n\n\t/** Returns the glTF {@link Root} property. */\n\tpublic getRoot(): Root {\n\t\treturn this._root;\n\t}\n\n\t/**\n\t * Returns the {@link Graph} representing connectivity of resources within this document.\n\t *\n\t * @hidden\n\t */\n\tpublic getGraph(): Graph<Property> {\n\t\treturn this._graph;\n\t}\n\n\t/** Returns the {@link Logger} instance used for any operations performed on this document. */\n\tpublic getLogger(): ILogger {\n\t\treturn this._logger;\n\t}\n\n\t/**\n\t * Overrides the {@link Logger} instance used for any operations performed on this document.\n\t *\n\t * Usage:\n\t *\n\t * ```ts\n\t * doc\n\t * \t.setLogger(new Logger(Logger.Verbosity.SILENT))\n\t * \t.transform(dedup(), weld());\n\t * ```\n\t */\n\tpublic setLogger(logger: ILogger): Document {\n\t\tthis._logger = logger;\n\t\treturn this;\n\t}\n\n\t/** Clones this Document, copying all resources within it. */\n\tpublic clone(): Document {\n\t\treturn new Document().setLogger(this._logger).merge(this);\n\t}\n\n\t/** Merges the content of another Document into this one, without affecting the original. */\n\tpublic merge(other: Document): this {\n\t\t// 1. Attach extensions.\n\t\tconst thisExtensions: { [key: string]: Extension } = {};\n\t\tfor (const otherExtension of other.getRoot().listExtensionsUsed()) {\n\t\t\tconst thisExtension = this.createExtension(otherExtension.constructor as new (doc: Document) => Extension);\n\t\t\tif (otherExtension.isRequired()) thisExtension.setRequired(true);\n\t\t\tthisExtensions[thisExtension.extensionName] = thisExtension;\n\t\t}\n\n\t\t// 2. Preconfigure the Root and merge history.\n\t\tconst visited = new Set<Property>();\n\t\tconst propertyMap = new Map<Property, Property>();\n\t\tvisited.add(other._root);\n\t\tpropertyMap.set(other._root, this._root);\n\n\t\t// 3. Create stub classes for every Property in other Document.\n\t\tfor (const edge of other._graph.listEdges()) {\n\t\t\tfor (const otherProp of [edge.getParent() as Property, edge.getChild() as Property]) {\n\t\t\t\tif (visited.has(otherProp)) continue;\n\n\t\t\t\tlet thisProp: Property;\n\t\t\t\tif (otherProp.propertyType === PropertyType.TEXTURE_INFO) {\n\t\t\t\t\t// TextureInfo lifecycle is bound to a Material or ExtensionProperty.\n\t\t\t\t\tthisProp = otherProp as Property;\n\t\t\t\t} else {\n\t\t\t\t\t// For other property types, create stub classes.\n\t\t\t\t\tconst PropertyClass = otherProp.constructor as new (g: Graph<Property>) => Property;\n\t\t\t\t\tthisProp = new PropertyClass(this._graph);\n\t\t\t\t}\n\n\t\t\t\tpropertyMap.set(otherProp as Property, thisProp);\n\t\t\t\tvisited.add(otherProp);\n\t\t\t}\n\t\t}\n\n\t\t// 4. Assemble the edges between Properties.\n\t\tconst resolve = (p: Property): Property => {\n\t\t\tconst resolved = propertyMap.get(p);\n\t\t\tif (!resolved) throw new Error('Could resolve property.');\n\t\t\treturn resolved;\n\t\t};\n\t\tfor (const otherProp of visited) {\n\t\t\tconst thisProp = propertyMap.get(otherProp);\n\t\t\tif (!thisProp) throw new Error('Could resolve property.');\n\t\t\t// TextureInfo copy handled by Material or ExtensionProperty.\n\t\t\tif (thisProp.propertyType !== PropertyType.TEXTURE_INFO) {\n\t\t\t\tthisProp.copy(otherProp, resolve);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Applies a series of modifications to this document. Each transformation is asynchronous,\n\t * takes the {@link Document} as input, and returns nothing. Transforms are applied in the\n\t * order given, which may affect the final result.\n\t *\n\t * Usage:\n\t *\n\t * ```ts\n\t * await doc.transform(\n\t * \tdedup(),\n\t * \tprune()\n\t * );\n\t * ```\n\t *\n\t * @param transforms List of synchronous transformation functions to apply.\n\t */\n\tpublic async transform(...transforms: Transform[]): Promise<this> {\n\t\tconst stack = transforms.map((fn) => fn.name);\n\t\tfor (const transform of transforms) {\n\t\t\tawait transform(this, { stack });\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Extension factory method.\n\t */\n\n\t/**\n\t * Creates a new {@link Extension}, for the extension type of the given constructor. If the\n\t * extension is already enabled for this Document, the previous Extension reference is reused.\n\t */\n\tcreateExtension<T extends Extension>(ctor: new (doc: Document) => T): T {\n\t\tconst extensionName = (ctor as unknown as { EXTENSION_NAME: 'string' }).EXTENSION_NAME;\n\t\tconst prevExtension = this.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.find((ext) => ext.extensionName === extensionName);\n\t\treturn (prevExtension || new ctor(this)) as T;\n\t}\n\n\t/**********************************************************************************************\n\t * Property factory methods.\n\t */\n\n\t/** Creates a new {@link Scene} attached to this document's {@link Root}. */\n\tcreateScene(name = ''): Scene {\n\t\treturn new Scene(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Node} attached to this document's {@link Root}. */\n\tcreateNode(name = ''): Node {\n\t\treturn new Node(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Camera} attached to this document's {@link Root}. */\n\tcreateCamera(name = ''): Camera {\n\t\treturn new Camera(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Skin} attached to this document's {@link Root}. */\n\tcreateSkin(name = ''): Skin {\n\t\treturn new Skin(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Mesh} attached to this document's {@link Root}. */\n\tcreateMesh(name = ''): Mesh {\n\t\treturn new Mesh(this._graph, name);\n\t}\n\n\t/**\n\t * Creates a new {@link Primitive}. Primitives must be attached to a {@link Mesh}\n\t * for use and export; they are not otherwise associated with a {@link Root}.\n\t */\n\tcreatePrimitive(): Primitive {\n\t\treturn new Primitive(this._graph);\n\t}\n\n\t/**\n\t * Creates a new {@link PrimitiveTarget}, or morph target. Targets must be attached to a\n\t * {@link Primitive} for use and export; they are not otherwise associated with a {@link Root}.\n\t */\n\tcreatePrimitiveTarget(name = ''): PrimitiveTarget {\n\t\treturn new PrimitiveTarget(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Material} attached to this document's {@link Root}. */\n\tcreateMaterial(name = ''): Material {\n\t\treturn new Material(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Texture} attached to this document's {@link Root}. */\n\tcreateTexture(name = ''): Texture {\n\t\treturn new Texture(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Animation} attached to this document's {@link Root}. */\n\tcreateAnimation(name = ''): Animation {\n\t\treturn new Animation(this._graph, name);\n\t}\n\n\t/**\n\t * Creates a new {@link AnimationChannel}. Channels must be attached to an {@link Animation}\n\t * for use and export; they are not otherwise associated with a {@link Root}.\n\t */\n\tcreateAnimationChannel(name = ''): AnimationChannel {\n\t\treturn new AnimationChannel(this._graph, name);\n\t}\n\n\t/**\n\t * Creates a new {@link AnimationSampler}. Samplers must be attached to an {@link Animation}\n\t * for use and export; they are not otherwise associated with a {@link Root}.\n\t */\n\tcreateAnimationSampler(name = ''): AnimationSampler {\n\t\treturn new AnimationSampler(this._graph, name);\n\t}\n\n\t/** Creates a new {@link Accessor} attached to this document's {@link Root}. */\n\tcreateAccessor(name = '', buffer: Buffer | null = null): Accessor {\n\t\tif (!buffer) {\n\t\t\tbuffer = this.getRoot().listBuffers()[0];\n\t\t}\n\t\treturn new Accessor(this._graph, name).setBuffer(buffer);\n\t}\n\n\t/** Creates a new {@link Buffer} attached to this document's {@link Root}. */\n\tcreateBuffer(name = ''): Buffer {\n\t\treturn new Buffer(this._graph, name);\n\t}\n}\n", "import type { GraphEdgeEvent, GraphEvent, GraphNodeEvent } from 'property-graph';\nimport type { PropertyType } from './constants';\nimport type { Document } from './document';\nimport type { ReaderContext, WriterContext } from './io';\nimport { ExtensionProperty } from './properties';\n\n/**\n * # Extension\n *\n * *Base class for all Extensions.*\n *\n * Extensions enhance a glTF {@link Document} with additional features and schema, beyond the core\n * glTF specification. Common extensions may be imported from the `@gltf-transform/extensions`\n * package, or custom extensions may be created by extending this base class.\n *\n * An extension is added to a Document by calling {@link Document.createExtension} with the\n * extension constructor. The extension object may then be used to construct\n * {@link ExtensionProperty} instances, which are attached to properties throughout the Document\n * as prescribed by the extension itself.\n *\n * For more information on available extensions and their usage, see [Extensions](/extensions).\n *\n * Reference:\n * - [glTF → Extensions](https://github.com/KhronosGroup/gltf/blob/main/specification/2.0/README.md#specifying-extensions)\n * - [glTF Extension Registry](https://github.com/KhronosGroup/gltf/blob/main/extensions)\n *\n * @category Extensions\n */\nexport abstract class Extension {\n\t/** Official name of the extension. */\n\tpublic static EXTENSION_NAME: string;\n\t/** Official name of the extension. */\n\tpublic readonly extensionName: string = '';\n\t/**\n\t * Before reading, extension should be called for these {@link Property} types. *Most\n\t * extensions don't need to implement this.*\n\t * @hidden\n\t */\n\tpublic readonly prereadTypes: PropertyType[] = [];\n\t/**\n\t * Before writing, extension should be called for these {@link Property} types. *Most\n\t * extensions don't need to implement this.*\n\t * @hidden\n\t */\n\tpublic readonly prewriteTypes: PropertyType[] = [];\n\n\t/** @hidden Dependency IDs needed to read this extension, to be installed before I/O. */\n\tpublic readonly readDependencies: string[] = [];\n\t/** @hidden Dependency IDs needed to write this extension, to be installed before I/O. */\n\tpublic readonly writeDependencies: string[] = [];\n\n\t/** @hidden */\n\tprotected readonly document: Document;\n\n\t/** @hidden */\n\tprotected required = false;\n\n\t/** @hidden */\n\tprotected properties: Set<ExtensionProperty> = new Set();\n\n\t/** @hidden */\n\tprivate _listener: (event: unknown) => void;\n\n\t/** @hidden */\n\tconstructor(document: Document) {\n\t\tthis.document = document;\n\n\t\tdocument.getRoot()._enableExtension(this);\n\n\t\tthis._listener = (_event: unknown): void => {\n\t\t\tconst event = _event as GraphNodeEvent | GraphEdgeEvent | GraphEvent;\n\t\t\tconst target = event.target as ExtensionProperty | unknown;\n\t\t\tif (target instanceof ExtensionProperty && target.extensionName === this.extensionName) {\n\t\t\t\tif (event.type === 'node:create') this._addExtensionProperty(target);\n\t\t\t\tif (event.type === 'node:dispose') this._removeExtensionProperty(target);\n\t\t\t}\n\t\t};\n\n\t\tconst graph = document.getGraph();\n\t\tgraph.addEventListener('node:create', this._listener);\n\t\tgraph.addEventListener('node:dispose', this._listener);\n\t}\n\n\t/** Disables and removes the extension from the Document. */\n\tpublic dispose(): void {\n\t\tthis.document.getRoot()._disableExtension(this);\n\t\tconst graph = this.document.getGraph();\n\t\tgraph.removeEventListener('node:create', this._listener);\n\t\tgraph.removeEventListener('node:dispose', this._listener);\n\t\tfor (const property of this.properties) {\n\t\t\tproperty.dispose();\n\t\t}\n\t}\n\n\t/** @hidden Performs first-time setup for the extension. Must be idempotent. */\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tpublic static register(): void {}\n\n\t/**\n\t * Indicates to the client whether it is OK to load the asset when this extension is not\n\t * recognized. Optional extensions are generally preferred, if there is not a good reason\n\t * to require a client to completely fail when an extension isn't known.\n\t */\n\tpublic isRequired(): boolean {\n\t\treturn this.required;\n\t}\n\n\t/**\n\t * Indicates to the client whether it is OK to load the asset when this extension is not\n\t * recognized. Optional extensions are generally preferred, if there is not a good reason\n\t * to require a client to completely fail when an extension isn't known.\n\t */\n\tpublic setRequired(required: boolean): this {\n\t\tthis.required = required;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lists all {@link ExtensionProperty} instances associated with, or created by, this\n\t * extension. Includes only instances that are attached to the Document's graph; detached\n\t * instances will be excluded.\n\t */\n\tpublic listProperties(): ExtensionProperty[] {\n\t\treturn Array.from(this.properties);\n\t}\n\n\t/**********************************************************************************************\n\t * ExtensionProperty management.\n\t */\n\n\t/** @internal */\n\tprivate _addExtensionProperty(property: ExtensionProperty): this {\n\t\tthis.properties.add(property);\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tprivate _removeExtensionProperty(property: ExtensionProperty): this {\n\t\tthis.properties.delete(property);\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * I/O implementation.\n\t */\n\n\t/** @hidden Installs dependencies required by the extension. */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tpublic install(key: string, dependency: unknown): this {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Used by the {@link PlatformIO} utilities when reading a glTF asset. This method may\n\t * optionally be implemented by an extension, and should then support any property type\n\t * declared by the Extension's {@link Extension.prereadTypes} list. The Extension will\n\t * be given a ReaderContext instance, and is expected to update either the context or its\n\t * {@link JSONDocument} with resources known to the Extension. *Most extensions don't need to\n\t * implement this.*\n\t * @hidden\n\t */\n\tpublic preread(_readerContext: ReaderContext, _propertyType: PropertyType): this {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Used by the {@link PlatformIO} utilities when writing a glTF asset. This method may\n\t * optionally be implemented by an extension, and should then support any property type\n\t * declared by the Extension's {@link Extension.prewriteTypes} list. The Extension will\n\t * be given a WriterContext instance, and is expected to update either the context or its\n\t * {@link JSONDocument} with resources known to the Extension. *Most extensions don't need to\n\t * implement this.*\n\t * @hidden\n\t */\n\tpublic prewrite(_writerContext: WriterContext, _propertyType: PropertyType): this {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Used by the {@link PlatformIO} utilities when reading a glTF asset. This method must be\n\t * implemented by each extension in order to support reading files. The extension will be\n\t * given a ReaderContext instance, and should update the current {@link Document} accordingly.\n\t * @hidden\n\t */\n\tpublic abstract read(readerContext: ReaderContext): this;\n\n\t/**\n\t * Used by the {@link PlatformIO} utilities when writing a glTF asset. This method must be\n\t * implemented by each extension in order to support writing files. The extension will be\n\t * given a WriterContext instance, and should modify the {@link JSONDocument} output\n\t * accordingly. Adding the extension name to the `extensionsUsed` and `extensionsRequired` list\n\t * is done automatically, and should not be included here.\n\t * @hidden\n\t */\n\tpublic abstract write(writerContext: WriterContext): this;\n}\n", "import type { JSONDocument } from '../json-document';\nimport type {\n\tAccessor,\n\tAnimation,\n\tBuffer,\n\tCamera,\n\tMaterial,\n\tMesh,\n\tNode,\n\tScene,\n\tSkin,\n\tTexture,\n\tTextureInfo,\n} from '../properties';\nimport type { GLTF } from '../types/gltf';\n\n/**\n * Model class providing glTF-Transform objects representing each definition in the glTF file, used\n * by a {@link Writer} and its {@link Extension} implementations. Indices of all properties will be\n * consistent with the glTF file.\n *\n * @hidden\n */\nexport class ReaderContext {\n\tpublic buffers: Buffer[] = [];\n\tpublic bufferViews: Uint8Array[] = [];\n\tpublic bufferViewBuffers: Buffer[] = [];\n\tpublic accessors: Accessor[] = [];\n\tpublic textures: Texture[] = [];\n\tpublic textureInfos: Map<TextureInfo, GLTF.ITextureInfo> = new Map();\n\tpublic materials: Material[] = [];\n\tpublic meshes: Mesh[] = [];\n\tpublic cameras: Camera[] = [];\n\tpublic nodes: Node[] = [];\n\tpublic skins: Skin[] = [];\n\tpublic animations: Animation[] = [];\n\tpublic scenes: Scene[] = [];\n\n\tconstructor(public readonly jsonDoc: JSONDocument) {}\n\n\tpublic setTextureInfo(textureInfo: TextureInfo, textureInfoDef: GLTF.ITextureInfo): void {\n\t\tthis.textureInfos.set(textureInfo, textureInfoDef);\n\n\t\tif (textureInfoDef.texCoord !== undefined) {\n\t\t\ttextureInfo.setTexCoord(textureInfoDef.texCoord);\n\t\t}\n\t\tif (textureInfoDef.extras !== undefined) {\n\t\t\ttextureInfo.setExtras(textureInfoDef.extras);\n\t\t}\n\n\t\tconst textureDef = this.jsonDoc.json.textures![textureInfoDef.index];\n\n\t\tif (textureDef.sampler === undefined) return;\n\n\t\tconst samplerDef = this.jsonDoc.json.samplers![textureDef.sampler];\n\n\t\tif (samplerDef.magFilter !== undefined) {\n\t\t\ttextureInfo.setMagFilter(samplerDef.magFilter);\n\t\t}\n\t\tif (samplerDef.minFilter !== undefined) {\n\t\t\ttextureInfo.setMinFilter(samplerDef.minFilter);\n\t\t}\n\t\tif (samplerDef.wrapS !== undefined) {\n\t\t\ttextureInfo.setWrapS(samplerDef.wrapS);\n\t\t}\n\t\tif (samplerDef.wrapT !== undefined) {\n\t\t\ttextureInfo.setWrapT(samplerDef.wrapT);\n\t\t}\n\t}\n}\n", "import { GLB_BUFFER, PropertyType, TypedArray, mat4, vec3, vec4 } from '../constants';\nimport { Document } from '../document';\nimport type { Extension } from '../extension';\nimport type { JSONDocument } from '../json-document';\nimport { Accessor, AnimationSampler, Camera } from '../properties';\nimport type { GLTF } from '../types/gltf';\nimport { BufferUtils, FileUtils, ILogger, ImageUtils, Logger, MathUtils } from '../utils';\nimport { ReaderContext } from './reader-context';\n\nconst ComponentTypeToTypedArray = {\n\t'5120': Int8Array,\n\t'5121': Uint8Array,\n\t'5122': Int16Array,\n\t'5123': Uint16Array,\n\t'5125': Uint32Array,\n\t'5126': Float32Array,\n};\n\nexport interface ReaderOptions {\n\tlogger?: ILogger;\n\textensions: typeof Extension[];\n\tdependencies: { [key: string]: unknown };\n}\n\nconst DEFAULT_OPTIONS: ReaderOptions = {\n\tlogger: Logger.DEFAULT_INSTANCE,\n\textensions: [],\n\tdependencies: {},\n};\n\n/** @internal */\nexport class GLTFReader {\n\tpublic static read(jsonDoc: JSONDocument, _options: ReaderOptions = DEFAULT_OPTIONS): Document {\n\t\tconst options = { ...DEFAULT_OPTIONS, ..._options } as Required<ReaderOptions>;\n\t\tconst { json } = jsonDoc;\n\t\tconst doc = new Document();\n\n\t\tthis.validate(jsonDoc, options);\n\n\t\t/* Reader context. */\n\n\t\tconst context = new ReaderContext(jsonDoc);\n\n\t\t/** Asset. */\n\n\t\tconst assetDef = json.asset;\n\t\tconst asset = doc.getRoot().getAsset();\n\n\t\tif (assetDef.copyright) asset.copyright = assetDef.copyright;\n\t\tif (assetDef.extras) asset.extras = assetDef.extras;\n\n\t\tif (json.extras !== undefined) {\n\t\t\tdoc.getRoot().setExtras({ ...json.extras });\n\t\t}\n\n\t\t/** Extensions (1/2). */\n\n\t\tconst extensionsUsed = json.extensionsUsed || [];\n\t\tconst extensionsRequired = json.extensionsRequired || [];\n\t\tfor (const Extension of options.extensions) {\n\t\t\tif (extensionsUsed.includes(Extension.EXTENSION_NAME)) {\n\t\t\t\tconst extension = doc\n\t\t\t\t\t.createExtension(Extension as unknown as new (doc: Document) => Extension)\n\t\t\t\t\t.setRequired(extensionsRequired.includes(Extension.EXTENSION_NAME));\n\n\t\t\t\tfor (const key of extension.readDependencies) {\n\t\t\t\t\textension.install(key, options.dependencies[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/** Buffers. */\n\n\t\tconst bufferDefs = json.buffers || [];\n\t\tdoc.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.BUFFER))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.BUFFER));\n\t\tcontext.buffers = bufferDefs.map((bufferDef) => {\n\t\t\tconst buffer = doc.createBuffer(bufferDef.name);\n\n\t\t\tif (bufferDef.extras) buffer.setExtras(bufferDef.extras);\n\n\t\t\tif (bufferDef.uri && bufferDef.uri.indexOf('__') !== 0) {\n\t\t\t\tbuffer.setURI(bufferDef.uri);\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t});\n\n\t\t/** Buffer views. */\n\n\t\tconst bufferViewDefs = json.bufferViews || [];\n\t\tcontext.bufferViewBuffers = bufferViewDefs.map((bufferViewDef, index) => {\n\t\t\tif (!context.bufferViews[index]) {\n\t\t\t\tconst bufferDef = jsonDoc.json.buffers![bufferViewDef.buffer];\n\t\t\t\tconst resource = bufferDef.uri ? jsonDoc.resources[bufferDef.uri] : jsonDoc.resources[GLB_BUFFER];\n\t\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\t\tcontext.bufferViews[index] = BufferUtils.toView(resource, byteOffset, bufferViewDef.byteLength);\n\t\t\t}\n\n\t\t\treturn context.buffers[bufferViewDef.buffer];\n\t\t});\n\n\t\t/** Accessors. */\n\n\t\t// Accessor .count and .componentType properties are inferred dynamically.\n\t\tconst accessorDefs = json.accessors || [];\n\t\tcontext.accessors = accessorDefs.map((accessorDef) => {\n\t\t\tconst buffer = context.bufferViewBuffers[accessorDef.bufferView!];\n\t\t\tconst accessor = doc.createAccessor(accessorDef.name, buffer).setType(accessorDef.type);\n\n\t\t\tif (accessorDef.extras) accessor.setExtras(accessorDef.extras);\n\n\t\t\tif (accessorDef.normalized !== undefined) {\n\t\t\t\taccessor.setNormalized(accessorDef.normalized);\n\t\t\t}\n\n\t\t\t// KHR_draco_mesh_compression and EXT_meshopt_compression.\n\t\t\tif (accessorDef.bufferView === undefined && !accessorDef.sparse) return accessor;\n\n\t\t\tlet array: TypedArray;\n\n\t\t\tif (accessorDef.sparse !== undefined) {\n\t\t\t\tarray = getSparseArray(accessorDef, context);\n\t\t\t} else {\n\t\t\t\tarray = getAccessorArray(accessorDef, context);\n\t\t\t}\n\n\t\t\taccessor.setArray(array);\n\t\t\treturn accessor;\n\t\t});\n\n\t\t/** Textures. */\n\n\t\t// glTF-Transform's \"Texture\" properties correspond 1:1 with glTF \"Image\" properties, and\n\t\t// with image files. The glTF file may contain more one texture per image, where images\n\t\t// are reused with different sampler properties.\n\t\tconst imageDefs = json.images || [];\n\t\tconst textureDefs = json.textures || [];\n\t\tdoc.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.TEXTURE))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.TEXTURE));\n\t\tcontext.textures = imageDefs.map((imageDef) => {\n\t\t\tconst texture = doc.createTexture(imageDef.name);\n\n\t\t\t// glTF Image corresponds 1:1 with glTF-Transform Texture. See `writer.ts`.\n\t\t\tif (imageDef.extras) texture.setExtras(imageDef.extras);\n\n\t\t\tif (imageDef.bufferView !== undefined) {\n\t\t\t\tconst bufferViewDef = json.bufferViews![imageDef.bufferView];\n\t\t\t\tconst bufferDef = jsonDoc.json.buffers![bufferViewDef.buffer];\n\t\t\t\tconst bufferData = bufferDef.uri ? jsonDoc.resources[bufferDef.uri] : jsonDoc.resources[GLB_BUFFER];\n\t\t\t\tconst byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\t\tconst byteLength = bufferViewDef.byteLength;\n\t\t\t\tconst imageData = bufferData.slice(byteOffset, byteOffset + byteLength);\n\t\t\t\ttexture.setImage(imageData);\n\t\t\t} else if (imageDef.uri !== undefined) {\n\t\t\t\ttexture.setImage(jsonDoc.resources[imageDef.uri]);\n\t\t\t\tif (imageDef.uri.indexOf('__') !== 0) {\n\t\t\t\t\ttexture.setURI(imageDef.uri);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (imageDef.mimeType !== undefined) {\n\t\t\t\ttexture.setMimeType(imageDef.mimeType);\n\t\t\t} else if (imageDef.uri) {\n\t\t\t\tconst extension = FileUtils.extension(imageDef.uri);\n\t\t\t\ttexture.setMimeType(ImageUtils.extensionToMimeType(extension));\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t});\n\n\t\t/** Materials. */\n\n\t\tconst materialDefs = json.materials || [];\n\t\tcontext.materials = materialDefs.map((materialDef) => {\n\t\t\tconst material = doc.createMaterial(materialDef.name);\n\n\t\t\tif (materialDef.extras) material.setExtras(materialDef.extras);\n\n\t\t\t// Program state & blending.\n\n\t\t\tif (materialDef.alphaMode !== undefined) {\n\t\t\t\tmaterial.setAlphaMode(materialDef.alphaMode);\n\t\t\t}\n\n\t\t\tif (materialDef.alphaCutoff !== undefined) {\n\t\t\t\tmaterial.setAlphaCutoff(materialDef.alphaCutoff);\n\t\t\t}\n\n\t\t\tif (materialDef.doubleSided !== undefined) {\n\t\t\t\tmaterial.setDoubleSided(materialDef.doubleSided);\n\t\t\t}\n\n\t\t\t// Factors.\n\n\t\t\tconst pbrDef = materialDef.pbrMetallicRoughness || {};\n\n\t\t\tif (pbrDef.baseColorFactor !== undefined) {\n\t\t\t\tmaterial.setBaseColorFactor(pbrDef.baseColorFactor as vec4);\n\t\t\t}\n\n\t\t\tif (materialDef.emissiveFactor !== undefined) {\n\t\t\t\tmaterial.setEmissiveFactor(materialDef.emissiveFactor as vec3);\n\t\t\t}\n\n\t\t\tif (pbrDef.metallicFactor !== undefined) {\n\t\t\t\tmaterial.setMetallicFactor(pbrDef.metallicFactor);\n\t\t\t}\n\n\t\t\tif (pbrDef.roughnessFactor !== undefined) {\n\t\t\t\tmaterial.setRoughnessFactor(pbrDef.roughnessFactor);\n\t\t\t}\n\n\t\t\t// Textures.\n\n\t\t\tif (pbrDef.baseColorTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = pbrDef.baseColorTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setBaseColorTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getBaseColorTextureInfo()!, textureInfoDef);\n\t\t\t}\n\n\t\t\tif (materialDef.emissiveTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = materialDef.emissiveTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setEmissiveTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getEmissiveTextureInfo()!, textureInfoDef);\n\t\t\t}\n\n\t\t\tif (materialDef.normalTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = materialDef.normalTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setNormalTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getNormalTextureInfo()!, textureInfoDef);\n\t\t\t\tif (materialDef.normalTexture.scale !== undefined) {\n\t\t\t\t\tmaterial.setNormalScale(materialDef.normalTexture.scale);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (materialDef.occlusionTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = materialDef.occlusionTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setOcclusionTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getOcclusionTextureInfo()!, textureInfoDef);\n\t\t\t\tif (materialDef.occlusionTexture.strength !== undefined) {\n\t\t\t\t\tmaterial.setOcclusionStrength(materialDef.occlusionTexture.strength);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (pbrDef.metallicRoughnessTexture !== undefined) {\n\t\t\t\tconst textureInfoDef = pbrDef.metallicRoughnessTexture;\n\t\t\t\tconst texture = context.textures[textureDefs[textureInfoDef.index].source!];\n\t\t\t\tmaterial.setMetallicRoughnessTexture(texture);\n\t\t\t\tcontext.setTextureInfo(material.getMetallicRoughnessTextureInfo()!, textureInfoDef);\n\t\t\t}\n\n\t\t\treturn material;\n\t\t});\n\n\t\t/** Meshes. */\n\n\t\tconst meshDefs = json.meshes || [];\n\t\tdoc.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.PRIMITIVE))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.PRIMITIVE));\n\t\tcontext.meshes = meshDefs.map((meshDef) => {\n\t\t\tconst mesh = doc.createMesh(meshDef.name);\n\n\t\t\tif (meshDef.extras) mesh.setExtras(meshDef.extras);\n\n\t\t\tif (meshDef.weights !== undefined) {\n\t\t\t\tmesh.setWeights(meshDef.weights);\n\t\t\t}\n\n\t\t\tconst primitiveDefs = meshDef.primitives || [];\n\t\t\tprimitiveDefs.forEach((primitiveDef) => {\n\t\t\t\tconst primitive = doc.createPrimitive();\n\n\t\t\t\tif (primitiveDef.extras) primitive.setExtras(primitiveDef.extras);\n\n\t\t\t\tif (primitiveDef.material !== undefined) {\n\t\t\t\t\tprimitive.setMaterial(context.materials[primitiveDef.material]);\n\t\t\t\t}\n\n\t\t\t\tif (primitiveDef.mode !== undefined) {\n\t\t\t\t\tprimitive.setMode(primitiveDef.mode);\n\t\t\t\t}\n\n\t\t\t\tfor (const [semantic, index] of Object.entries(primitiveDef.attributes || {})) {\n\t\t\t\t\tprimitive.setAttribute(semantic, context.accessors[index]);\n\t\t\t\t}\n\n\t\t\t\tif (primitiveDef.indices !== undefined) {\n\t\t\t\t\tprimitive.setIndices(context.accessors[primitiveDef.indices]);\n\t\t\t\t}\n\n\t\t\t\tconst targetNames: string[] = (meshDef.extras && (meshDef.extras.targetNames as string[])) || [];\n\t\t\t\tconst targetDefs = primitiveDef.targets || [];\n\t\t\t\ttargetDefs.forEach((targetDef, targetIndex) => {\n\t\t\t\t\tconst targetName = targetNames[targetIndex] || targetIndex.toString();\n\t\t\t\t\tconst target = doc.createPrimitiveTarget(targetName);\n\n\t\t\t\t\tfor (const [semantic, accessorIndex] of Object.entries(targetDef)) {\n\t\t\t\t\t\ttarget.setAttribute(semantic, context.accessors[accessorIndex]);\n\t\t\t\t\t}\n\n\t\t\t\t\tprimitive.addTarget(target);\n\t\t\t\t});\n\n\t\t\t\tmesh.addPrimitive(primitive);\n\t\t\t});\n\n\t\t\treturn mesh;\n\t\t});\n\n\t\t/** Cameras. */\n\n\t\tconst cameraDefs = json.cameras || [];\n\t\tcontext.cameras = cameraDefs.map((cameraDef) => {\n\t\t\tconst camera = doc.createCamera(cameraDef.name).setType(cameraDef.type);\n\n\t\t\tif (cameraDef.extras) camera.setExtras(cameraDef.extras);\n\n\t\t\tif (cameraDef.type === Camera.Type.PERSPECTIVE) {\n\t\t\t\tconst perspectiveDef = cameraDef.perspective!;\n\t\t\t\tcamera.setYFov(perspectiveDef.yfov);\n\t\t\t\tcamera.setZNear(perspectiveDef.znear);\n\t\t\t\tif (perspectiveDef.zfar !== undefined) {\n\t\t\t\t\tcamera.setZFar(perspectiveDef.zfar);\n\t\t\t\t}\n\t\t\t\tif (perspectiveDef.aspectRatio !== undefined) {\n\t\t\t\t\tcamera.setAspectRatio(perspectiveDef.aspectRatio);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst orthoDef = cameraDef.orthographic!;\n\t\t\t\tcamera.setZNear(orthoDef.znear).setZFar(orthoDef.zfar).setXMag(orthoDef.xmag).setYMag(orthoDef.ymag);\n\t\t\t}\n\t\t\treturn camera;\n\t\t});\n\n\t\t/** Nodes. */\n\n\t\tconst nodeDefs = json.nodes || [];\n\n\t\tdoc.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.NODE))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.NODE));\n\n\t\tcontext.nodes = nodeDefs.map((nodeDef) => {\n\t\t\tconst node = doc.createNode(nodeDef.name);\n\n\t\t\tif (nodeDef.extras) node.setExtras(nodeDef.extras);\n\n\t\t\tif (nodeDef.translation !== undefined) {\n\t\t\t\tnode.setTranslation(nodeDef.translation as vec3);\n\t\t\t}\n\n\t\t\tif (nodeDef.rotation !== undefined) {\n\t\t\t\tnode.setRotation(nodeDef.rotation as vec4);\n\t\t\t}\n\n\t\t\tif (nodeDef.scale !== undefined) {\n\t\t\t\tnode.setScale(nodeDef.scale as vec3);\n\t\t\t}\n\n\t\t\tif (nodeDef.matrix !== undefined) {\n\t\t\t\tconst translation = [0, 0, 0] as vec3;\n\t\t\t\tconst rotation = [0, 0, 0, 1] as vec4;\n\t\t\t\tconst scale = [1, 1, 1] as vec3;\n\n\t\t\t\tMathUtils.decompose(nodeDef.matrix as mat4, translation, rotation, scale);\n\n\t\t\t\tnode.setTranslation(translation);\n\t\t\t\tnode.setRotation(rotation);\n\t\t\t\tnode.setScale(scale);\n\t\t\t}\n\n\t\t\tif (nodeDef.weights !== undefined) {\n\t\t\t\tnode.setWeights(nodeDef.weights);\n\t\t\t}\n\n\t\t\t// Attachments (mesh, camera, skin) defined later in reading process.\n\n\t\t\treturn node;\n\t\t});\n\n\t\t/** Skins. */\n\n\t\tconst skinDefs = json.skins || [];\n\t\tcontext.skins = skinDefs.map((skinDef) => {\n\t\t\tconst skin = doc.createSkin(skinDef.name);\n\n\t\t\tif (skinDef.extras) skin.setExtras(skinDef.extras);\n\n\t\t\tif (skinDef.inverseBindMatrices !== undefined) {\n\t\t\t\tskin.setInverseBindMatrices(context.accessors[skinDef.inverseBindMatrices]);\n\t\t\t}\n\n\t\t\tif (skinDef.skeleton !== undefined) {\n\t\t\t\tskin.setSkeleton(context.nodes[skinDef.skeleton]);\n\t\t\t}\n\n\t\t\tfor (const nodeIndex of skinDef.joints) {\n\t\t\t\tskin.addJoint(context.nodes[nodeIndex]);\n\t\t\t}\n\n\t\t\treturn skin;\n\t\t});\n\n\t\t/** Node attachments. */\n\n\t\tnodeDefs.map((nodeDef, nodeIndex) => {\n\t\t\tconst node = context.nodes[nodeIndex];\n\n\t\t\tconst children = nodeDef.children || [];\n\t\t\tchildren.forEach((childIndex) => node.addChild(context.nodes[childIndex]));\n\n\t\t\tif (nodeDef.mesh !== undefined) node.setMesh(context.meshes[nodeDef.mesh]);\n\n\t\t\tif (nodeDef.camera !== undefined) node.setCamera(context.cameras[nodeDef.camera]);\n\n\t\t\tif (nodeDef.skin !== undefined) node.setSkin(context.skins[nodeDef.skin]);\n\t\t});\n\n\t\t/** Animations. */\n\n\t\tconst animationDefs = json.animations || [];\n\t\tcontext.animations = animationDefs.map((animationDef) => {\n\t\t\tconst animation = doc.createAnimation(animationDef.name);\n\n\t\t\tif (animationDef.extras) animation.setExtras(animationDef.extras);\n\n\t\t\tconst samplerDefs = animationDef.samplers || [];\n\t\t\tconst samplers = samplerDefs.map((samplerDef) => {\n\t\t\t\tconst sampler = doc\n\t\t\t\t\t.createAnimationSampler()\n\t\t\t\t\t.setInput(context.accessors[samplerDef.input])\n\t\t\t\t\t.setOutput(context.accessors[samplerDef.output])\n\t\t\t\t\t.setInterpolation(samplerDef.interpolation || AnimationSampler.Interpolation.LINEAR);\n\n\t\t\t\tif (samplerDef.extras) sampler.setExtras(samplerDef.extras);\n\n\t\t\t\tanimation.addSampler(sampler);\n\t\t\t\treturn sampler;\n\t\t\t});\n\n\t\t\tconst channels = animationDef.channels || [];\n\t\t\tchannels.forEach((channelDef) => {\n\t\t\t\tconst channel = doc\n\t\t\t\t\t.createAnimationChannel()\n\t\t\t\t\t.setSampler(samplers[channelDef.sampler])\n\t\t\t\t\t.setTargetPath(channelDef.target.path);\n\n\t\t\t\tif (channelDef.target.node !== undefined) channel.setTargetNode(context.nodes[channelDef.target.node]);\n\t\t\t\tif (channelDef.extras) channel.setExtras(channelDef.extras);\n\n\t\t\t\tanimation.addChannel(channel);\n\t\t\t});\n\n\t\t\treturn animation;\n\t\t});\n\n\t\t/** Scenes. */\n\n\t\tconst sceneDefs = json.scenes || [];\n\n\t\tdoc.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((extension) => extension.prereadTypes.includes(PropertyType.SCENE))\n\t\t\t.forEach((extension) => extension.preread(context, PropertyType.SCENE));\n\n\t\tcontext.scenes = sceneDefs.map((sceneDef) => {\n\t\t\tconst scene = doc.createScene(sceneDef.name);\n\n\t\t\tif (sceneDef.extras) scene.setExtras(sceneDef.extras);\n\n\t\t\tconst children = sceneDef.nodes || [];\n\n\t\t\tchildren.map((nodeIndex) => context.nodes[nodeIndex]).forEach((node) => scene.addChild(node));\n\n\t\t\treturn scene;\n\t\t});\n\n\t\tif (json.scene !== undefined) {\n\t\t\tdoc.getRoot().setDefaultScene(context.scenes[json.scene]);\n\t\t}\n\n\t\t/** Extensions (2/2). */\n\n\t\tdoc.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.forEach((extension) => extension.read(context));\n\n\t\treturn doc;\n\t}\n\n\tprivate static validate(jsonDoc: JSONDocument, options: Required<ReaderOptions>): void {\n\t\tconst json = jsonDoc.json;\n\n\t\tif (json.asset.version !== '2.0') {\n\t\t\tthrow new Error(`Unsupported glTF version, \"${json.asset.version}\".`);\n\t\t}\n\n\t\tif (json.extensionsRequired) {\n\t\t\tfor (const extensionName of json.extensionsRequired) {\n\t\t\t\tif (!options.extensions.find((extension) => extension.EXTENSION_NAME === extensionName)) {\n\t\t\t\t\tthrow new Error(`Missing required extension, \"${extensionName}\".`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (json.extensionsUsed) {\n\t\t\tfor (const extensionName of json.extensionsUsed) {\n\t\t\t\tif (!options.extensions.find((extension) => extension.EXTENSION_NAME === extensionName)) {\n\t\t\t\t\toptions.logger.warn(`Missing optional extension, \"${extensionName}\".`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Returns the contents of an interleaved accessor, as a typed array.\n * @internal\n */\nfunction getInterleavedArray(accessorDef: GLTF.IAccessor, context: ReaderContext): TypedArray {\n\tconst jsonDoc = context.jsonDoc;\n\tconst bufferView = context.bufferViews[accessorDef.bufferView!];\n\tconst bufferViewDef = jsonDoc.json.bufferViews![accessorDef.bufferView!];\n\n\tconst TypedArray = ComponentTypeToTypedArray[accessorDef.componentType];\n\tconst elementSize = Accessor.getElementSize(accessorDef.type);\n\tconst componentSize = TypedArray.BYTES_PER_ELEMENT;\n\tconst accessorByteOffset = accessorDef.byteOffset || 0;\n\n\tconst array = new TypedArray(accessorDef.count * elementSize);\n\tconst view = new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n\tconst byteStride = bufferViewDef.byteStride!;\n\n\tfor (let i = 0; i < accessorDef.count; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tconst byteOffset = accessorByteOffset + i * byteStride + j * componentSize;\n\t\t\tlet value: number;\n\t\t\tswitch (accessorDef.componentType) {\n\t\t\t\tcase Accessor.ComponentType.FLOAT:\n\t\t\t\t\tvalue = view.getFloat32(byteOffset, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.UNSIGNED_INT:\n\t\t\t\t\tvalue = view.getUint32(byteOffset, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.UNSIGNED_SHORT:\n\t\t\t\t\tvalue = view.getUint16(byteOffset, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.UNSIGNED_BYTE:\n\t\t\t\t\tvalue = view.getUint8(byteOffset);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.SHORT:\n\t\t\t\t\tvalue = view.getInt16(byteOffset, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Accessor.ComponentType.BYTE:\n\t\t\t\t\tvalue = view.getInt8(byteOffset);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unexpected componentType \"${accessorDef.componentType}\".`);\n\t\t\t}\n\t\t\tarray[i * elementSize + j] = value;\n\t\t}\n\t}\n\n\treturn array;\n}\n\n/**\n * Returns the contents of an accessor, as a typed array.\n * @internal\n */\nfunction getAccessorArray(accessorDef: GLTF.IAccessor, context: ReaderContext): TypedArray {\n\tconst jsonDoc = context.jsonDoc;\n\tconst bufferView = context.bufferViews[accessorDef.bufferView!];\n\tconst bufferViewDef = jsonDoc.json.bufferViews![accessorDef.bufferView!];\n\n\tconst TypedArray = ComponentTypeToTypedArray[accessorDef.componentType];\n\tconst elementSize = Accessor.getElementSize(accessorDef.type);\n\tconst componentSize = TypedArray.BYTES_PER_ELEMENT;\n\tconst elementStride = elementSize * componentSize;\n\n\t// Interleaved buffer view.\n\tif (bufferViewDef.byteStride !== undefined && bufferViewDef.byteStride !== elementStride) {\n\t\treturn getInterleavedArray(accessorDef, context);\n\t}\n\n\tconst byteOffset = bufferView.byteOffset + (accessorDef.byteOffset || 0);\n\tconst byteLength = accessorDef.count * elementSize * componentSize;\n\n\t// Might optimize this to avoid deep copy later, but it's useful for now and not a known\n\t// bottleneck. See https://github.com/donmccurdy/glTF-Transform/issues/256.\n\treturn new TypedArray(bufferView.buffer.slice(byteOffset, byteOffset + byteLength));\n}\n\n/**\n * Returns the contents of a sparse accessor, as a typed array.\n * @internal\n */\nfunction getSparseArray(accessorDef: GLTF.IAccessor, context: ReaderContext): TypedArray {\n\tconst TypedArray = ComponentTypeToTypedArray[accessorDef.componentType];\n\tconst elementSize = Accessor.getElementSize(accessorDef.type);\n\n\tlet array: TypedArray;\n\tif (accessorDef.bufferView !== undefined) {\n\t\tarray = getAccessorArray(accessorDef, context);\n\t} else {\n\t\tarray = new TypedArray(accessorDef.count * elementSize);\n\t}\n\n\tconst sparseDef = accessorDef.sparse!;\n\tconst count = sparseDef.count;\n\tconst indicesDef = { ...accessorDef, ...sparseDef.indices, count, type: 'SCALAR' };\n\tconst valuesDef = { ...accessorDef, ...sparseDef.values, count };\n\tconst indices = getAccessorArray(indicesDef as GLTF.IAccessor, context);\n\tconst values = getAccessorArray(valuesDef, context);\n\n\t// Override indices given in the sparse data.\n\tfor (let i = 0; i < indicesDef.count; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tarray[indices[i] * elementSize + j] = values[i * elementSize + j];\n\t\t}\n\t}\n\n\treturn array;\n}\n", "import { BufferViewUsage, Format, PropertyType } from '../constants';\nimport type { Document } from '../document';\nimport type { JSONDocument } from '../json-document';\nimport type {\n\tAccessor,\n\tAnimation,\n\tBuffer,\n\tCamera,\n\tMaterial,\n\tMesh,\n\tNode,\n\tProperty,\n\tScene,\n\tSkin,\n\tTexture,\n\tTextureInfo,\n} from '../properties';\nimport type { GLTF } from '../types/gltf';\nimport { ILogger, ImageUtils } from '../utils';\nimport type { WriterOptions } from './writer';\n\ntype PropertyDef = GLTF.IScene | GLTF.INode | GLTF.IMaterial | GLTF.ISkin | GLTF.ITexture;\n\nenum BufferViewTarget {\n\tARRAY_BUFFER = 34962,\n\tELEMENT_ARRAY_BUFFER = 34963,\n}\n\n/**\n * Model class providing writing state to a {@link Writer} and its {@link Extension}\n * implementations.\n *\n * @hidden\n */\nexport class WriterContext {\n\t/** Explicit buffer view targets defined by glTF specification. */\n\tpublic static readonly BufferViewTarget = BufferViewTarget;\n\t/**\n\t * Implicit buffer view usage, not required by glTF specification, but nonetheless useful for\n\t * proper grouping of accessors into buffer views. Additional usages are defined by extensions,\n\t * like `EXT_mesh_gpu_instancing`.\n\t */\n\tpublic static readonly BufferViewUsage = BufferViewUsage;\n\t/** Maps usage type to buffer view target. Usages not mapped have undefined targets. */\n\tpublic static readonly USAGE_TO_TARGET: { [key: string]: BufferViewTarget | undefined } = {\n\t\t[BufferViewUsage.ARRAY_BUFFER]: BufferViewTarget.ARRAY_BUFFER,\n\t\t[BufferViewUsage.ELEMENT_ARRAY_BUFFER]: BufferViewTarget.ELEMENT_ARRAY_BUFFER,\n\t};\n\n\tpublic readonly accessorIndexMap = new Map<Accessor, number>();\n\tpublic readonly animationIndexMap = new Map<Animation, number>();\n\tpublic readonly bufferIndexMap = new Map<Buffer, number>();\n\tpublic readonly cameraIndexMap = new Map<Camera, number>();\n\tpublic readonly skinIndexMap = new Map<Skin, number>();\n\tpublic readonly materialIndexMap = new Map<Material, number>();\n\tpublic readonly meshIndexMap = new Map<Mesh, number>();\n\tpublic readonly nodeIndexMap = new Map<Node, number>();\n\tpublic readonly imageIndexMap = new Map<Texture, number>();\n\tpublic readonly textureDefIndexMap = new Map<string, number>(); // textureDef JSON -> index\n\tpublic readonly textureInfoDefMap = new Map<TextureInfo, GLTF.ITextureInfo>();\n\tpublic readonly samplerDefIndexMap = new Map<string, number>(); // samplerDef JSON -> index\n\tpublic readonly sceneIndexMap = new Map<Scene, number>();\n\n\tpublic readonly imageBufferViews: Uint8Array[] = [];\n\tpublic readonly otherBufferViews = new Map<Buffer, Uint8Array[]>();\n\tpublic readonly otherBufferViewsIndexMap = new Map<Uint8Array, number>();\n\tpublic readonly extensionData: { [key: string]: unknown } = {};\n\n\tpublic bufferURIGenerator: UniqueURIGenerator<Buffer>;\n\tpublic imageURIGenerator: UniqueURIGenerator<Texture>;\n\tpublic logger: ILogger;\n\n\tprivate readonly _accessorUsageMap = new Map<Accessor, BufferViewUsage | string>();\n\tpublic readonly accessorUsageGroupedByParent = new Set<string>(['ARRAY_BUFFER']);\n\tpublic readonly accessorParents = new Map<Property, Set<Accessor>>();\n\n\tconstructor(\n\t\tprivate readonly _doc: Document,\n\t\tpublic readonly jsonDoc: JSONDocument,\n\t\tpublic readonly options: Required<WriterOptions>\n\t) {\n\t\tconst root = _doc.getRoot();\n\t\tconst numBuffers = root.listBuffers().length;\n\t\tconst numImages = root.listTextures().length;\n\t\tthis.bufferURIGenerator = new UniqueURIGenerator(numBuffers > 1, () => options.basename || 'buffer');\n\t\tthis.imageURIGenerator = new UniqueURIGenerator(\n\t\t\tnumImages > 1,\n\t\t\t(texture) => getSlot(_doc, texture) || options.basename || 'texture'\n\t\t);\n\t\tthis.logger = _doc.getLogger();\n\t}\n\n\t/**\n\t * Creates a TextureInfo definition, and any Texture or Sampler definitions it requires. If\n\t * possible, Texture and Sampler definitions are shared.\n\t */\n\tpublic createTextureInfoDef(texture: Texture, textureInfo: TextureInfo): GLTF.ITextureInfo {\n\t\tconst samplerDef = {\n\t\t\tmagFilter: textureInfo.getMagFilter() || undefined,\n\t\t\tminFilter: textureInfo.getMinFilter() || undefined,\n\t\t\twrapS: textureInfo.getWrapS(),\n\t\t\twrapT: textureInfo.getWrapT(),\n\t\t} as GLTF.ISampler;\n\n\t\tconst samplerKey = JSON.stringify(samplerDef);\n\t\tif (!this.samplerDefIndexMap.has(samplerKey)) {\n\t\t\tthis.samplerDefIndexMap.set(samplerKey, this.jsonDoc.json.samplers!.length);\n\t\t\tthis.jsonDoc.json.samplers!.push(samplerDef);\n\t\t}\n\n\t\tconst textureDef = {\n\t\t\tsource: this.imageIndexMap.get(texture),\n\t\t\tsampler: this.samplerDefIndexMap.get(samplerKey),\n\t\t} as GLTF.ITexture;\n\n\t\tconst textureKey = JSON.stringify(textureDef);\n\t\tif (!this.textureDefIndexMap.has(textureKey)) {\n\t\t\tthis.textureDefIndexMap.set(textureKey, this.jsonDoc.json.textures!.length);\n\t\t\tthis.jsonDoc.json.textures!.push(textureDef);\n\t\t}\n\n\t\tconst textureInfoDef = {\n\t\t\tindex: this.textureDefIndexMap.get(textureKey),\n\t\t} as GLTF.ITextureInfo;\n\n\t\tif (textureInfo.getTexCoord() !== 0) {\n\t\t\ttextureInfoDef.texCoord = textureInfo.getTexCoord();\n\t\t}\n\t\tif (Object.keys(textureInfo.getExtras()).length > 0) {\n\t\t\ttextureInfoDef.extras = textureInfo.getExtras();\n\t\t}\n\n\t\tthis.textureInfoDefMap.set(textureInfo, textureInfoDef);\n\n\t\treturn textureInfoDef;\n\t}\n\n\tpublic createPropertyDef(property: Property): PropertyDef {\n\t\tconst def = {} as PropertyDef;\n\t\tif (property.getName()) {\n\t\t\tdef.name = property.getName();\n\t\t}\n\t\tif (Object.keys(property.getExtras()).length > 0) {\n\t\t\tdef.extras = property.getExtras();\n\t\t}\n\t\treturn def;\n\t}\n\n\tpublic createAccessorDef(accessor: Accessor): GLTF.IAccessor {\n\t\tconst accessorDef = this.createPropertyDef(accessor) as GLTF.IAccessor;\n\t\taccessorDef.type = accessor.getType();\n\t\taccessorDef.componentType = accessor.getComponentType();\n\t\taccessorDef.count = accessor.getCount();\n\n\t\tconst needsBounds = this._doc\n\t\t\t.getGraph()\n\t\t\t.listParentEdges(accessor)\n\t\t\t.some(\n\t\t\t\t(edge) =>\n\t\t\t\t\t(edge.getName() === 'attributes' && edge.getAttributes().key === 'POSITION') ||\n\t\t\t\t\tedge.getName() === 'input'\n\t\t\t);\n\t\tif (needsBounds) {\n\t\t\taccessorDef.max = accessor.getMax([]).map(Math.fround);\n\t\t\taccessorDef.min = accessor.getMin([]).map(Math.fround);\n\t\t}\n\n\t\tif (accessor.getNormalized()) {\n\t\t\taccessorDef.normalized = accessor.getNormalized();\n\t\t}\n\n\t\treturn accessorDef;\n\t}\n\n\tpublic createImageData(imageDef: GLTF.IImage, data: Uint8Array, texture: Texture): void {\n\t\tif (this.options.format === Format.GLB) {\n\t\t\tthis.imageBufferViews.push(data);\n\t\t\timageDef.bufferView = this.jsonDoc.json.bufferViews!.length;\n\t\t\tthis.jsonDoc.json.bufferViews!.push({\n\t\t\t\tbuffer: 0,\n\t\t\t\tbyteOffset: -1, // determined while iterating buffers, in Writer.ts.\n\t\t\t\tbyteLength: data.byteLength,\n\t\t\t});\n\t\t} else {\n\t\t\tconst extension = ImageUtils.mimeTypeToExtension(texture.getMimeType());\n\t\t\timageDef.uri = this.imageURIGenerator.createURI(texture, extension);\n\t\t\tthis.jsonDoc.resources[imageDef.uri] = data;\n\t\t}\n\t}\n\n\t/**\n\t * Returns implicit usage type of the given accessor, related to grouping accessors into\n\t * buffer views. Usage is a superset of buffer view target, including ARRAY_BUFFER and\n\t * ELEMENT_ARRAY_BUFFER, but also usages that do not match GPU buffer view targets such as\n\t * IBMs. Additional usages are defined by extensions, like `EXT_mesh_gpu_instancing`.\n\t */\n\tpublic getAccessorUsage(accessor: Accessor): BufferViewUsage | string {\n\t\tconst cachedUsage = this._accessorUsageMap.get(accessor);\n\t\tif (cachedUsage) return cachedUsage;\n\n\t\tfor (const edge of this._doc.getGraph().listParentEdges(accessor)) {\n\t\t\tconst { usage } = edge.getAttributes() as { usage: BufferViewUsage | undefined };\n\n\t\t\tif (usage) return usage;\n\n\t\t\tif (edge.getParent().propertyType !== PropertyType.ROOT) {\n\t\t\t\tthis._doc.getLogger().warn(`Missing attribute \".usage\" on edge, \"${edge.getName()}\".`);\n\t\t\t}\n\t\t}\n\n\t\t// Group accessors with no specified usage into a miscellaneous buffer view.\n\t\treturn WriterContext.BufferViewUsage.OTHER;\n\t}\n\n\t/**\n\t * Sets usage for the given accessor. Some accessor types must be grouped into\n\t * buffer views with like accessors. This includes the specified buffer view \"targets\", but\n\t * also implicit usage like IBMs or instanced mesh attributes. If unspecified, an accessor\n\t * will be grouped with other accessors of unspecified usage.\n\t */\n\tpublic addAccessorToUsageGroup(accessor: Accessor, usage: BufferViewUsage | string): this {\n\t\tconst prevUsage = this._accessorUsageMap.get(accessor);\n\t\tif (prevUsage && prevUsage !== usage) {\n\t\t\tthrow new Error(`Accessor with usage \"${prevUsage}\" cannot be reused as \"${usage}\".`);\n\t\t}\n\t\tthis._accessorUsageMap.set(accessor, usage);\n\t\treturn this;\n\t}\n\n\t/** Lists accessors grouped by usage. Accessors with unspecified usage are not included. */\n\tpublic listAccessorUsageGroups(): { [key: string]: Accessor[] } {\n\t\tconst result = {} as { [key: string]: Accessor[] };\n\t\tfor (const [accessor, usage] of Array.from(this._accessorUsageMap.entries())) {\n\t\t\tresult[usage] = result[usage] || [];\n\t\t\tresult[usage].push(accessor);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport class UniqueURIGenerator<T extends Texture | Buffer> {\n\tprivate counter = {} as Record<string, number>;\n\n\tconstructor(private readonly multiple: boolean, private readonly basename: (t: T) => string) {}\n\n\tpublic createURI(object: T, extension: string): string {\n\t\tif (object.getURI()) {\n\t\t\treturn object.getURI();\n\t\t} else if (!this.multiple) {\n\t\t\treturn `${this.basename(object)}.${extension}`;\n\t\t} else {\n\t\t\tconst basename = this.basename(object);\n\t\t\tthis.counter[basename] = this.counter[basename] || 1;\n\t\t\treturn `${basename}_${this.counter[basename]++}.${extension}`;\n\t\t}\n\t}\n}\n\n/** Returns the first slot (by name) to which the texture is assigned. */\nfunction getSlot(document: Document, texture: Texture): string {\n\tconst edge = document\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.find((edge) => edge.getParent() !== document.getRoot());\n\treturn edge ? edge.getName().replace(/texture$/i, '') : '';\n}\n", "import { Format, GLB_BUFFER, PropertyType, VERSION, VertexLayout } from '../constants';\nimport type { Document } from '../document';\nimport type { Extension } from '../extension';\nimport type { GraphEdge } from 'property-graph';\nimport type { JSONDocument } from '../json-document';\nimport { Accessor, AnimationSampler, Camera, Material, Property } from '../properties';\nimport type { GLTF } from '../types/gltf';\nimport { BufferUtils, Logger, MathUtils } from '../utils';\nimport { WriterContext } from './writer-context';\n\nconst { BufferViewUsage } = WriterContext;\n\nexport interface WriterOptions {\n\tformat: Format;\n\tlogger?: Logger;\n\tbasename?: string;\n\tvertexLayout?: VertexLayout;\n\tdependencies?: { [key: string]: unknown };\n\textensions?: typeof Extension[];\n}\n\n/** @internal */\nexport class GLTFWriter {\n\tpublic static write(doc: Document, options: Required<WriterOptions>): JSONDocument {\n\t\tconst root = doc.getRoot();\n\t\tconst json = {\n\t\t\tasset: { generator: `glTF-Transform ${VERSION}`, ...root.getAsset() },\n\t\t\textras: { ...root.getExtras() },\n\t\t} as GLTF.IGLTF;\n\t\tconst jsonDoc = { json, resources: {} } as JSONDocument;\n\n\t\tconst context = new WriterContext(doc, jsonDoc, options);\n\t\tconst logger = options.logger || Logger.DEFAULT_INSTANCE;\n\n\t\t/* Extensions (1/2). */\n\n\t\t// Extensions present on the Document are not written unless they are also registered with\n\t\t// the I/O class. This ensures that setup in `extension.register()` is completed, and\n\t\t// allows a Document to be written with specific extensions disabled.\n\t\tconst extensionsRegistered = new Set(options.extensions.map((ext) => ext.EXTENSION_NAME));\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.filter((ext) => extensionsRegistered.has(ext.extensionName));\n\t\tconst extensionsRequired = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsRequired()\n\t\t\t.filter((ext) => extensionsRegistered.has(ext.extensionName));\n\n\t\tif (extensionsUsed.length < doc.getRoot().listExtensionsUsed().length) {\n\t\t\tlogger.warn('Some extensions were not registered for I/O, and will not be written.');\n\t\t}\n\n\t\tfor (const extension of extensionsUsed) {\n\t\t\tfor (const key of extension.writeDependencies) {\n\t\t\t\textension.install(key, options.dependencies[key]);\n\t\t\t}\n\t\t}\n\n\t\t/* Utilities. */\n\n\t\tinterface BufferViewResult {\n\t\t\tbyteLength: number;\n\t\t\tbuffers: Uint8Array[];\n\t\t}\n\n\t\t/**\n\t\t * Pack a group of accessors into a sequential buffer view. Appends accessor and buffer view\n\t\t * definitions to the root JSON lists.\n\t\t *\n\t\t * @param accessors Accessors to be included.\n\t\t * @param bufferIndex Buffer to write to.\n\t\t * @param bufferByteOffset Current offset into the buffer, accounting for other buffer views.\n\t\t * @param bufferViewTarget (Optional) target use of the buffer view.\n\t\t */\n\t\tfunction concatAccessors(\n\t\t\taccessors: Accessor[],\n\t\t\tbufferIndex: number,\n\t\t\tbufferByteOffset: number,\n\t\t\tbufferViewTarget?: number\n\t\t): BufferViewResult {\n\t\t\tconst buffers: Uint8Array[] = [];\n\t\t\tlet byteLength = 0;\n\n\t\t\t// Create accessor definitions, determining size of final buffer view.\n\t\t\tfor (const accessor of accessors) {\n\t\t\t\tconst accessorDef = context.createAccessorDef(accessor);\n\t\t\t\taccessorDef.bufferView = json.bufferViews!.length;\n\n\t\t\t\tconst accessorArray = accessor.getArray()!;\n\t\t\t\tconst data = BufferUtils.pad(BufferUtils.toView(accessorArray));\n\t\t\t\taccessorDef.byteOffset = byteLength;\n\t\t\t\tbyteLength += data.byteLength;\n\t\t\t\tbuffers.push(data);\n\n\t\t\t\tcontext.accessorIndexMap.set(accessor, json.accessors!.length);\n\t\t\t\tjson.accessors!.push(accessorDef);\n\t\t\t}\n\n\t\t\t// Create buffer view definition.\n\t\t\tconst bufferViewData = BufferUtils.concat(buffers);\n\t\t\tconst bufferViewDef: GLTF.IBufferView = {\n\t\t\t\tbuffer: bufferIndex,\n\t\t\t\tbyteOffset: bufferByteOffset,\n\t\t\t\tbyteLength: bufferViewData.byteLength,\n\t\t\t};\n\t\t\tif (bufferViewTarget) bufferViewDef.target = bufferViewTarget;\n\t\t\tjson.bufferViews!.push(bufferViewDef);\n\n\t\t\treturn { buffers, byteLength };\n\t\t}\n\n\t\t/**\n\t\t * Pack a group of accessors into an interleaved buffer view. Appends accessor and buffer\n\t\t * view definitions to the root JSON lists. Buffer view target is implicitly attribute data.\n\t\t *\n\t\t * References:\n\t\t * - [Apple • Best Practices for Working with Vertex Data](https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html)\n\t\t * - [Khronos • Vertex Specification Best Practices](https://www.khronos.org/opengl/wiki/Vertex_Specification_Best_Practices)\n\t\t *\n\t\t * @param accessors Accessors to be included.\n\t\t * @param bufferIndex Buffer to write to.\n\t\t * @param bufferByteOffset Offset into the buffer, accounting for other buffer views.\n\t\t */\n\t\tfunction interleaveAccessors(\n\t\t\taccessors: Accessor[],\n\t\t\tbufferIndex: number,\n\t\t\tbufferByteOffset: number\n\t\t): BufferViewResult {\n\t\t\tconst vertexCount = accessors[0].getCount();\n\t\t\tlet byteStride = 0;\n\n\t\t\t// Create accessor definitions, determining size and stride of final buffer view.\n\t\t\tfor (const accessor of accessors) {\n\t\t\t\tconst accessorDef = context.createAccessorDef(accessor);\n\t\t\t\taccessorDef.bufferView = json.bufferViews!.length;\n\t\t\t\taccessorDef.byteOffset = byteStride;\n\n\t\t\t\tconst elementSize = accessor.getElementSize();\n\t\t\t\tconst componentSize = accessor.getComponentSize();\n\t\t\t\tbyteStride += BufferUtils.padNumber(elementSize * componentSize);\n\n\t\t\t\tcontext.accessorIndexMap.set(accessor, json.accessors!.length);\n\t\t\t\tjson.accessors!.push(accessorDef);\n\t\t\t}\n\n\t\t\t// Allocate interleaved buffer view.\n\t\t\tconst byteLength = vertexCount * byteStride;\n\t\t\tconst buffer = new ArrayBuffer(byteLength);\n\t\t\tconst view = new DataView(buffer);\n\n\t\t\t// Write interleaved accessor data to the buffer view.\n\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\tlet vertexByteOffset = 0;\n\t\t\t\tfor (const accessor of accessors) {\n\t\t\t\t\tconst elementSize = accessor.getElementSize();\n\t\t\t\t\tconst componentSize = accessor.getComponentSize();\n\t\t\t\t\tconst componentType = accessor.getComponentType();\n\t\t\t\t\tconst array = accessor.getArray()!;\n\t\t\t\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\t\t\t\tconst viewByteOffset = i * byteStride + vertexByteOffset + j * componentSize;\n\t\t\t\t\t\tconst value = array[i * elementSize + j];\n\t\t\t\t\t\tswitch (componentType) {\n\t\t\t\t\t\t\tcase Accessor.ComponentType.FLOAT:\n\t\t\t\t\t\t\t\tview.setFloat32(viewByteOffset, value, true);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.BYTE:\n\t\t\t\t\t\t\t\tview.setInt8(viewByteOffset, value);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.SHORT:\n\t\t\t\t\t\t\t\tview.setInt16(viewByteOffset, value, true);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.UNSIGNED_BYTE:\n\t\t\t\t\t\t\t\tview.setUint8(viewByteOffset, value);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.UNSIGNED_SHORT:\n\t\t\t\t\t\t\t\tview.setUint16(viewByteOffset, value, true);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Accessor.ComponentType.UNSIGNED_INT:\n\t\t\t\t\t\t\t\tview.setUint32(viewByteOffset, value, true);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error('Unexpected component type: ' + componentType);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvertexByteOffset += BufferUtils.padNumber(elementSize * componentSize);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create buffer view definition.\n\t\t\tconst bufferViewDef: GLTF.IBufferView = {\n\t\t\t\tbuffer: bufferIndex,\n\t\t\t\tbyteOffset: bufferByteOffset,\n\t\t\t\tbyteLength: byteLength,\n\t\t\t\tbyteStride: byteStride,\n\t\t\t\ttarget: WriterContext.BufferViewTarget.ARRAY_BUFFER,\n\t\t\t};\n\t\t\tjson.bufferViews!.push(bufferViewDef);\n\n\t\t\treturn { byteLength, buffers: [new Uint8Array(buffer)] };\n\t\t}\n\n\t\t/* Data use pre-processing. */\n\n\t\tconst accessorRefs = new Map<Accessor, GraphEdge<Property, Accessor>[]>();\n\n\t\t// Gather all accessors, creating a map to look up their uses.\n\t\tfor (const ref of doc.getGraph().listEdges()) {\n\t\t\tif (ref.getParent() === root) continue;\n\n\t\t\tconst child = ref.getChild();\n\n\t\t\tif (child instanceof Accessor) {\n\t\t\t\tconst uses = accessorRefs.get(child) || [];\n\t\t\t\tuses.push(ref as GraphEdge<Property, Accessor>);\n\t\t\t\taccessorRefs.set(child, uses);\n\t\t\t}\n\t\t}\n\n\t\tjson.accessors = [];\n\t\tjson.bufferViews = [];\n\n\t\t/* Textures. */\n\n\t\t// glTF-Transform's \"Texture\" properties correspond 1:1 with glTF \"Image\" properties, and\n\t\t// with image files. The glTF file may contain more one texture per image, where images\n\t\t// are reused with different sampler properties.\n\t\tjson.samplers = [];\n\t\tjson.textures = [];\n\t\tjson.images = root.listTextures().map((texture, textureIndex) => {\n\t\t\tconst imageDef = context.createPropertyDef(texture) as GLTF.IImage;\n\n\t\t\tif (texture.getMimeType()) {\n\t\t\t\timageDef.mimeType = texture.getMimeType();\n\t\t\t}\n\n\t\t\tconst image = texture.getImage();\n\t\t\tif (image) {\n\t\t\t\tcontext.createImageData(imageDef, image, texture);\n\t\t\t}\n\n\t\t\tcontext.imageIndexMap.set(texture, textureIndex);\n\t\t\treturn imageDef;\n\t\t});\n\n\t\t/* Accessors. */\n\n\t\textensionsUsed\n\t\t\t.filter((extension) => extension.prewriteTypes.includes(PropertyType.ACCESSOR))\n\t\t\t.forEach((extension) => extension.prewrite(context, PropertyType.ACCESSOR));\n\t\troot.listAccessors().forEach((accessor) => {\n\t\t\t// Attributes are grouped and interleaved in one buffer view per mesh primitive.\n\t\t\t// Indices for all primitives are grouped into a single buffer view. IBMs are grouped\n\t\t\t// into a single buffer view. Other usage (if specified by extensions) also goes into\n\t\t\t// a dedicated buffer view. Everything else goes into a miscellaneous buffer view.\n\n\t\t\t// Certain accessor usage should group data into buffer views by the accessor parent.\n\t\t\t// The `accessorParents` map uses the first parent of each accessor for this purpose.\n\t\t\tconst groupByParent = context.accessorUsageGroupedByParent;\n\t\t\tconst accessorParents = context.accessorParents;\n\n\t\t\t// Skip if already written by an extension.\n\t\t\tif (context.accessorIndexMap.has(accessor)) return;\n\n\t\t\t// Assign usage for core accessor usage types (explicit targets and implicit usage).\n\t\t\tconst accessorEdges = accessorRefs.get(accessor) || [];\n\t\t\tconst usage = context.getAccessorUsage(accessor);\n\t\t\tcontext.addAccessorToUsageGroup(accessor, usage);\n\n\t\t\t// For accessor usage that requires grouping by parent (vertex and instance\n\t\t\t// attributes) organize buffer views accordingly.\n\t\t\tif (groupByParent.has(usage)) {\n\t\t\t\tconst parent = accessorEdges[0].getParent();\n\t\t\t\tconst parentAccessors = accessorParents.get(parent) || new Set<Accessor>();\n\t\t\t\tparentAccessors.add(accessor);\n\t\t\t\taccessorParents.set(parent, parentAccessors);\n\t\t\t}\n\t\t});\n\n\t\t/* Buffers, buffer views. */\n\n\t\textensionsUsed\n\t\t\t.filter((extension) => extension.prewriteTypes.includes(PropertyType.BUFFER))\n\t\t\t.forEach((extension) => extension.prewrite(context, PropertyType.BUFFER));\n\n\t\tconst hasBinaryResources =\n\t\t\troot.listAccessors().length > 0 || root.listTextures().length > 0 || context.otherBufferViews.size > 0;\n\t\tif (hasBinaryResources && root.listBuffers().length === 0) {\n\t\t\tthrow new Error('Buffer required for Document resources, but none was found.');\n\t\t}\n\n\t\tjson.buffers = [];\n\t\troot.listBuffers().forEach((buffer, index) => {\n\t\t\tconst bufferDef = context.createPropertyDef(buffer) as GLTF.IBuffer;\n\t\t\tconst groupByParent = context.accessorUsageGroupedByParent;\n\t\t\tconst accessorParents = context.accessorParents;\n\n\t\t\tconst bufferAccessors = buffer\n\t\t\t\t.listParents()\n\t\t\t\t.filter((property) => property instanceof Accessor) as Accessor[];\n\t\t\tconst bufferAccessorsSet = new Set(bufferAccessors);\n\n\t\t\t// Write accessor groups to buffer views.\n\n\t\t\tconst buffers: Uint8Array[] = [];\n\t\t\tconst bufferIndex = json.buffers!.length;\n\t\t\tlet bufferByteLength = 0;\n\n\t\t\tconst usageGroups = context.listAccessorUsageGroups();\n\n\t\t\tfor (const usage in usageGroups) {\n\t\t\t\tif (groupByParent.has(usage)) {\n\t\t\t\t\t// Accessors grouped by (first) parent, including vertex and instance\n\t\t\t\t\t// attributes.\n\t\t\t\t\tfor (const parentAccessors of Array.from(accessorParents.values())) {\n\t\t\t\t\t\tconst accessors = Array.from(parentAccessors)\n\t\t\t\t\t\t\t.filter((a) => bufferAccessorsSet.has(a))\n\t\t\t\t\t\t\t.filter((a) => context.getAccessorUsage(a) === usage);\n\t\t\t\t\t\tif (!accessors.length) continue;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tusage !== BufferViewUsage.ARRAY_BUFFER ||\n\t\t\t\t\t\t\toptions.vertexLayout === VertexLayout.INTERLEAVED\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// Case 1: Non-vertex data OR interleaved vertex data.\n\n\t\t\t\t\t\t\t// Instanced data is not interleaved, see:\n\t\t\t\t\t\t\t// https://github.com/KhronosGroup/glTF/pull/1888\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\tusage === BufferViewUsage.ARRAY_BUFFER\n\t\t\t\t\t\t\t\t\t? interleaveAccessors(accessors, bufferIndex, bufferByteLength)\n\t\t\t\t\t\t\t\t\t: concatAccessors(accessors, bufferIndex, bufferByteLength);\n\t\t\t\t\t\t\tbufferByteLength += result.byteLength;\n\t\t\t\t\t\t\tbuffers.push(...result.buffers);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Case 2: Non-interleaved vertex data.\n\n\t\t\t\t\t\t\tfor (const accessor of accessors) {\n\t\t\t\t\t\t\t\t// We 'interleave' a single accessor because the method pads to\n\t\t\t\t\t\t\t\t// 4-byte boundaries, which concatAccessors() does not.\n\t\t\t\t\t\t\t\tconst result = interleaveAccessors([accessor], bufferIndex, bufferByteLength);\n\t\t\t\t\t\t\t\tbufferByteLength += result.byteLength;\n\t\t\t\t\t\t\t\tbuffers.push(...result.buffers);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Accessors concatenated end-to-end, including indices, IBMs, and other data.\n\t\t\t\t\tconst accessors = usageGroups[usage].filter((a) => bufferAccessorsSet.has(a));\n\t\t\t\t\tif (!accessors.length) continue;\n\n\t\t\t\t\tconst target =\n\t\t\t\t\t\tusage === BufferViewUsage.ELEMENT_ARRAY_BUFFER\n\t\t\t\t\t\t\t? WriterContext.BufferViewTarget.ELEMENT_ARRAY_BUFFER\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\tconst result = concatAccessors(accessors, bufferIndex, bufferByteLength, target);\n\t\t\t\t\tbufferByteLength += result.byteLength;\n\t\t\t\t\tbuffers.push(...result.buffers);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We only support embedded images in GLB, where the embedded buffer must be the first.\n\t\t\t// Additional buffers are currently left empty (see EXT_meshopt_compression fallback).\n\t\t\tif (context.imageBufferViews.length && index === 0) {\n\t\t\t\tfor (let i = 0; i < context.imageBufferViews.length; i++) {\n\t\t\t\t\tjson.bufferViews![json.images![i].bufferView!].byteOffset = bufferByteLength;\n\t\t\t\t\tbufferByteLength += context.imageBufferViews[i].byteLength;\n\t\t\t\t\tbuffers.push(context.imageBufferViews[i]);\n\n\t\t\t\t\tif (bufferByteLength % 8) {\n\t\t\t\t\t\t// See: https://github.com/KhronosGroup/glTF/issues/1935\n\t\t\t\t\t\tconst imagePadding = 8 - (bufferByteLength % 8);\n\t\t\t\t\t\tbufferByteLength += imagePadding;\n\t\t\t\t\t\tbuffers.push(new Uint8Array(imagePadding));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (context.otherBufferViews.has(buffer)) {\n\t\t\t\tfor (const data of context.otherBufferViews.get(buffer)!) {\n\t\t\t\t\tjson.bufferViews!.push({\n\t\t\t\t\t\tbuffer: bufferIndex,\n\t\t\t\t\t\tbyteOffset: bufferByteLength,\n\t\t\t\t\t\tbyteLength: data.byteLength,\n\t\t\t\t\t});\n\t\t\t\t\tcontext.otherBufferViewsIndexMap.set(data, json.bufferViews!.length - 1);\n\t\t\t\t\tbufferByteLength += data.byteLength;\n\t\t\t\t\tbuffers.push(data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bufferByteLength) {\n\t\t\t\t// Assign buffer URI.\n\t\t\t\tlet uri: string;\n\t\t\t\tif (options.format === Format.GLB) {\n\t\t\t\t\turi = GLB_BUFFER;\n\t\t\t\t} else {\n\t\t\t\t\turi = context.bufferURIGenerator.createURI(buffer, 'bin');\n\t\t\t\t\tbufferDef.uri = uri;\n\t\t\t\t}\n\n\t\t\t\t// Write buffer views to buffer.\n\t\t\t\tbufferDef.byteLength = bufferByteLength;\n\t\t\t\tjsonDoc.resources[uri] = BufferUtils.concat(buffers);\n\t\t\t}\n\n\t\t\tjson.buffers!.push(bufferDef);\n\t\t\tcontext.bufferIndexMap.set(buffer, index);\n\t\t});\n\n\t\tif (root.listAccessors().find((a) => !a.getBuffer())) {\n\t\t\tlogger.warn('Skipped writing one or more Accessors: no Buffer assigned.');\n\t\t}\n\n\t\t/* Materials. */\n\n\t\tjson.materials = root.listMaterials().map((material, index) => {\n\t\t\tconst materialDef = context.createPropertyDef(material) as GLTF.IMaterial;\n\n\t\t\t// Program state & blending.\n\n\t\t\tif (material.getAlphaMode() !== Material.AlphaMode.OPAQUE) {\n\t\t\t\tmaterialDef.alphaMode = material.getAlphaMode();\n\t\t\t}\n\t\t\tif (material.getAlphaMode() === Material.AlphaMode.MASK) {\n\t\t\t\tmaterialDef.alphaCutoff = material.getAlphaCutoff();\n\t\t\t}\n\t\t\tif (material.getDoubleSided()) materialDef.doubleSided = true;\n\n\t\t\t// Factors.\n\n\t\t\tmaterialDef.pbrMetallicRoughness = {};\n\t\t\tif (!MathUtils.eq(material.getBaseColorFactor(), [1, 1, 1, 1])) {\n\t\t\t\tmaterialDef.pbrMetallicRoughness.baseColorFactor = material.getBaseColorFactor();\n\t\t\t}\n\t\t\tif (!MathUtils.eq(material.getEmissiveFactor(), [0, 0, 0])) {\n\t\t\t\tmaterialDef.emissiveFactor = material.getEmissiveFactor();\n\t\t\t}\n\t\t\tif (material.getRoughnessFactor() !== 1) {\n\t\t\t\tmaterialDef.pbrMetallicRoughness.roughnessFactor = material.getRoughnessFactor();\n\t\t\t}\n\t\t\tif (material.getMetallicFactor() !== 1) {\n\t\t\t\tmaterialDef.pbrMetallicRoughness.metallicFactor = material.getMetallicFactor();\n\t\t\t}\n\n\t\t\t// Textures.\n\n\t\t\tif (material.getBaseColorTexture()) {\n\t\t\t\tconst texture = material.getBaseColorTexture()!;\n\t\t\t\tconst textureInfo = material.getBaseColorTextureInfo()!;\n\t\t\t\tmaterialDef.pbrMetallicRoughness.baseColorTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t}\n\n\t\t\tif (material.getEmissiveTexture()) {\n\t\t\t\tconst texture = material.getEmissiveTexture()!;\n\t\t\t\tconst textureInfo = material.getEmissiveTextureInfo()!;\n\t\t\t\tmaterialDef.emissiveTexture = context.createTextureInfoDef(texture, textureInfo);\n\t\t\t}\n\n\t\t\tif (material.getNormalTexture()) {\n\t\t\t\tconst texture = material.getNormalTexture()!;\n\t\t\t\tconst textureInfo = material.getNormalTextureInfo()!;\n\t\t\t\tconst textureInfoDef = context.createTextureInfoDef(\n\t\t\t\t\ttexture,\n\t\t\t\t\ttextureInfo\n\t\t\t\t) as GLTF.IMaterialNormalTextureInfo;\n\t\t\t\tif (material.getNormalScale() !== 1) {\n\t\t\t\t\ttextureInfoDef.scale = material.getNormalScale();\n\t\t\t\t}\n\t\t\t\tmaterialDef.normalTexture = textureInfoDef;\n\t\t\t}\n\n\t\t\tif (material.getOcclusionTexture()) {\n\t\t\t\tconst texture = material.getOcclusionTexture()!;\n\t\t\t\tconst textureInfo = material.getOcclusionTextureInfo()!;\n\t\t\t\tconst textureInfoDef = context.createTextureInfoDef(\n\t\t\t\t\ttexture,\n\t\t\t\t\ttextureInfo\n\t\t\t\t) as GLTF.IMaterialOcclusionTextureInfo;\n\t\t\t\tif (material.getOcclusionStrength() !== 1) {\n\t\t\t\t\ttextureInfoDef.strength = material.getOcclusionStrength();\n\t\t\t\t}\n\t\t\t\tmaterialDef.occlusionTexture = textureInfoDef;\n\t\t\t}\n\n\t\t\tif (material.getMetallicRoughnessTexture()) {\n\t\t\t\tconst texture = material.getMetallicRoughnessTexture()!;\n\t\t\t\tconst textureInfo = material.getMetallicRoughnessTextureInfo()!;\n\t\t\t\tmaterialDef.pbrMetallicRoughness.metallicRoughnessTexture = context.createTextureInfoDef(\n\t\t\t\t\ttexture,\n\t\t\t\t\ttextureInfo\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcontext.materialIndexMap.set(material, index);\n\t\t\treturn materialDef;\n\t\t});\n\n\t\t/* Meshes. */\n\n\t\tjson.meshes = root.listMeshes().map((mesh, index) => {\n\t\t\tconst meshDef = context.createPropertyDef(mesh) as GLTF.IMesh;\n\n\t\t\tlet targetNames: string[] | null = null;\n\n\t\t\tmeshDef.primitives = mesh.listPrimitives().map((primitive) => {\n\t\t\t\tconst primitiveDef: GLTF.IMeshPrimitive = { attributes: {} };\n\n\t\t\t\tprimitiveDef.mode = primitive.getMode();\n\n\t\t\t\tconst material = primitive.getMaterial();\n\t\t\t\tif (material) {\n\t\t\t\t\tprimitiveDef.material = context.materialIndexMap.get(material);\n\t\t\t\t}\n\n\t\t\t\tif (Object.keys(primitive.getExtras()).length) {\n\t\t\t\t\tprimitiveDef.extras = primitive.getExtras();\n\t\t\t\t}\n\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tprimitiveDef.indices = context.accessorIndexMap.get(indices);\n\t\t\t\t}\n\n\t\t\t\tfor (const semantic of primitive.listSemantics()) {\n\t\t\t\t\tprimitiveDef.attributes[semantic] = context.accessorIndexMap.get(\n\t\t\t\t\t\tprimitive.getAttribute(semantic)!\n\t\t\t\t\t)!;\n\t\t\t\t}\n\n\t\t\t\tfor (const target of primitive.listTargets()) {\n\t\t\t\t\tconst targetDef = {} as { [name: string]: number };\n\n\t\t\t\t\tfor (const semantic of target.listSemantics()) {\n\t\t\t\t\t\ttargetDef[semantic] = context.accessorIndexMap.get(target.getAttribute(semantic)!)!;\n\t\t\t\t\t}\n\n\t\t\t\t\tprimitiveDef.targets = primitiveDef.targets || [];\n\t\t\t\t\tprimitiveDef.targets.push(targetDef);\n\t\t\t\t}\n\n\t\t\t\tif (primitive.listTargets().length && !targetNames) {\n\t\t\t\t\ttargetNames = primitive.listTargets().map((target) => target.getName());\n\t\t\t\t}\n\n\t\t\t\treturn primitiveDef;\n\t\t\t});\n\n\t\t\tif (mesh.getWeights().length) {\n\t\t\t\tmeshDef.weights = mesh.getWeights();\n\t\t\t}\n\n\t\t\tif (targetNames) {\n\t\t\t\tmeshDef.extras = meshDef.extras || {};\n\t\t\t\tmeshDef.extras['targetNames'] = targetNames;\n\t\t\t}\n\n\t\t\tcontext.meshIndexMap.set(mesh, index);\n\t\t\treturn meshDef;\n\t\t});\n\n\t\t/** Cameras. */\n\n\t\tjson.cameras = root.listCameras().map((camera, index) => {\n\t\t\tconst cameraDef = context.createPropertyDef(camera) as GLTF.ICamera;\n\t\t\tcameraDef.type = camera.getType();\n\t\t\tif (cameraDef.type === Camera.Type.PERSPECTIVE) {\n\t\t\t\tcameraDef.perspective = {\n\t\t\t\t\tznear: camera.getZNear(),\n\t\t\t\t\tzfar: camera.getZFar(),\n\t\t\t\t\tyfov: camera.getYFov(),\n\t\t\t\t};\n\t\t\t\tconst aspectRatio = camera.getAspectRatio();\n\t\t\t\tif (aspectRatio !== null) {\n\t\t\t\t\tcameraDef.perspective.aspectRatio = aspectRatio;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcameraDef.orthographic = {\n\t\t\t\t\tznear: camera.getZNear(),\n\t\t\t\t\tzfar: camera.getZFar(),\n\t\t\t\t\txmag: camera.getXMag(),\n\t\t\t\t\tymag: camera.getYMag(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcontext.cameraIndexMap.set(camera, index);\n\t\t\treturn cameraDef;\n\t\t});\n\n\t\t/* Nodes. */\n\n\t\tjson.nodes = root.listNodes().map((node, index) => {\n\t\t\tconst nodeDef = context.createPropertyDef(node) as GLTF.INode;\n\n\t\t\tif (!MathUtils.eq(node.getTranslation(), [0, 0, 0])) {\n\t\t\t\tnodeDef.translation = node.getTranslation();\n\t\t\t}\n\n\t\t\tif (!MathUtils.eq(node.getRotation(), [0, 0, 0, 1])) {\n\t\t\t\tnodeDef.rotation = node.getRotation();\n\t\t\t}\n\n\t\t\tif (!MathUtils.eq(node.getScale(), [1, 1, 1])) {\n\t\t\t\tnodeDef.scale = node.getScale();\n\t\t\t}\n\n\t\t\tif (node.getWeights().length) {\n\t\t\t\tnodeDef.weights = node.getWeights();\n\t\t\t}\n\n\t\t\t// Attachments (mesh, camera, skin) defined later in writing process.\n\n\t\t\tcontext.nodeIndexMap.set(node, index);\n\t\t\treturn nodeDef;\n\t\t});\n\n\t\t/** Skins. */\n\n\t\tjson.skins = root.listSkins().map((skin, index) => {\n\t\t\tconst skinDef = context.createPropertyDef(skin) as GLTF.ISkin;\n\n\t\t\tconst inverseBindMatrices = skin.getInverseBindMatrices();\n\t\t\tif (inverseBindMatrices) {\n\t\t\t\tskinDef.inverseBindMatrices = context.accessorIndexMap.get(inverseBindMatrices);\n\t\t\t}\n\n\t\t\tconst skeleton = skin.getSkeleton();\n\t\t\tif (skeleton) {\n\t\t\t\tskinDef.skeleton = context.nodeIndexMap.get(skeleton);\n\t\t\t}\n\n\t\t\tskinDef.joints = skin.listJoints().map((joint) => context.nodeIndexMap.get(joint)!);\n\n\t\t\tcontext.skinIndexMap.set(skin, index);\n\t\t\treturn skinDef;\n\t\t});\n\n\t\t/** Node attachments. */\n\n\t\troot.listNodes().forEach((node, index) => {\n\t\t\tconst nodeDef = json.nodes![index];\n\n\t\t\tconst mesh = node.getMesh();\n\t\t\tif (mesh) {\n\t\t\t\tnodeDef.mesh = context.meshIndexMap.get(mesh);\n\t\t\t}\n\n\t\t\tconst camera = node.getCamera();\n\t\t\tif (camera) {\n\t\t\t\tnodeDef.camera = context.cameraIndexMap.get(camera);\n\t\t\t}\n\n\t\t\tconst skin = node.getSkin();\n\t\t\tif (skin) {\n\t\t\t\tnodeDef.skin = context.skinIndexMap.get(skin);\n\t\t\t}\n\n\t\t\tif (node.listChildren().length > 0) {\n\t\t\t\tnodeDef.children = node.listChildren().map((node) => context.nodeIndexMap.get(node)!);\n\t\t\t}\n\t\t});\n\n\t\t/** Animations. */\n\n\t\tjson.animations = root.listAnimations().map((animation, index) => {\n\t\t\tconst animationDef = context.createPropertyDef(animation) as GLTF.IAnimation;\n\n\t\t\tconst samplerIndexMap: Map<AnimationSampler, number> = new Map();\n\n\t\t\tanimationDef.samplers = animation.listSamplers().map((sampler, samplerIndex) => {\n\t\t\t\tconst samplerDef = context.createPropertyDef(sampler) as GLTF.IAnimationSampler;\n\t\t\t\tsamplerDef.input = context.accessorIndexMap.get(sampler.getInput()!)!;\n\t\t\t\tsamplerDef.output = context.accessorIndexMap.get(sampler.getOutput()!)!;\n\t\t\t\tsamplerDef.interpolation = sampler.getInterpolation();\n\t\t\t\tsamplerIndexMap.set(sampler, samplerIndex);\n\t\t\t\treturn samplerDef;\n\t\t\t});\n\n\t\t\tanimationDef.channels = animation.listChannels().map((channel) => {\n\t\t\t\tconst channelDef = context.createPropertyDef(channel) as GLTF.IAnimationChannel;\n\t\t\t\tchannelDef.sampler = samplerIndexMap.get(channel.getSampler()!)!;\n\t\t\t\tchannelDef.target = {\n\t\t\t\t\tnode: context.nodeIndexMap.get(channel.getTargetNode()!)!,\n\t\t\t\t\tpath: channel.getTargetPath()!,\n\t\t\t\t};\n\t\t\t\treturn channelDef;\n\t\t\t});\n\n\t\t\tcontext.animationIndexMap.set(animation, index);\n\t\t\treturn animationDef;\n\t\t});\n\n\t\t/* Scenes. */\n\n\t\tjson.scenes = root.listScenes().map((scene, index) => {\n\t\t\tconst sceneDef = context.createPropertyDef(scene) as GLTF.IScene;\n\t\t\tsceneDef.nodes = scene.listChildren().map((node) => context.nodeIndexMap.get(node)!);\n\t\t\tcontext.sceneIndexMap.set(scene, index);\n\t\t\treturn sceneDef;\n\t\t});\n\n\t\tconst defaultScene = root.getDefaultScene();\n\t\tif (defaultScene) {\n\t\t\tjson.scene = root.listScenes().indexOf(defaultScene);\n\t\t}\n\n\t\t/* Extensions (2/2). */\n\n\t\tjson.extensionsUsed = extensionsUsed.map((ext) => ext.extensionName);\n\t\tjson.extensionsRequired = extensionsRequired.map((ext) => ext.extensionName);\n\t\textensionsUsed.forEach((extension) => extension.write(context));\n\n\t\t//\n\n\t\tclean(json as unknown as Record<string, unknown>);\n\n\t\treturn jsonDoc;\n\t}\n}\n\n/**\n * Removes empty and null values from an object.\n * @param object\n * @internal\n */\nfunction clean(object: Record<string, unknown>): void {\n\tconst unused: string[] = [];\n\n\tfor (const key in object) {\n\t\tconst value = object[key];\n\t\tif (Array.isArray(value) && value.length === 0) {\n\t\t\tunused.push(key);\n\t\t} else if (value === null || value === '') {\n\t\t\tunused.push(key);\n\t\t} else if (value && typeof value === 'object' && Object.keys(value).length === 0) {\n\t\t\tunused.push(key);\n\t\t}\n\t}\n\n\tfor (const key of unused) {\n\t\tdelete object[key];\n\t}\n}\n", "import { Format, GLB_BUFFER, VertexLayout } from '../constants';\nimport type { Document } from '../document';\nimport type { Extension } from '../extension';\nimport type { JSONDocument } from '../json-document';\nimport type { GLTF } from '../types/gltf';\nimport { BufferUtils, FileUtils, HTTPUtils, ILogger, Logger, uuid } from '../utils/';\nimport { GLTFReader } from './reader';\nimport { GLTFWriter, WriterOptions } from './writer';\n\nenum ChunkType {\n\tJSON = 0x4e4f534a,\n\tBIN = 0x004e4942,\n}\n\ntype PublicWriterOptions = Partial<Pick<WriterOptions, 'format' | 'basename'>>;\n\n/**\n * # PlatformIO\n *\n * *Abstract I/O service.*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path.\n * Methods are also available for converting in-memory representations of raw glTF files, both\n * binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * For platform-specific implementations, see {@link NodeIO}, {@link WebIO}, and {@link DenoIO}.\n *\n * @category I/O\n */\nexport abstract class PlatformIO {\n\tprotected _logger: ILogger = Logger.DEFAULT_INSTANCE;\n\tprivate _extensions = new Set<typeof Extension>();\n\tprivate _dependencies: { [key: string]: unknown } = {};\n\tprivate _vertexLayout = VertexLayout.INTERLEAVED;\n\n\t/** @hidden */\n\tpublic lastReadBytes = 0;\n\n\t/** @hidden */\n\tpublic lastWriteBytes = 0;\n\n\t/** Sets the {@link Logger} used by this I/O instance. Defaults to Logger.DEFAULT_INSTANCE. */\n\tpublic setLogger(logger: ILogger): this {\n\t\tthis._logger = logger;\n\t\treturn this;\n\t}\n\n\t/** Registers extensions, enabling I/O class to read and write glTF assets requiring them. */\n\tpublic registerExtensions(extensions: typeof Extension[]): this {\n\t\tfor (const extension of extensions) {\n\t\t\tthis._extensions.add(extension);\n\t\t\textension.register();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** Registers dependencies used (e.g. by extensions) in the I/O process. */\n\tpublic registerDependencies(dependencies: { [key: string]: unknown }): this {\n\t\tObject.assign(this._dependencies, dependencies);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vertex layout method used by this I/O instance. Defaults to\n\t * VertexLayout.INTERLEAVED.\n\t */\n\tpublic setVertexLayout(layout: VertexLayout): this {\n\t\tthis._vertexLayout = layout;\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Abstract.\n\t */\n\n\tprotected abstract readURI(uri: string, type: 'view'): Promise<Uint8Array>;\n\tprotected abstract readURI(uri: string, type: 'text'): Promise<string>;\n\tprotected abstract readURI(uri: string, type: 'view' | 'text'): Promise<Uint8Array | string>;\n\n\tprotected abstract resolve(base: string, path: string): string;\n\tprotected abstract dirname(uri: string): string;\n\n\t/**********************************************************************************************\n\t * Public Read API.\n\t */\n\n\t/** Reads a {@link Document} from the given URI. */\n\tpublic async read(uri: string): Promise<Document> {\n\t\treturn await this.readJSON(await this.readAsJSON(uri));\n\t}\n\n\t/** Loads a URI and returns a {@link JSONDocument} struct, without parsing. */\n\tpublic async readAsJSON(uri: string): Promise<JSONDocument> {\n\t\tconst isGLB = uri.match(/^data:application\\/octet-stream;/) || this.detectFormat(uri) === Format.GLB;\n\t\treturn isGLB ? this._readGLB(uri) : this._readGLTF(uri);\n\t}\n\n\t/** Converts glTF-formatted JSON and a resource map to a {@link Document}. */\n\tpublic async readJSON(jsonDoc: JSONDocument): Promise<Document> {\n\t\tjsonDoc = this._copyJSON(jsonDoc);\n\t\tthis._readResourcesInternal(jsonDoc);\n\t\treturn GLTFReader.read(jsonDoc, {\n\t\t\textensions: Array.from(this._extensions),\n\t\t\tdependencies: this._dependencies,\n\t\t\tlogger: this._logger,\n\t\t});\n\t}\n\n\t/** Converts a GLB-formatted Uint8Array to a {@link JSONDocument}. */\n\tpublic async binaryToJSON(glb: Uint8Array): Promise<JSONDocument> {\n\t\tconst jsonDoc = this._binaryToJSON(BufferUtils.assertView(glb));\n\t\tthis._readResourcesInternal(jsonDoc);\n\t\tconst json = jsonDoc.json;\n\n\t\t// Check for external references, which can't be resolved by this method.\n\t\tif (json.buffers && json.buffers.some((bufferDef) => isExternalBuffer(jsonDoc, bufferDef))) {\n\t\t\tthrow new Error('Cannot resolve external buffers with binaryToJSON().');\n\t\t} else if (json.images && json.images.some((imageDef) => isExternalImage(jsonDoc, imageDef))) {\n\t\t\tthrow new Error('Cannot resolve external images with binaryToJSON().');\n\t\t}\n\n\t\treturn jsonDoc;\n\t}\n\n\t/** Converts a GLB-formatted Uint8Array to a {@link Document}. */\n\tpublic async readBinary(glb: Uint8Array): Promise<Document> {\n\t\treturn this.readJSON(await this.binaryToJSON(BufferUtils.assertView(glb)));\n\t}\n\n\t/**********************************************************************************************\n\t * Public Write API.\n\t */\n\n\t/** Converts a {@link Document} to glTF-formatted JSON and a resource map. */\n\tpublic async writeJSON(doc: Document, _options: PublicWriterOptions = {}): Promise<JSONDocument> {\n\t\tif (_options.format === Format.GLB && doc.getRoot().listBuffers().length > 1) {\n\t\t\tthrow new Error('GLB must have 0–1 buffers.');\n\t\t}\n\t\treturn GLTFWriter.write(doc, {\n\t\t\tformat: _options.format || Format.GLTF,\n\t\t\tbasename: _options.basename || '',\n\t\t\tlogger: this._logger,\n\t\t\tvertexLayout: this._vertexLayout,\n\t\t\tdependencies: { ...this._dependencies },\n\t\t\textensions: Array.from(this._extensions),\n\t\t} as Required<WriterOptions>);\n\t}\n\n\t/** Converts a {@link Document} to a GLB-formatted Uint8Array. */\n\tpublic async writeBinary(doc: Document): Promise<Uint8Array> {\n\t\tconst { json, resources } = await this.writeJSON(doc, { format: Format.GLB });\n\n\t\tconst header = new Uint32Array([0x46546c67, 2, 12]);\n\n\t\tconst jsonText = JSON.stringify(json);\n\t\tconst jsonChunkData = BufferUtils.pad(BufferUtils.encodeText(jsonText), 0x20);\n\t\tconst jsonChunkHeader = BufferUtils.toView(new Uint32Array([jsonChunkData.byteLength, 0x4e4f534a]));\n\t\tconst jsonChunk = BufferUtils.concat([jsonChunkHeader, jsonChunkData]);\n\t\theader[header.length - 1] += jsonChunk.byteLength;\n\n\t\tconst binBuffer = Object.values(resources)[0];\n\t\tif (!binBuffer || !binBuffer.byteLength) {\n\t\t\treturn BufferUtils.concat([BufferUtils.toView(header), jsonChunk]);\n\t\t}\n\n\t\tconst binChunkData = BufferUtils.pad(binBuffer, 0x00);\n\t\tconst binChunkHeader = BufferUtils.toView(new Uint32Array([binChunkData.byteLength, 0x004e4942]));\n\t\tconst binChunk = BufferUtils.concat([binChunkHeader, binChunkData]);\n\t\theader[header.length - 1] += binChunk.byteLength;\n\n\t\treturn BufferUtils.concat([BufferUtils.toView(header), jsonChunk, binChunk]);\n\t}\n\n\t/**********************************************************************************************\n\t * Internal.\n\t */\n\n\t/** @hidden */\n\tprotected detectFormat(uri: string): Format {\n\t\t// Overriden by WebIO, which only uses HTTPUtils.\n\t\tconst extension = HTTPUtils.isAbsoluteURL(uri) ? HTTPUtils.extension(uri) : FileUtils.extension(uri);\n\t\treturn extension === 'glb' ? Format.GLB : Format.GLTF;\n\t}\n\n\tprivate async _readGLTF(uri: string): Promise<JSONDocument> {\n\t\tthis.lastReadBytes = 0;\n\t\tconst jsonContent = await this.readURI(uri, 'text');\n\t\tthis.lastReadBytes += jsonContent.length;\n\t\tconst jsonDoc: JSONDocument = { json: JSON.parse(jsonContent), resources: {} };\n\t\t// Read external resources first, before Data URIs are replaced.\n\t\tawait this._readResourcesExternal(jsonDoc, this.dirname(uri));\n\t\tthis._readResourcesInternal(jsonDoc);\n\t\treturn jsonDoc;\n\t}\n\n\tprivate async _readGLB(uri: string): Promise<JSONDocument> {\n\t\tconst view = await this.readURI(uri, 'view');\n\t\tthis.lastReadBytes = view.byteLength;\n\t\tconst jsonDoc = this._binaryToJSON(view);\n\t\t// Read external resources first, before Data URIs are replaced.\n\t\tawait this._readResourcesExternal(jsonDoc, this.dirname(uri));\n\t\tthis._readResourcesInternal(jsonDoc);\n\t\treturn jsonDoc;\n\t}\n\n\tprivate async _readResourcesExternal(jsonDoc: JSONDocument, base: string): Promise<void> {\n\t\tconst images = jsonDoc.json.images || [];\n\t\tconst buffers = jsonDoc.json.buffers || [];\n\t\tconst pendingResources: Array<Promise<void>> = [...images, ...buffers].map(\n\t\t\tasync (resource: GLTF.IBuffer | GLTF.IImage): Promise<void> => {\n\t\t\t\tconst uri = resource.uri;\n\t\t\t\tif (!uri || uri.match(/data:/)) return Promise.resolve();\n\n\t\t\t\tjsonDoc.resources[uri] = await this.readURI(this.resolve(base, uri), 'view');\n\t\t\t\tthis.lastReadBytes += jsonDoc.resources[uri].byteLength;\n\t\t\t}\n\t\t);\n\t\tawait Promise.all(pendingResources);\n\t}\n\n\tprivate _readResourcesInternal(jsonDoc: JSONDocument): void {\n\t\t// NOTICE: This method may be called more than once during the loading\n\t\t// process (e.g. WebIO.read) and should handle that safely.\n\n\t\tfunction resolveResource(resource: GLTF.IBuffer | GLTF.IImage) {\n\t\t\tif (!resource.uri) return;\n\n\t\t\tif (resource.uri in jsonDoc.resources) {\n\t\t\t\tBufferUtils.assertView(jsonDoc.resources[resource.uri]);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (resource.uri.match(/data:/)) {\n\t\t\t\t// Rewrite Data URIs to something short and unique.\n\t\t\t\tconst resourceUUID = `__${uuid()}.${FileUtils.extension(resource.uri)}`;\n\t\t\t\tjsonDoc.resources[resourceUUID] = BufferUtils.createBufferFromDataURI(resource.uri);\n\t\t\t\tresource.uri = resourceUUID;\n\t\t\t}\n\t\t}\n\n\t\t// Unpack images.\n\t\tconst images = jsonDoc.json.images || [];\n\t\timages.forEach((image: GLTF.IImage) => {\n\t\t\tif (image.bufferView === undefined && image.uri === undefined) {\n\t\t\t\tthrow new Error('Missing resource URI or buffer view.');\n\t\t\t}\n\n\t\t\tresolveResource(image);\n\t\t});\n\n\t\t// Unpack buffers.\n\t\tconst buffers = jsonDoc.json.buffers || [];\n\t\tbuffers.forEach(resolveResource);\n\t}\n\n\t/**\n\t * Creates a shallow copy of glTF-formatted {@link JSONDocument}.\n\t *\n\t * Images, Buffers, and Resources objects are deep copies so that PlatformIO can safely\n\t * modify them during the parsing process. Other properties are shallow copies, and buffers\n\t * are passed by reference.\n\t */\n\tprivate _copyJSON(jsonDoc: JSONDocument): JSONDocument {\n\t\tconst { images, buffers } = jsonDoc.json;\n\n\t\tjsonDoc = { json: { ...jsonDoc.json }, resources: { ...jsonDoc.resources } };\n\n\t\tif (images) {\n\t\t\tjsonDoc.json.images = images.map((image) => ({ ...image }));\n\t\t}\n\t\tif (buffers) {\n\t\t\tjsonDoc.json.buffers = buffers.map((buffer) => ({ ...buffer }));\n\t\t}\n\n\t\treturn jsonDoc;\n\t}\n\n\t/** Internal version of binaryToJSON; does not warn about external resources. */\n\tprivate _binaryToJSON(glb: Uint8Array): JSONDocument {\n\t\t// Decode and verify GLB header.\n\t\tconst header = new Uint32Array(glb.buffer, glb.byteOffset, 3);\n\t\tif (header[0] !== 0x46546c67) {\n\t\t\tthrow new Error('Invalid glTF asset.');\n\t\t} else if (header[1] !== 2) {\n\t\t\tthrow new Error(`Unsupported glTF binary version, \"${header[1]}\".`);\n\t\t}\n\n\t\t// Decode JSON chunk.\n\n\t\tconst jsonChunkHeader = new Uint32Array(glb.buffer, glb.byteOffset + 12, 2);\n\t\tif (jsonChunkHeader[1] !== ChunkType.JSON) {\n\t\t\tthrow new Error('Missing required GLB JSON chunk.');\n\t\t}\n\n\t\tconst jsonByteOffset = 20;\n\t\tconst jsonByteLength = jsonChunkHeader[0];\n\t\tconst jsonText = BufferUtils.decodeText(BufferUtils.toView(glb, jsonByteOffset, jsonByteLength));\n\t\tconst json = JSON.parse(jsonText) as GLTF.IGLTF;\n\n\t\t// Decode BIN chunk.\n\n\t\tconst binByteOffset = jsonByteOffset + jsonByteLength;\n\t\tif (glb.byteLength <= binByteOffset) {\n\t\t\treturn { json, resources: {} };\n\t\t}\n\n\t\tconst binChunkHeader = new Uint32Array(glb.buffer, glb.byteOffset + binByteOffset, 2);\n\t\tif (binChunkHeader[1] !== ChunkType.BIN) {\n\t\t\tthrow new Error('Expected GLB BIN in second chunk.');\n\t\t}\n\n\t\tconst binByteLength = binChunkHeader[0];\n\t\tconst binBuffer = BufferUtils.toView(glb, binByteOffset + 8, binByteLength);\n\n\t\treturn { json, resources: { [GLB_BUFFER]: binBuffer } };\n\t}\n}\n\nfunction isExternalBuffer(jsonDocument: JSONDocument, bufferDef: GLTF.IBuffer): boolean {\n\treturn bufferDef.uri !== undefined && !(bufferDef.uri in jsonDocument.resources);\n}\n\nfunction isExternalImage(jsonDocument: JSONDocument, imageDef: GLTF.IImage): boolean {\n\treturn imageDef.uri !== undefined && !(imageDef.uri in jsonDocument.resources) && imageDef.bufferView === undefined;\n}\n", "import { Format } from '../constants';\nimport type { Document } from '../document';\nimport { FileUtils } from '../utils/';\nimport { PlatformIO } from './platform-io';\nimport { HTTPUtils } from '../utils';\n\n/**\n * # NodeIO\n *\n * *I/O service for Node.js.*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path.\n * Methods are also available for converting in-memory representations of raw glTF files, both\n * binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * Usage:\n *\n * ```typescript\n * const { NodeIO } = require('@gltf-transform/core');\n *\n * const io = new NodeIO();\n *\n * // Read.\n * let document;\n * document = await io.read('model.glb'); // → Document\n * document = await io.readBinary(glb);   // Uint8Array → Document\n *\n * // Write.\n * await io.write('model.glb', document);      // → void\n * const glb = await io.writeBinary(document); // Document → Uint8Array\n * ```\n *\n * By default, NodeIO can only read/write paths on disk. To enable HTTP requests, provide a Fetch\n * API implementation (such as [`node-fetch`](https://www.npmjs.com/package/node-fetch)) and enable\n * {@link setAllowHTTP}. HTTP requests may optionally be configured with\n * [RequestInit](https://developer.mozilla.org/en-US/docs/Web/API/fetch#parameters) parameters.\n *\n * ```typescript\n * import fetch from 'node-fetch';\n *\n * const io = new NodeIO(fetch, {headers: {...}}).setAllowHTTP(true);\n *\n * const document = await io.read('https://example.com/path/to/model.glb');\n * ```\n *\n * @category I/O\n */\nexport class NodeIO extends PlatformIO {\n\tprivate readonly _fs;\n\tprivate readonly _path;\n\tprivate readonly _fetch: typeof fetch | null;\n\tprivate readonly _fetchConfig: RequestInit;\n\n\tprivate _fetchEnabled = false;\n\n\t/**\n\t * Constructs a new NodeIO service. Instances are reusable. By default, only NodeIO can only\n\t * read/write paths on disk. To enable HTTP requests, provide a Fetch API implementation and\n\t * enable {@link setAllowHTTP}.\n\t *\n\t * @param fetch Implementation of Fetch API.\n\t * @param fetchConfig Configuration object for Fetch API.\n\t */\n\tconstructor(_fetch: unknown = null, _fetchConfig = HTTPUtils.DEFAULT_INIT) {\n\t\tsuper();\n\t\t// Excluded from browser builds with 'package.browser' field.\n\t\tthis._fs = require('fs').promises;\n\t\tthis._path = require('path');\n\t\tthis._fetch = _fetch as typeof fetch | null;\n\t\tthis._fetchConfig = _fetchConfig;\n\t}\n\n\tpublic setAllowHTTP(allow: boolean): this {\n\t\tif (allow && !this._fetch) {\n\t\t\tthrow new Error('NodeIO requires a Fetch API implementation for HTTP requests.');\n\t\t}\n\t\tthis._fetchEnabled = allow;\n\t\treturn this;\n\t}\n\n\tprotected async readURI(uri: string, type: 'view'): Promise<Uint8Array>;\n\tprotected async readURI(uri: string, type: 'text'): Promise<string>;\n\tprotected async readURI(uri: string, type: 'view' | 'text'): Promise<Uint8Array | string> {\n\t\tif (HTTPUtils.isAbsoluteURL(uri)) {\n\t\t\tif (!this._fetchEnabled || !this._fetch) {\n\t\t\t\tthrow new Error('Network request blocked. Allow HTTP requests explicitly, if needed.');\n\t\t\t}\n\n\t\t\tconst response = await this._fetch(uri, this._fetchConfig);\n\t\t\tswitch (type) {\n\t\t\t\tcase 'view':\n\t\t\t\t\treturn new Uint8Array(await response.arrayBuffer());\n\t\t\t\tcase 'text':\n\t\t\t\t\treturn response.text();\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (type) {\n\t\t\t\tcase 'view':\n\t\t\t\t\treturn this._fs.readFile(uri);\n\t\t\t\tcase 'text':\n\t\t\t\t\treturn this._fs.readFile(uri, 'utf8');\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected resolve(base: string, path: string): string {\n\t\tif (HTTPUtils.isAbsoluteURL(base) || HTTPUtils.isAbsoluteURL(path)) {\n\t\t\treturn HTTPUtils.resolve(base, path);\n\t\t}\n\t\treturn this._path.resolve(base, path);\n\t}\n\n\tprotected dirname(uri: string): string {\n\t\tif (HTTPUtils.isAbsoluteURL(uri)) {\n\t\t\treturn HTTPUtils.dirname(uri);\n\t\t}\n\t\treturn this._path.dirname(uri);\n\t}\n\n\t/**********************************************************************************************\n\t * Public.\n\t */\n\n\t/** Writes a {@link Document} instance to a local path. */\n\tpublic async write(uri: string, doc: Document): Promise<void> {\n\t\tconst isGLB = !!uri.match(/\\.glb$/);\n\t\tawait (isGLB ? this._writeGLB(uri, doc) : this._writeGLTF(uri, doc));\n\t}\n\n\t/**********************************************************************************************\n\t * Private.\n\t */\n\n\t/** @internal */\n\tprivate async _writeGLTF(uri: string, doc: Document): Promise<void> {\n\t\tthis.lastWriteBytes = 0;\n\t\tconst { json, resources } = await this.writeJSON(doc, {\n\t\t\tformat: Format.GLTF,\n\t\t\tbasename: FileUtils.basename(uri),\n\t\t});\n\t\tconst { _fs: fs, _path: path } = this;\n\t\tconst dir = path.dirname(uri);\n\t\tconst jsonContent = JSON.stringify(json, null, 2);\n\t\tthis.lastWriteBytes += jsonContent.length;\n\t\tawait fs.writeFile(uri, jsonContent);\n\t\tconst pending = Object.keys(resources).map(async (resourceURI) => {\n\t\t\tif (HTTPUtils.isAbsoluteURL(resourceURI)) {\n\t\t\t\tif (HTTPUtils.extension(resourceURI) === 'bin') {\n\t\t\t\t\tthrow new Error(`Cannot write buffer to path \"${resourceURI}\".`);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst resource = Buffer.from(resources[resourceURI]);\n\t\t\tawait fs.writeFile(path.join(dir, resourceURI), resource);\n\t\t\tthis.lastWriteBytes += resource.byteLength;\n\t\t});\n\t\tawait Promise.all(pending);\n\t}\n\n\t/** @internal */\n\tprivate async _writeGLB(uri: string, doc: Document): Promise<void> {\n\t\tconst buffer = Buffer.from(await this.writeBinary(doc));\n\t\tawait this._fs.writeFile(uri, buffer);\n\t\tthis.lastWriteBytes = buffer.byteLength;\n\t}\n}\n", "import { PlatformIO } from './platform-io';\n\ninterface Path {\n\tresolve(base: string, path: string): string;\n\tdirname(uri: string): string;\n}\n\n/**\n * # DenoIO\n *\n * *I/O service for [Deno](https://deno.land/).*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path.\n * Methods are also available for converting in-memory representations of raw glTF files, both\n * binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * _*NOTICE:* Support for the Deno environment is currently experimental. See\n * [glTF-Transform#457](https://github.com/donmccurdy/glTF-Transform/issues/457)._\n *\n * Usage:\n *\n * ```typescript\n * import { DenoIO } from 'https://esm.sh/@gltf-transform/core';\n * import * as path from 'https://deno.land/std/path/mod.ts';\n *\n * const io = new DenoIO(path);\n *\n * // Read.\n * let document;\n * document = io.read('model.glb');  // → Document\n * document = io.readBinary(glb);    // Uint8Array → Document\n *\n * // Write.\n * const glb = io.writeBinary(document);  // Document → Uint8Array\n * ```\n *\n * @category I/O\n */\nexport class DenoIO extends PlatformIO {\n\tprivate _path: Path;\n\n\tconstructor(path: unknown) {\n\t\tsuper();\n\t\tthis._path = path as Path;\n\t}\n\n\tprotected async readURI(uri: string, type: 'view'): Promise<Uint8Array>;\n\tprotected async readURI(uri: string, type: 'text'): Promise<string>;\n\tprotected async readURI(uri: string, type: 'view' | 'text'): Promise<Uint8Array | string> {\n\t\t// TODO(cleanup): The @ts-ignore rules below are necessary for typedoc, but not for normal\n\t\t// compilation with microbundle. Clean this up when possible.\n\t\tswitch (type) {\n\t\t\tcase 'view':\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn Deno.readFile(uri);\n\t\t\tcase 'text':\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn Deno.readTextFile(uri);\n\t\t}\n\t}\n\n\tprotected resolve(base: string, path: string): string {\n\t\treturn this._path.resolve(base, path);\n\t}\n\n\tprotected dirname(uri: string): string {\n\t\treturn this._path.dirname(uri);\n\t}\n}\n", "import { PlatformIO } from './platform-io';\nimport { HTTPUtils } from '../utils';\nimport { Format } from '../constants';\n\n/**\n * # WebIO\n *\n * *I/O service for Web.*\n *\n * The most common use of the I/O service is to read/write a {@link Document} with a given path.\n * Methods are also available for converting in-memory representations of raw glTF files, both\n * binary (*Uint8Array*) and JSON ({@link JSONDocument}).\n *\n * Usage:\n *\n * ```typescript\n * import { WebIO } from '@gltf-transform/core';\n *\n * const io = new WebIO({credentials: 'include'});\n *\n * // Read.\n * let document;\n * document = await io.read('model.glb');  // → Document\n * document = await io.readBinary(glb);    // Uint8Array → Document\n *\n * // Write.\n * const glb = await io.writeBinary(document); // Document → Uint8Array\n * ```\n *\n * @category I/O\n */\nexport class WebIO extends PlatformIO {\n\tprivate readonly _fetchConfig: RequestInit;\n\n\t/**\n\t * Constructs a new WebIO service. Instances are reusable.\n\t * @param fetchConfig Configuration object for Fetch API.\n\t */\n\tconstructor(fetchConfig = HTTPUtils.DEFAULT_INIT) {\n\t\tsuper();\n\t\tthis._fetchConfig = fetchConfig;\n\t}\n\n\tprotected async readURI(uri: string, type: 'view'): Promise<Uint8Array>;\n\tprotected async readURI(uri: string, type: 'text'): Promise<string>;\n\tprotected async readURI(uri: string, type: 'view' | 'text'): Promise<Uint8Array | string> {\n\t\tconst response = await fetch(uri, this._fetchConfig);\n\t\tswitch (type) {\n\t\t\tcase 'view':\n\t\t\t\treturn new Uint8Array(await response.arrayBuffer());\n\t\t\tcase 'text':\n\t\t\t\treturn response.text();\n\t\t}\n\t}\n\n\tprotected resolve(base: string, path: string): string {\n\t\treturn HTTPUtils.resolve(base, path);\n\t}\n\n\tprotected dirname(uri: string): string {\n\t\treturn HTTPUtils.dirname(uri);\n\t}\n\n\t/** @hidden */\n\tprotected detectFormat(uri: string): Format {\n\t\treturn HTTPUtils.extension(uri) === 'glb' ? Format.GLB : Format.GLTF;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["_", "EventDispatcher", "_listeners", "addEventListener", "type", "listener", "listeners", "this", "indexOf", "push", "removeEventListener", "listenerArray", "index", "splice", "dispatchEvent", "event", "array", "slice", "i", "l", "length", "call", "dispose", "key", "GraphEdge", "constructor", "_name", "_parent", "_child", "_attributes", "super", "_disposed", "isOnGraph", "Error", "getName", "getParent", "getChild", "setChild", "child", "getAttributes", "target", "isDisposed", "Graph", "_emptySet", "Set", "_edges", "_parentEdges", "Map", "_childEdges", "listEdges", "Array", "from", "listParentEdges", "node", "get", "listParents", "map", "edge", "listChildEdges", "listChildren", "disconnectParents", "filter", "edges", "forEach", "createEdge", "name", "a", "b", "attributes", "_registerEdge", "add", "parent", "has", "set", "_removeEdge", "delete", "isRef", "value", "isRefList", "isArray", "isRefMap", "Object", "values", "$attributes", "Symbol", "$immutableKeys", "GraphNode", "graph", "_createAttributes", "getDefaults", "defaultAttributes", "ref", "other", "detach", "swap", "old", "replacement", "attribute", "setRef", "find", "refAttributes", "removeRef", "addRef", "refMap", "setRefMap", "getRef", "prevRef", "listRefs", "refs", "retained", "retainedRef", "listRefMapKeys", "keys", "listRefMapValues", "getRefMap", "metadata", "assign", "y", "i", "a", "x", "y", "z", "a", "m", "x", "y", "z", "w", "a", "i", "a", "b", "b2", "S", "VERSION", "GLB_BUFFER", "PropertyType", "VertexLayout", "BufferViewUsage", "TextureChannel", "Format", "Verbosity", "bounds", "node", "resultBounds", "min", "Infinity", "max", "parents", "propertyType", "NODE", "listChildren", "parent", "traverse", "mesh", "getMesh", "meshBounds", "getMeshBounds", "getWorldMatrix", "expandBounds", "worldMatrix", "prim", "listPrimitives", "position", "getAttribute", "localPos", "worldPos", "i", "getCount", "getElement", "transformMat4", "point", "target", "Math", "BufferUtils", "[object Object]", "dataURI", "Buffer", "byteString", "atob", "split", "ia", "Uint8Array", "length", "charCodeAt", "data", "isBase64", "indexOf", "from", "text", "TextEncoder", "encode", "array", "TextDecoder", "decode", "toString", "arrays", "totalByteLength", "byteLength", "result", "byteOffset", "set", "srcArray", "paddingByte", "paddedLength", "this", "padNumber", "dstArray", "v", "ceil", "a", "b", "buffer", "view", "ArrayBuffer", "isView", "Error", "ColorUtils", "hex", "floor", "_target", "convertSRGBToLinear", "factor", "r", "g", "convertLinearToSRGB", "source", "_source", "pow", "PNGImageUtils", "match", "getSize", "DataView", "decodeText", "slice", "PNG_FRIED_CHUNK_NAME", "getUint32", "getChannels", "_buffer", "ImageUtils", "mimeType", "impl", "impls", "getGPUByteLength", "uncompressedBytes", "resolution", "pop", "extension", "validateJPEGBuffer", "TypeError", "getUint8", "image/jpeg", "next", "getUint16", "image/png", "FileUtils", "uri", "fileName", "substring", "lastIndexOf", "startsWith", "mimeTypeToExtension", "isObject", "o", "Object", "prototype", "call", "isPlainObject", "ctor", "constructor", "prot", "hasOwnProperty", "Logger", "verbosity", "debug", "DEBUG", "console", "info", "INFO", "warn", "WARN", "error", "ERROR", "DEFAULT_INSTANCE", "MathUtils", "tolerance", "abs", "c", "componentType", "f", "round", "srcMat", "dstTranslation", "dstRotation", "dstScale", "sx", "sy", "sz", "determinant", "_m1", "invSX", "invSY", "invSZ", "getRotation", "srcTranslation", "srcRotation", "srcScale", "dstMat", "te", "x", "y", "z", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "equalsRef", "refA", "refB", "getChild", "equals", "equalsRefList", "refListA", "refListB", "equalsRefMap", "refMapA", "refMapB", "keysA", "keys", "keysB", "key", "equalsArray", "equalsObject", "_a", "_b", "numKeysA", "numKeysB", "valueA", "valueB", "isArray", "value", "Array", "ALPHABET", "previousIDs", "Set", "generateOne", "rtn", "charAt", "random", "uuid", "retries", "id", "has", "add", "HTTPUtils", "path", "index", "basename", "URL", "pathname", "base", "isRelativePath", "stack", "parts", "push", "join", "PROTOCOL_REGEXP", "test", "DEFAULT_INIT", "COPY_IDENTITY", "t", "EMPTY_SET", "Property", "GraphNode", "graph", "name", "super", "$attributes", "init", "dispatchEvent", "type", "getDefaults", "assign", "extras", "getName", "get", "setName", "getExtras", "setExtras", "clone", "PropertyClass", "copy", "other", "resolve", "GraphEdge", "$immutableKeys", "dispose", "isRefList", "ref", "isRefMap", "subkey", "thisValue", "otherValue", "setRef", "getAttributes", "addRef", "setRefMap", "JSON", "parse", "stringify", "skip", "isRef", "detach", "disconnectParents", "n", "listParents", "ExtensibleProperty", "extensions", "getExtension", "getRefMap", "setExtension", "extensionProperty", "_validateParent", "listExtensions", "listRefMapValues", "Accessor", "_in", "identity", "_out", "ACCESSOR", "Type", "SCALAR", "ComponentType", "FLOAT", "normalized", "VEC2", "VEC3", "VEC4", "MAT2", "MAT3", "MAT4", "BYTE", "UNSIGNED_BYTE", "SHORT", "UNSIGNED_SHORT", "UNSIGNED_INT", "getMinNormalized", "elementSize", "getElementSize", "getMin", "j", "count", "Number", "isFinite", "getMaxNormalized", "getMax", "getType", "setType", "getComponentSize", "BYTES_PER_ELEMENT", "getComponentType", "getNormalized", "setNormalized", "denormalize", "normalize", "getScalar", "setScalar", "setElement", "getBuffer", "getRef", "setBuffer", "getArray", "setArray", "Float32Array", "Uint32Array", "Uint16Array", "Int16Array", "Int8Array", "getByteLength", "Animation", "ANIMATION", "channels", "samplers", "addChannel", "channel", "removeChannel", "removeRef", "listChannels", "listRefs", "addSampler", "sampler", "removeSampler", "listSamplers", "AnimationChannel", "ANIMATION_CHANNEL", "targetPath", "targetNode", "getTargetPath", "setTargetPath", "getTargetNode", "setTargetNode", "getSampler", "setSampler", "TargetPath", "TRANSLATION", "ROTATION", "SCALE", "WEIGHTS", "AnimationSampler", "ANIMATION_SAMPLER", "getDefaultAttributes", "interpolation", "Interpolation", "LINEAR", "input", "output", "getInterpolation", "setInterpolation", "getInput", "setInput", "usage", "OTHER", "getOutput", "setOutput", "STEP", "CUBICSPLINE", "BUFFER", "getURI", "setURI", "Camera", "CAMERA", "PERSPECTIVE", "znear", "zfar", "aspectRatio", "yfov", "PI", "xmag", "ymag", "getZNear", "setZNear", "getZFar", "setZFar", "getAspectRatio", "setAspectRatio", "getYFov", "setYFov", "getXMag", "setXMag", "getYMag", "setYMag", "ORTHOGRAPHIC", "ExtensionProperty", "parentTypes", "includes", "EXTENSION_NAME", "TextureInfo", "TEXTURE_INFO", "texCoord", "magFilter", "minFilter", "wrapS", "WrapMode", "REPEAT", "wrapT", "getTexCoord", "setTexCoord", "getMagFilter", "setMagFilter", "getMinFilter", "setMinFilter", "getWrapS", "setWrapS", "getWrapT", "setWrapT", "CLAMP_TO_EDGE", "MIRRORED_REPEAT", "MagFilter", "NEAREST", "MinFilter", "NEAREST_MIPMAP_NEAREST", "LINEAR_MIPMAP_NEAREST", "NEAREST_MIPMAP_LINEAR", "LINEAR_MIPMAP_LINEAR", "R", "G", "B", "A", "Material", "MATERIAL", "alphaMode", "AlphaMode", "OPAQUE", "alphaCutoff", "doubleSided", "baseColorFactor", "baseColorTexture", "baseColorTextureInfo", "emissiveFactor", "emissiveTexture", "emissiveTextureInfo", "normalScale", "normalTexture", "normalTextureInfo", "occlusionStrength", "occlusionTexture", "occlusionTextureInfo", "roughnessFactor", "metallicFactor", "metallicRoughnessTexture", "metallicRoughnessTextureInfo", "getDoubleSided", "setDoubleSided", "getAlpha", "setAlpha", "alpha", "getAlphaMode", "setAlphaMode", "getAlphaCutoff", "setAlphaCutoff", "getBaseColorFactor", "setBaseColorFactor", "getBaseColorHex", "factorToHex", "setBaseColorHex", "hexToFactor", "getBaseColorTexture", "getBaseColorTextureInfo", "setBaseColorTexture", "texture", "getEmissiveFactor", "setEmissiveFactor", "getEmissiveHex", "setEmissiveHex", "getEmissiveTexture", "getEmissiveTextureInfo", "setEmissiveTexture", "getNormalScale", "setNormalScale", "scale", "getNormalTexture", "getNormalTextureInfo", "setNormalTexture", "getOcclusionStrength", "setOcclusionStrength", "strength", "getOcclusionTexture", "getOcclusionTextureInfo", "setOcclusionTexture", "getRoughnessFactor", "setRoughnessFactor", "getMetallicFactor", "setMetallicFactor", "getMetallicRoughnessTexture", "getMetallicRoughnessTextureInfo", "setMetallicRoughnessTexture", "MASK", "BLEND", "Mesh", "MESH", "weights", "primitives", "addPrimitive", "primitive", "removePrimitive", "getWeights", "setWeights", "Node", "_parent", "translation", "rotation", "camera", "skin", "children", "getTranslation", "getScale", "setTranslation", "setRotation", "setScale", "getMatrix", "compose", "setMatrix", "matrix", "decompose", "getWorldTranslation", "getWorldRotation", "getWorldScale", "s", "ancestors", "ancestor", "multiply", "addChild", "child", "removeChild", "childrenRefs", "addEventListener", "getParent", "setMesh", "getCamera", "setCamera", "getSkin", "setSkin", "fn", "Primitive", "PRIMITIVE", "mode", "Mode", "TRIANGLES", "material", "indices", "attributes", "targets", "getIndices", "setIndices", "ELEMENT_ARRAY_BUFFER", "semantic", "setAttribute", "accessor", "ARRAY_BUFFER", "listAttributes", "listSemantics", "listRefMapKeys", "getMaterial", "setMaterial", "getMode", "setMode", "listTargets", "addTarget", "removeTarget", "POINTS", "LINES", "LINE_LOOP", "LINE_STRIP", "TRIANGLE_STRIP", "TRIANGLE_FAN", "PrimitiveTarget", "PRIMITIVE_TARGET", "e", "Scene", "SCENE", "Skin", "SKIN", "skeleton", "inverseBindMatrices", "joints", "getSkeleton", "setSkeleton", "getInverseBindMatrices", "setInverseBindMatrices", "INVERSE_BIND_MATRICES", "addJoint", "joint", "removeJoint", "listJoints", "Texture", "TEXTURE", "image", "getMimeType", "extensionToMimeType", "setMimeType", "getImage", "setImage", "assertView", "Root", "ROOT", "asset", "generator", "version", "defaultScene", "accessors", "animations", "buffers", "cameras", "materials", "meshes", "nodes", "scenes", "skins", "textures", "_extensions", "event", "_addChildOfRoot", "setDefaultScene", "getDefaultScene", "extensionName", "otherExtension", "getAsset", "listExtensionsUsed", "listExtensionsRequired", "filter", "isRequired", "_enableExtension", "_disableExtension", "delete", "listScenes", "listNodes", "listCameras", "listSkins", "listMeshes", "listMaterials", "listTextures", "listAnimations", "listAccessors", "listBuffers", "Document", "_graph", "Graph", "_root", "_logger", "getRoot", "getGraph", "getLogger", "setLogger", "logger", "merge", "thisExtension", "createExtension", "setRequired", "visited", "propertyMap", "Map", "edge", "listEdges", "otherProp", "thisProp", "p", "resolved", "transforms", "map", "transform", "find", "ext", "createScene", "createNode", "createCamera", "createSkin", "createMesh", "createPrimitive", "createPrimitiveTarget", "createMaterial", "createTexture", "createAnimation", "createAnimationChannel", "createAnimationSampler", "createAccessor", "createBuffer", "Extension", "document", "prereadTypes", "prewriteTypes", "readDependencies", "writeDependencies", "required", "properties", "_listener", "_event", "_addExtensionProperty", "_removeExtensionProperty", "removeEventListener", "property", "listProperties", "install", "dependency", "preread", "_readerContext", "_propertyType", "prewrite", "_writerContext", "ReaderContext", "jsonDoc", "bufferViews", "bufferViewBuffers", "textureInfos", "setTextureInfo", "textureInfo", "textureInfoDef", "textureDef", "json", "samplerDef", "ComponentTypeToTypedArray", "5120", "5121", "5122", "5123", "5125", "5126", "DEFAULT_OPTIONS", "dependencies", "getAccessorArray", "accessorDef", "context", "bufferView", "bufferViewDef", "TypedArray", "componentSize", "byteStride", "accessorByteOffset", "getFloat32", "getInt16", "getInt8", "BufferViewTarget", "WriterContext", "_doc", "options", "accessorIndexMap", "animationIndexMap", "bufferIndexMap", "cameraIndexMap", "skinIndexMap", "materialIndexMap", "meshIndexMap", "nodeIndexMap", "imageIndexMap", "textureDefIndexMap", "textureInfoDefMap", "samplerDefIndexMap", "sceneIndexMap", "imageBufferViews", "otherBufferViews", "otherBufferViewsIndexMap", "extensionData", "bufferURIGenerator", "imageURIGenerator", "_accessorUsageMap", "accessorUsageGroupedByParent", "accessorParents", "root", "numBuffers", "numImages", "UniqueURIGenerator", "listParentEdges", "replace", "createTextureInfoDef", "samplerKey", "textureKey", "createPropertyDef", "def", "createAccessorDef", "some", "fround", "createImageData", "imageDef", "format", "GLB", "createURI", "resources", "getAccessorUsage", "cachedUsage", "addAccessorToUsageGroup", "prevUsage", "listAccessorUsageGroups", "entries", "USAGE_TO_TARGET", "multiple", "counter", "object", "ChunkType", "PlatformIO", "_dependencies", "_vertexLayout", "INTERLEAVED", "lastReadBytes", "lastWriteBytes", "registerExtensions", "register", "registerDependencies", "setVertexLayout", "layout", "readJSON", "readAsJSON", "detectFormat", "_readGLB", "_readGLTF", "_copyJSON", "_readResourcesInternal", "_options", "doc", "validate", "assetDef", "copyright", "extensionsUsed", "extensionsRequired", "bufferDefs", "forEach", "bufferDef", "toView", "sparse", "sparseDef", "indicesDef", "valuesDef", "values", "imageDefs", "images", "textureDefs", "imageData", "materialDef", "pbrDef", "pbrMetallicRoughness", "meshDefs", "meshDef", "primitiveDef", "targetNames", "targetDef", "targetIndex", "targetName", "accessorIndex", "cameraDef", "perspectiveDef", "perspective", "orthoDef", "orthographic", "nodeDefs", "nodeDef", "skinDef", "nodeIndex", "childIndex", "animationDef", "animation", "channelDef", "sceneDefs", "sceneDef", "scene", "read", "glb", "_binaryToJSON", "jsonDocument", "binaryToJSON", "extensionsRegistered", "concatAccessors", "bufferIndex", "bufferByteOffset", "bufferViewTarget", "accessorArray", "pad", "concat", "interleaveAccessors", "vertexCount", "vertexByteOffset", "viewByteOffset", "setFloat32", "setInt8", "setInt16", "setUint8", "setUint16", "setUint32", "accessorRefs", "uses", "textureIndex", "groupByParent", "accessorEdges", "parentAccessors", "size", "bufferAccessors", "bufferAccessorsSet", "bufferByteLength", "usageGroups", "vertexLayout", "undefined", "imagePadding", "eq", "samplerIndexMap", "samplerIndex", "write", "unused", "GLTF", "writeJSON", "header", "jsonText", "jsonChunkData", "encodeText", "jsonChunkHeader", "jsonChunk", "binBuffer", "binChunkData", "binChunkHeader", "binChunk", "isAbsoluteURL", "jsonContent", "readURI", "_readResourcesExternal", "dirname", "pendingResources", "async", "resource", "Promise", "_this", "all", "resolveResource", "resourceUUID", "createBufferFromDataURI", "jsonByteLength", "binByteOffset", "BIN", "@glb.bin", "NodeIO", "_fetch", "_fetchConfig", "_fs", "_path", "_fetchEnabled", "require", "promises", "setAllowHTTP", "allow", "response", "arrayBuffer", "readFile", "isGLB", "_writeGLB", "_writeGLTF", "fs", "dir", "writeFile", "pending", "resourceURI", "writeBinary", "DenoIO", "Deno", "readTextFile", "WebIO", "fetchConfig", "fetch"]
}
